DescriptorResolver@0 {
    <name not found> = NullValue@1
    <name not found> = NullValue@1
}

LazyJavaClassDescriptor@2['AbstractCollection'] {
    typeConstructor = LazyJavaClassTypeConstructor@3['AbstractCollection']
}

LazyJavaClassDescriptor@4['AbstractSet'] {
    typeConstructor = LazyJavaClassTypeConstructor@5['AbstractSet']
}

LazyJavaClassDescriptor@6['HashSet'] {
    constructors = ArrayList@7[5] { JavaConstructorDescriptor@8['<init>'], JavaConstructorDescriptor@9['<init>'], JavaConstructorDescriptor@10['<init>'], ... } // through LazyJavaClassMemberScope@11
    defaultType = JetTypeImpl@12['HashSet<1>']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@13['HashSet']
}

LazyJavaClassDescriptor@14['Serializable'] {
    typeConstructor = LazyJavaClassTypeConstructor@15['Serializable']
}

LazyJavaClassTypeConstructor@3['AbstractCollection'] {
    supertypes = ArrayList@16[1] { LazyJavaClassifierType@17['Collection<E>'] }
}

LazyJavaClassTypeConstructor@5['AbstractSet'] {
    parameters = ArrayList@18[1] { LazyJavaTypeParameterDescriptor@19['E'] }
    supertypes = ArrayList@20[2] { LazyJavaClassifierType@21['AbstractCollection<E>'], LazyJavaClassifierType@22['Set<E>'] }
}

LazyJavaClassTypeConstructor@13['HashSet'] {
    parameters = ArrayList@23[1] { LazyJavaTypeParameterDescriptor@24['E'] }
    supertypes = ArrayList@25[4] { LazyJavaClassifierType@26['AbstractSet<E>'], LazyJavaClassifierType@27['Set<E>'], LazyJavaClassifierType@28['Cloneable'], ... }
}

LazyJavaClassTypeConstructor@15['Serializable'] {
    supertypes = ArrayList@29[1] { JetTypeImpl@30['Any'] }
}

LazyJavaClassifierType@21['AbstractCollection<E>'] {
    classifier = JavaClassImpl@31['AbstractCollection']
    typeConstructor = LazyJavaClassTypeConstructor@3['AbstractCollection']
}

LazyJavaClassifierType@26['AbstractSet<E>'] {
    arguments = ArrayList@32[1] { TypeProjectionImpl@33 }
    classifier = JavaClassImpl@34['AbstractSet']
    typeConstructor = LazyJavaClassTypeConstructor@5['AbstractSet']
}

LazyJavaClassifierType@28['Cloneable'] {
    classifier = JavaClassImpl@35['Cloneable']
    typeConstructor = DeserializedClassTypeConstructor@36
}

LazyJavaClassifierType@37['Collection<? extends E>'] {
    arguments = ArrayList@38[1] { TypeProjectionImpl@39 }
    classifier = JavaClassImpl@40['Collection']
    memberScope = SubstitutingScope@41
    nullable = 'false': Boolean@42
    typeConstructor = DeserializedClassTypeConstructor@43
}

LazyJavaClassifierType@44['Collection<? extends E>'] {
    arguments = ArrayList@45[1] { TypeProjectionImpl@46 }
    classifier = JavaClassImpl@40['Collection']
    memberScope = SubstitutingScope@47
    nullable = 'true': Boolean@48
    typeConstructor = DeserializedClassTypeConstructor@49
}

LazyJavaClassifierType@17['Collection<E>'] {
    classifier = JavaClassImpl@50['Collection']
    typeConstructor = DeserializedClassTypeConstructor@43
}

LazyJavaClassifierType@51['E'] {
    arguments = ArrayList@52[empty]
    classifier = JavaTypeParameterImpl@53['E']
    nullable = 'false': Boolean@42
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@54
}

LazyJavaClassifierType@55['E'] {
    arguments = ArrayList@56[empty]
    classifier = JavaTypeParameterImpl@57['E']
    nullable = 'false': Boolean@42
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@54
}

LazyJavaClassifierType@58['E'] {
    arguments = ArrayList@59[empty]
    classifier = JavaTypeParameterImpl@60['E']
    nullable = 'false': Boolean@42
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@61
}

LazyJavaClassifierType@62['E'] {
    arguments = ArrayList@63[empty]
    classifier = JavaTypeParameterImpl@64['E']
    nullable = 'false': Boolean@42
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@54
}

LazyJavaClassifierType@65['E'] {
    arguments = ArrayList@66[empty]
    classifier = JavaTypeParameterImpl@57['E']
    nullable = 'true': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@54
}

LazyJavaClassifierType@67['E'] {
    arguments = ArrayList@68[empty]
    classifier = JavaTypeParameterImpl@60['E']
    nullable = 'true': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@61
}

LazyJavaClassifierType@69['E'] {
    arguments = ArrayList@70[empty]
    classifier = JavaTypeParameterImpl@53['E']
    nullable = 'true': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@54
}

LazyJavaClassifierType@71['E'] {
    arguments = ArrayList@72[empty]
    classifier = JavaTypeParameterImpl@64['E']
    nullable = 'true': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@54
}

LazyJavaClassifierType@73['Object'] {
    classifier = JavaClassImpl@74['Object']
    typeConstructor = DeserializedClassTypeConstructor@75
}

LazyJavaClassifierType@76['Object'] {
    classifier = JavaClassImpl@77['Object']
    typeConstructor = DeserializedClassTypeConstructor@75
}

LazyJavaClassifierType@78['Serializable'] {
    classifier = JavaClassImpl@79['Serializable']
    typeConstructor = LazyJavaClassTypeConstructor@15['Serializable']
}

LazyJavaClassifierType@22['Set<E>'] {
    arguments = ArrayList@80[1] { TypeProjectionImpl@81 }
    classifier = JavaClassImpl@82['Set']
    memberScope = SubstitutingScope@83
    nullable = 'false': Boolean@42
    typeConstructor = DeserializedClassTypeConstructor@84
}

LazyJavaClassifierType@27['Set<E>'] {
    classifier = JavaClassImpl@85['Set']
    typeConstructor = DeserializedClassTypeConstructor@84
}

LazyJavaPackageFragmentProvider@86 {
    packageFragments('<root>': FqName@87) = LazyJavaPackageFragment@88['<root>']
    packageFragments('MutableSet': FqName@89) = null
    packageFragments('String': FqName@90) = null
    packageFragments('a': FqName@91) = null
    packageFragments('a.MutableSet': FqName@92) = null
    packageFragments('a.R': FqName@93) = null
    packageFragments('a.String': FqName@94) = null
    packageFragments('a.a': FqName@95) = null
    packageFragments('java': FqName@96) = LazyJavaPackageFragment@97['java']
    packageFragments('java.io': FqName@98) = LazyJavaPackageFragment@99['io']
    packageFragments('java.lang': FqName@100) = LazyJavaPackageFragment@101['lang']
    packageFragments('java.lang.MutableSet': FqName@102) = null
    packageFragments('java.lang.String': FqName@103) = null
    packageFragments('java.util': FqName@104) = LazyJavaPackageFragment@105['util']
    packageFragments('java.util.HashSet': FqName@106) = null
    packageFragments('kotlin': FqName@107) = null
    packageFragments('kotlin.MutableSet': FqName@108) = null
    packageFragments('kotlin.String': FqName@109) = null
    packageFragments('kotlin.io': FqName@110) = null
    packageFragments('kotlin.jvm': FqName@111) = null
    topLevelClasses(JavaClassImpl@31['AbstractCollection']) = LazyJavaClassDescriptor@2['AbstractCollection']
    topLevelClasses(JavaClassImpl@34['AbstractSet']) = LazyJavaClassDescriptor@4['AbstractSet']
    topLevelClasses(JavaClassImpl@112['HashSet']) = LazyJavaClassDescriptor@6['HashSet']
    topLevelClasses(JavaClassImpl@79['Serializable']) = LazyJavaClassDescriptor@14['Serializable']
}

LazyJavaPackageFragment@97['java'] {
    classes('lang': Name@113) = null // through LazyPackageFragmentScopeForJavaPackage@114
    classes('util': Name@115) = null // through LazyPackageFragmentScopeForJavaPackage@114
    deserializedPackageScope = Empty@116 // through LazyPackageFragmentScopeForJavaPackage@114
    functions('lang': Name@117) = EmptyList@118[empty] // through LazyPackageFragmentScopeForJavaPackage@114
    functions('util': Name@119) = EmptyList@118[empty] // through LazyPackageFragmentScopeForJavaPackage@114
    memberIndex = computeMemberIndex$1@120 // through LazyPackageFragmentScopeForJavaPackage@114
}

LazyJavaPackageFragment@101['lang'] {
    classes('HashSet': Name@121) = null // through LazyPackageFragmentScopeForJavaPackage@122
    classes('a': Name@123) = null // through LazyPackageFragmentScopeForJavaPackage@122
    classes('b': Name@124) = null // through LazyPackageFragmentScopeForJavaPackage@122
    classes('equals': Name@125) = null // through LazyPackageFragmentScopeForJavaPackage@122
    deserializedPackageScope = Empty@116 // through LazyPackageFragmentScopeForJavaPackage@122
    functions('HashSet': Name@121) = EmptyList@118[empty] // through LazyPackageFragmentScopeForJavaPackage@122
    functions('equals': Name@125) = EmptyList@118[empty] // through LazyPackageFragmentScopeForJavaPackage@122
    memberIndex = computeMemberIndex$1@126 // through LazyPackageFragmentScopeForJavaPackage@122
}

LazyJavaPackageFragment@105['util'] {
    classes('HashSet': Name@127) = LazyJavaClassDescriptor@6['HashSet'] // through LazyPackageFragmentScopeForJavaPackage@128
    deserializedPackageScope = Empty@116 // through LazyPackageFragmentScopeForJavaPackage@128
    functions('HashSet': Name@129) = EmptyList@118[empty] // through LazyPackageFragmentScopeForJavaPackage@128
    memberIndex = computeMemberIndex$1@130 // through LazyPackageFragmentScopeForJavaPackage@128
}

LazyJavaTypeParameterDescriptor@24['E'] {
    defaultType = JetTypeImpl@131['E']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@54
    upperBounds = LinkedHashSet@132[1] { NullableType@133 }
}

LazyJavaTypeParameterDescriptor@19['E'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@61
}

LazyJavaTypeParameterResolver@134 {
    resolve(JavaTypeParameterImpl@135['E']) = LazyJavaTypeParameterDescriptor@19['E']
}

LazyJavaTypeParameterResolver@136 {
    resolve(JavaTypeParameterImpl@137['E']) = LazyJavaTypeParameterDescriptor@24['E']
}

ResolutionTaskHolder@138 {
    <name not found> = ArrayList@139[1] { ResolutionCandidate@140 }
    <name not found> = ArrayList@141[1] { ResolutionCandidate@140 }
    <name not found> = ArrayList@142[1] { ResolutionCandidate@143 }
    <name not found> = ArrayList@144[1] { ResolutionCandidate@143 }
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
}

ResolutionTaskHolder@145 {
    <name not found> = ArrayList@146[1] { ResolutionCandidate@147 }
    <name not found> = ArrayList@148[1] { ResolutionCandidate@147 }
    <name not found> = ArrayList@149[1] { ResolutionCandidate@150 }
    <name not found> = ArrayList@151[1] { ResolutionCandidate@150 }
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
}

ResolutionTaskHolder@152 {
    <name not found> = ArrayList@153[1] { ResolutionCandidate@154 }
    <name not found> = ArrayList@155[1] { ResolutionCandidate@154 }
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
}

ResolutionTaskHolder@156 {
    <name not found> = ArrayList@157[1] { ResolutionCandidate@158 }
    <name not found> = ArrayList@159[1] { ResolutionCandidate@158 }
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
}

ResolutionTaskHolder@160 {
    <name not found> = ArrayList@161[1] { ResolutionCandidate@162 }
    <name not found> = ArrayList@163[1] { ResolutionCandidate@162 }
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
}

ResolutionTaskHolder@164 {
    <name not found> = ArrayList@165[1] { ResolutionCandidate@166 }
    <name not found> = ArrayList@167[1] { ResolutionCandidate@166 }
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
}

ResolutionTaskHolder@168 {
    <name not found> = ArrayList@169[1] { ResolutionCandidate@170 }
    <name not found> = ArrayList@171[1] { ResolutionCandidate@170 }
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
}

ResolutionTaskHolder@172 {
    <name not found> = ArrayList@173[1] { ResolutionCandidate@174 }
    <name not found> = ArrayList@175[1] { ResolutionCandidate@174 }
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
}

ResolutionTaskHolder@176 {
    <name not found> = ArrayList@177[4] { ResolutionCandidate@178, ResolutionCandidate@179, ResolutionCandidate@180, ... }
    <name not found> = ArrayList@181[5] { ResolutionCandidate@178, ResolutionCandidate@179, ResolutionCandidate@180, ... }
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
    <name not found> = EmptyList@118[empty]
}
