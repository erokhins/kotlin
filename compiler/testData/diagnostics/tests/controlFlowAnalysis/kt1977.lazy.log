LazyJavaClassDescriptor@0['Exception'] {
    typeConstructor = LazyJavaClassTypeConstructor@1['Exception']
}

LazyJavaClassDescriptor@2['IllegalArgumentException'] {
    typeConstructor = LazyJavaClassTypeConstructor@3['IllegalArgumentException']
}

LazyJavaClassDescriptor@4['Integer'] {
    enumEntryIndex = LinkedHashMap@5 // through LazyJavaClassMemberScope@6
    functions('parseInt': Name@7) = ArrayList@8[2] { JavaMethodDescriptor@9['parseInt'], JavaMethodDescriptor@10['parseInt'] } // through LazyJavaStaticClassScope@11
    functions('parseInt': Name@7) = EmptyList@12[empty] // through LazyJavaClassMemberScope@6
    memberIndex = computeMemberIndex$1@13 // through LazyJavaClassMemberScope@6
    memberIndex = computeMemberIndex$1@14 // through LazyJavaStaticClassScope@11
    nestedClassIndex = LinkedHashMap@15 // through LazyJavaClassMemberScope@6
    nestedClasses('parseInt': Name@7) = null // through LazyJavaClassMemberScope@6
    properties('parseInt': Name@7) = EmptyList@12[empty] // through LazyJavaClassMemberScope@6
    properties('parseInt': Name@7) = EmptyList@12[empty] // through LazyJavaStaticClassScope@11
    typeConstructor = LazyJavaClassTypeConstructor@16['Integer']
}

LazyJavaClassDescriptor@17['NumberFormatException'] {
    typeConstructor = LazyJavaClassTypeConstructor@18['NumberFormatException']
}

LazyJavaClassDescriptor@19['RuntimeException'] {
    typeConstructor = LazyJavaClassTypeConstructor@20['RuntimeException']
}

LazyJavaClassTypeConstructor@1['Exception'] {
    parameters = ArrayList@21[empty]
    supertypes = ArrayList@22[1] { LazyJavaClassifierType@23['Throwable'] }
}

LazyJavaClassTypeConstructor@3['IllegalArgumentException'] {
    parameters = ArrayList@24[empty]
    supertypes = ArrayList@25[1] { LazyJavaClassifierType@26['RuntimeException'] }
}

LazyJavaClassTypeConstructor@16['Integer'] {
    supertypes = ArrayList@27[2] { LazyJavaClassifierType@28['Number'], LazyJavaClassifierType@29['Comparable<Integer>'] }
}

LazyJavaClassTypeConstructor@18['NumberFormatException'] {
    parameters = ArrayList@30[empty]
    supertypes = ArrayList@31[1] { LazyJavaClassifierType@32['IllegalArgumentException'] }
}

LazyJavaClassTypeConstructor@20['RuntimeException'] {
    parameters = ArrayList@33[empty]
    supertypes = ArrayList@34[1] { LazyJavaClassifierType@35['Exception'] }
}

LazyJavaClassifierType@29['Comparable<Integer>'] {
    arguments = ArrayList@36[1] { TypeProjectionImpl@37 }
    classifier = JavaClassImpl@38['Comparable']
    memberScope = SubstitutingScope@39
    typeConstructor = DeserializedClassTypeConstructor@40
}

LazyJavaClassifierType@35['Exception'] {
    arguments = ArrayList@41[empty]
    classifier = JavaClassImpl@42['Exception']
    typeConstructor = LazyJavaClassTypeConstructor@1['Exception']
}

LazyJavaClassifierType@32['IllegalArgumentException'] {
    arguments = ArrayList@43[empty]
    classifier = JavaClassImpl@44['IllegalArgumentException']
    typeConstructor = LazyJavaClassTypeConstructor@3['IllegalArgumentException']
}

LazyJavaClassifierType@45['Integer'] {
    arguments = ArrayList@46[empty]
    classifier = JavaClassImpl@47['Integer']
    nullable = 'false': Boolean@48
    typeConstructor = DeserializedClassTypeConstructor@49
}

LazyJavaClassifierType@50['Integer'] {
    arguments = ArrayList@51[empty]
    classifier = JavaClassImpl@47['Integer']
    nullable = 'true': Boolean@52
    typeConstructor = DeserializedClassTypeConstructor@49
}

LazyJavaClassifierType@28['Number'] {
    arguments = ArrayList@53[empty]
    classifier = JavaClassImpl@54['Number']
    memberScope = DeserializedClassMemberScope@55
    typeConstructor = DeserializedClassTypeConstructor@56
}

LazyJavaClassifierType@26['RuntimeException'] {
    arguments = ArrayList@57[empty]
    classifier = JavaClassImpl@58['RuntimeException']
    typeConstructor = LazyJavaClassTypeConstructor@20['RuntimeException']
}

LazyJavaClassifierType@59['String'] {
    arguments = ArrayList@60[empty]
    classifier = JavaClassImpl@61['String']
    nullable = 'false': Boolean@48
    typeConstructor = DeserializedClassTypeConstructor@62
}

LazyJavaClassifierType@63['String'] {
    arguments = ArrayList@64[empty]
    classifier = JavaClassImpl@65['String']
    nullable = 'false': Boolean@48
    typeConstructor = DeserializedClassTypeConstructor@62
}

LazyJavaClassifierType@66['String'] {
    arguments = ArrayList@67[empty]
    classifier = JavaClassImpl@61['String']
    nullable = 'true': Boolean@52
    typeConstructor = DeserializedClassTypeConstructor@62
}

LazyJavaClassifierType@68['String'] {
    arguments = ArrayList@69[empty]
    classifier = JavaClassImpl@65['String']
    nullable = 'true': Boolean@52
    typeConstructor = DeserializedClassTypeConstructor@62
}

LazyJavaClassifierType@23['Throwable'] {
    arguments = ArrayList@70[empty]
    classifier = JavaClassImpl@71['Throwable']
    typeConstructor = DeserializedClassTypeConstructor@72
}

LazyJavaPackageFragmentProvider@73 {
    packageFragments('<root>': FqName@74) = LazyJavaPackageFragment@75['<root>']
    packageFragments('Exception': FqName@76) = null
    packageFragments('Int': FqName@77) = null
    packageFragments('Integer': FqName@78) = null
    packageFragments('NumberFormatException': FqName@79) = null
    packageFragments('String': FqName@80) = null
    packageFragments('java': FqName@81) = LazyJavaPackageFragment@82['java']
    packageFragments('java.lang': FqName@83) = LazyJavaPackageFragment@84['lang']
    packageFragments('java.lang.Exception': FqName@85) = null
    packageFragments('java.lang.Int': FqName@86) = null
    packageFragments('java.lang.Integer': FqName@87) = null
    packageFragments('java.lang.NumberFormatException': FqName@88) = null
    packageFragments('java.lang.String': FqName@89) = null
    packageFragments('kotlin': FqName@90) = null
    packageFragments('kotlin.Exception': FqName@91) = null
    packageFragments('kotlin.Int': FqName@92) = null
    packageFragments('kotlin.Integer': FqName@93) = null
    packageFragments('kotlin.NumberFormatException': FqName@94) = null
    packageFragments('kotlin.String': FqName@95) = null
    packageFragments('kotlin.io': FqName@96) = null
    packageFragments('kotlin.jvm': FqName@97) = null
    packageFragments('kt1977': FqName@98) = null
    packageFragments('kt1977.Exception': FqName@99) = null
    packageFragments('kt1977.Int': FqName@100) = null
    packageFragments('kt1977.Integer': FqName@101) = null
    packageFragments('kt1977.NumberFormatException': FqName@102) = null
    packageFragments('kt1977.String': FqName@103) = null
    topLevelClasses(JavaClassImpl@42['Exception']) = LazyJavaClassDescriptor@0['Exception']
    topLevelClasses(JavaClassImpl@44['IllegalArgumentException']) = LazyJavaClassDescriptor@2['IllegalArgumentException']
    topLevelClasses(JavaClassImpl@104['Integer']) = LazyJavaClassDescriptor@4['Integer']
    topLevelClasses(JavaClassImpl@105['NumberFormatException']) = LazyJavaClassDescriptor@17['NumberFormatException']
    topLevelClasses(JavaClassImpl@58['RuntimeException']) = LazyJavaClassDescriptor@19['RuntimeException']
}

LazyJavaPackageFragment@82['java'] {
    classes('lang': Name@106) = null // through LazyPackageFragmentScopeForJavaPackage@107
    deserializedPackageScope = Empty@108 // through LazyPackageFragmentScopeForJavaPackage@107
    functions('lang': Name@109) = EmptyList@12[empty] // through LazyPackageFragmentScopeForJavaPackage@107
    memberIndex = computeMemberIndex$1@110 // through LazyPackageFragmentScopeForJavaPackage@107
}

LazyJavaPackageFragment@84['lang'] {
    classes('Exception': Name@111) = LazyJavaClassDescriptor@0['Exception'] // through LazyPackageFragmentScopeForJavaPackage@112
    classes('Integer': Name@113) = LazyJavaClassDescriptor@4['Integer'] // through LazyPackageFragmentScopeForJavaPackage@112
    classes('NumberFormatException': Name@114) = LazyJavaClassDescriptor@17['NumberFormatException'] // through LazyPackageFragmentScopeForJavaPackage@112
    classes('bar': Name@115) = null // through LazyPackageFragmentScopeForJavaPackage@112
    deserializedPackageScope = Empty@108 // through LazyPackageFragmentScopeForJavaPackage@112
    functions('bar': Name@115) = EmptyList@12[empty] // through LazyPackageFragmentScopeForJavaPackage@112
    memberIndex = computeMemberIndex$1@116 // through LazyPackageFragmentScopeForJavaPackage@112
}

ResolutionTaskHolder@117 {
    <name not found> = ArrayList@118[1] { ResolutionCandidate@119 }
    <name not found> = ArrayList@120[1] { ResolutionCandidate@119 }
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
}

ResolutionTaskHolder@121 {
    <name not found> = ArrayList@122[1] { ResolutionCandidate@123 }
    <name not found> = ArrayList@124[1] { ResolutionCandidate@123 }
}

ResolutionTaskHolder@125 {
    <name not found> = ArrayList@126[1] { ResolutionCandidate@127 }
    <name not found> = ArrayList@128[1] { ResolutionCandidate@127 }
}

ResolutionTaskHolder@129 {
    <name not found> = ArrayList@130[1] { ResolutionCandidate@131 }
    <name not found> = ArrayList@132[1] { ResolutionCandidate@131 }
}

ResolutionTaskHolder@133 {
    <name not found> = ArrayList@134[1] { ResolutionCandidate@135 }
    <name not found> = ArrayList@136[1] { ResolutionCandidate@135 }
}

ResolutionTaskHolder@137 {
    <name not found> = ArrayList@138[2] { ResolutionCandidate@139, ResolutionCandidate@140 }
    <name not found> = ArrayList@141[2] { ResolutionCandidate@139, ResolutionCandidate@140 }
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
}

ResolutionTaskHolder@142 {
    <name not found> = ArrayList@143[2] { ResolutionCandidate@144, ResolutionCandidate@145 }
    <name not found> = ArrayList@146[2] { ResolutionCandidate@144, ResolutionCandidate@145 }
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
}

ResolutionTaskHolder@147 {
    <name not found> = ArrayList@148[2] { ResolutionCandidate@149, ResolutionCandidate@150 }
    <name not found> = ArrayList@151[2] { ResolutionCandidate@149, ResolutionCandidate@150 }
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
}

ResolutionTaskHolder@152 {
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
}

ResolutionTaskHolder@153 {
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
}

ResolutionTaskHolder@154 {
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
    <name not found> = EmptyList@12[empty]
}
