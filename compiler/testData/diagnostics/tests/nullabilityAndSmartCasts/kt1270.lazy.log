DescriptorResolver@0 {
    <name not found> = IntValue@1
}

LazyJavaClassDescriptor@2['AbstractMap'] {
    defaultType = JetTypeImpl@3['AbstractMap<2>']
    functions('get': Name@4) = ArrayList@5[1] { JavaMethodDescriptor@6['get'] } // through LazyJavaClassMemberScope@7
    memberIndex = computeMemberIndex$1@8 // through LazyJavaClassMemberScope@7
    thisAsReceiverParameter = LazyClassReceiverParameterDescriptor@9['<this>']
    typeConstructor = LazyJavaClassTypeConstructor@10['AbstractMap']
}

LazyJavaClassDescriptor@11['HashMap'] {
    constructors = ArrayList@12[4] { JavaConstructorDescriptor@13['<init>'], JavaConstructorDescriptor@14['<init>'], JavaConstructorDescriptor@15['<init>'], ... } // through LazyJavaClassMemberScope@16
    defaultType = JetTypeImpl@17['HashMap<2>']
    enumEntryIndex = LinkedHashMap@18 // through LazyJavaClassMemberScope@16
    functionTypeForSamInterface = null
    functions('get': Name@19) = ArrayList@20[1] { JavaMethodDescriptor@21['get'] } // through LazyJavaClassMemberScope@16
    memberIndex = computeMemberIndex$1@22 // through LazyJavaClassMemberScope@16
    nestedClassIndex = LinkedHashMap@23 // through LazyJavaClassMemberScope@16
    nestedClasses('get': Name@19) = null // through LazyJavaClassMemberScope@16
    thisAsReceiverParameter = LazyClassReceiverParameterDescriptor@24['<this>']
    typeConstructor = LazyJavaClassTypeConstructor@25['HashMap']
}

LazyJavaClassDescriptor@26['Serializable'] {
    functions('get': Name@4) = EmptyList@27[empty] // through LazyJavaClassMemberScope@28
    memberIndex = computeMemberIndex$1@29 // through LazyJavaClassMemberScope@28
    typeConstructor = LazyJavaClassTypeConstructor@30['Serializable']
}

LazyJavaClassTypeConstructor@10['AbstractMap'] {
    parameters = ArrayList@31[2] { LazyJavaTypeParameterDescriptor@32['K'], LazyJavaTypeParameterDescriptor@33['V'] }
    supertypes = ArrayList@34[1] { LazyJavaClassifierType@35['Map<K, V>'] }
}

LazyJavaClassTypeConstructor@25['HashMap'] {
    parameters = ArrayList@36[2] { LazyJavaTypeParameterDescriptor@37['K'], LazyJavaTypeParameterDescriptor@38['V'] }
    supertypes = ArrayList@39[4] { LazyJavaClassifierType@40['AbstractMap<K, V>'], LazyJavaClassifierType@41['Map<K, V>'], LazyJavaClassifierType@42['Cloneable'], ... }
}

LazyJavaClassTypeConstructor@30['Serializable'] {
    parameters = ArrayList@43[empty]
    supertypes = ArrayList@44[1] { JetTypeImpl@45['Any'] }
}

LazyJavaClassifierType@40['AbstractMap<K, V>'] {
    arguments = ArrayList@46[2] { TypeProjectionImpl@47, TypeProjectionImpl@48 }
    classifier = JavaClassImpl@49['AbstractMap']
    memberScope = SubstitutingScope@50
    typeConstructor = LazyJavaClassTypeConstructor@10['AbstractMap']
}

LazyJavaClassifierType@42['Cloneable'] {
    arguments = ArrayList@51[empty]
    classifier = JavaClassImpl@52['Cloneable']
    memberScope = DeserializedClassMemberScope@53
    typeConstructor = DeserializedClassTypeConstructor@54
}

LazyJavaClassifierType@55['K'] {
    arguments = ArrayList@56[empty]
    classifier = JavaTypeParameterImpl@57['K']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@59
}

LazyJavaClassifierType@60['K'] {
    arguments = ArrayList@61[empty]
    classifier = JavaTypeParameterImpl@62['K']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@63
}

LazyJavaClassifierType@64['K'] {
    arguments = ArrayList@65[empty]
    classifier = JavaTypeParameterImpl@66['K']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@59
}

LazyJavaClassifierType@67['K'] {
    arguments = ArrayList@68[empty]
    classifier = JavaTypeParameterImpl@69['K']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@59
}

LazyJavaClassifierType@70['K'] {
    arguments = ArrayList@71[empty]
    classifier = JavaTypeParameterImpl@72['K']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@59
}

LazyJavaClassifierType@73['K'] {
    arguments = ArrayList@74[empty]
    classifier = JavaTypeParameterImpl@69['K']
    nullable = 'true': Boolean@75
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@59
}

LazyJavaClassifierType@76['K'] {
    arguments = ArrayList@77[empty]
    classifier = JavaTypeParameterImpl@62['K']
    nullable = 'true': Boolean@75
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@63
}

LazyJavaClassifierType@78['K'] {
    arguments = ArrayList@79[empty]
    classifier = JavaTypeParameterImpl@57['K']
    nullable = 'true': Boolean@75
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@59
}

LazyJavaClassifierType@80['K'] {
    arguments = ArrayList@81[empty]
    classifier = JavaTypeParameterImpl@72['K']
    nullable = 'true': Boolean@75
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@59
}

LazyJavaClassifierType@82['K'] {
    arguments = ArrayList@83[empty]
    classifier = JavaTypeParameterImpl@66['K']
    nullable = 'true': Boolean@75
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@59
}

LazyJavaClassifierType@84['Map<? extends K, ? extends V>'] {
    arguments = ArrayList@85[2] { TypeProjectionImpl@86, TypeProjectionImpl@87 }
    classifier = JavaClassImpl@88['Map']
    memberScope = SubstitutingScope@89
    nullable = 'false': Boolean@58
    typeConstructor = DeserializedClassTypeConstructor@90
}

LazyJavaClassifierType@91['Map<? extends K, ? extends V>'] {
    arguments = ArrayList@92[2] { TypeProjectionImpl@93, TypeProjectionImpl@94 }
    classifier = JavaClassImpl@88['Map']
    memberScope = SubstitutingScope@95
    nullable = 'true': Boolean@75
    typeConstructor = DeserializedClassTypeConstructor@96
}

LazyJavaClassifierType@41['Map<K, V>'] {
    arguments = ArrayList@97[2] { TypeProjectionImpl@98, TypeProjectionImpl@99 }
    classifier = JavaClassImpl@100['Map']
    memberScope = SubstitutingScope@101
    typeConstructor = DeserializedClassTypeConstructor@90
}

LazyJavaClassifierType@35['Map<K, V>'] {
    arguments = ArrayList@102[2] { TypeProjectionImpl@103, TypeProjectionImpl@104 }
    classifier = JavaClassImpl@105['Map']
    memberScope = SubstitutingScope@106
    typeConstructor = DeserializedClassTypeConstructor@90
}

LazyJavaClassifierType@107['Object'] {
    arguments = ArrayList@108[empty]
    classifier = JavaClassImpl@109['Object']
    memberScope = DeserializedClassMemberScope@110
    nullable = 'false': Boolean@58
    typeConstructor = DeserializedClassTypeConstructor@111
}

LazyJavaClassifierType@112['Object'] {
    arguments = ArrayList@113[empty]
    classifier = JavaClassImpl@114['Object']
    memberScope = DeserializedClassMemberScope@110
    nullable = 'false': Boolean@58
    typeConstructor = DeserializedClassTypeConstructor@111
}

LazyJavaClassifierType@115['Object'] {
    arguments = ArrayList@116[empty]
    classifier = JavaClassImpl@114['Object']
    memberScope = DeserializedClassMemberScope@110
    nullable = 'true': Boolean@75
    typeConstructor = DeserializedClassTypeConstructor@111
}

LazyJavaClassifierType@117['Object'] {
    arguments = ArrayList@118[empty]
    classifier = JavaClassImpl@109['Object']
    memberScope = DeserializedClassMemberScope@110
    nullable = 'true': Boolean@75
    typeConstructor = DeserializedClassTypeConstructor@111
}

LazyJavaClassifierType@119['Object'] {
    classifier = JavaClassImpl@120['Object']
    typeConstructor = DeserializedClassTypeConstructor@111
}

LazyJavaClassifierType@121['Object'] {
    classifier = JavaClassImpl@122['Object']
    typeConstructor = DeserializedClassTypeConstructor@111
}

LazyJavaClassifierType@123['Serializable'] {
    arguments = ArrayList@124[empty]
    classifier = JavaClassImpl@125['Serializable']
    memberScope = LazyJavaClassMemberScope@28
    typeConstructor = LazyJavaClassTypeConstructor@30['Serializable']
}

LazyJavaClassifierType@126['V'] {
    arguments = ArrayList@127[empty]
    classifier = JavaTypeParameterImpl@128['V']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@129
}

LazyJavaClassifierType@130['V'] {
    arguments = ArrayList@131[empty]
    classifier = JavaTypeParameterImpl@132['V']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@133
}

LazyJavaClassifierType@134['V'] {
    arguments = ArrayList@135[empty]
    classifier = JavaTypeParameterImpl@136['V']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@129
}

LazyJavaClassifierType@137['V'] {
    arguments = ArrayList@138[empty]
    classifier = JavaTypeParameterImpl@139['V']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@129
}

LazyJavaClassifierType@140['V'] {
    arguments = ArrayList@141[empty]
    classifier = JavaTypeParameterImpl@142['V']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@129
}

LazyJavaClassifierType@143['V'] {
    arguments = ArrayList@144[empty]
    classifier = JavaTypeParameterImpl@145['V']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@133
}

LazyJavaClassifierType@146['V'] {
    arguments = ArrayList@147[empty]
    classifier = JavaTypeParameterImpl@148['V']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@129
}

LazyJavaClassifierType@149['V'] {
    arguments = ArrayList@150[empty]
    classifier = JavaTypeParameterImpl@142['V']
    nullable = 'true': Boolean@75
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@129
}

LazyJavaClassifierType@151['V'] {
    arguments = ArrayList@152[empty]
    classifier = JavaTypeParameterImpl@128['V']
    nullable = 'true': Boolean@75
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@129
}

LazyJavaClassifierType@153['V'] {
    arguments = ArrayList@154[empty]
    classifier = JavaTypeParameterImpl@148['V']
    nullable = 'true': Boolean@75
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@129
}

LazyJavaClassifierType@155['V'] {
    arguments = ArrayList@156[empty]
    classifier = JavaTypeParameterImpl@132['V']
    nullable = 'true': Boolean@75
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@133
}

LazyJavaClassifierType@157['V'] {
    arguments = ArrayList@158[empty]
    classifier = JavaTypeParameterImpl@136['V']
    nullable = 'true': Boolean@75
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@129
}

LazyJavaClassifierType@159['V'] {
    arguments = ArrayList@160[empty]
    classifier = JavaTypeParameterImpl@139['V']
    nullable = 'true': Boolean@75
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@129
}

LazyJavaClassifierType@161['V'] {
    arguments = ArrayList@162[empty]
    classifier = JavaTypeParameterImpl@145['V']
    nullable = 'true': Boolean@75
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@133
}

LazyJavaPackageFragmentProvider@163 {
    packageFragments('<root>': FqName@164) = LazyJavaPackageFragment@165['<root>']
    packageFragments('Int': FqName@166) = null
    packageFragments('SomeClass': FqName@167) = null
    packageFragments('String': FqName@168) = null
    packageFragments('java': FqName@169) = LazyJavaPackageFragment@170['java']
    packageFragments('java.io': FqName@171) = LazyJavaPackageFragment@172['io']
    packageFragments('java.lang': FqName@173) = LazyJavaPackageFragment@174['lang']
    packageFragments('java.lang.Int': FqName@175) = null
    packageFragments('java.lang.SomeClass': FqName@176) = null
    packageFragments('java.lang.String': FqName@177) = null
    packageFragments('java.util': FqName@178) = LazyJavaPackageFragment@179['util']
    packageFragments('kotlin': FqName@180) = null
    packageFragments('kotlin.Int': FqName@181) = null
    packageFragments('kotlin.SomeClass': FqName@182) = null
    packageFragments('kotlin.String': FqName@183) = null
    packageFragments('kotlin.io': FqName@184) = null
    packageFragments('kotlin.jvm': FqName@185) = null
    packageFragments('kt1270': FqName@186) = null
    packageFragments('kt1270.Int': FqName@187) = null
    packageFragments('kt1270.SomeClass': FqName@188) = null
    packageFragments('kt1270.String': FqName@189) = null
    packageFragments('kt1270.java': FqName@190) = null
    topLevelClasses(JavaClassImpl@49['AbstractMap']) = LazyJavaClassDescriptor@2['AbstractMap']
    topLevelClasses(JavaClassImpl@191['HashMap']) = LazyJavaClassDescriptor@11['HashMap']
    topLevelClasses(JavaClassImpl@125['Serializable']) = LazyJavaClassDescriptor@26['Serializable']
}

LazyJavaPackageFragment@170['java'] {
    classes('lang': Name@192) = null // through LazyPackageFragmentScopeForJavaPackage@193
    classes('util': Name@194) = null // through LazyPackageFragmentScopeForJavaPackage@193
    deserializedPackageScope = Empty@195 // through LazyPackageFragmentScopeForJavaPackage@193
    functions('lang': Name@196) = EmptyList@27[empty] // through LazyPackageFragmentScopeForJavaPackage@193
    memberIndex = computeMemberIndex$1@197 // through LazyPackageFragmentScopeForJavaPackage@193
}

LazyJavaPackageFragment@174['lang'] {
    classes('java': Name@198) = null // through LazyPackageFragmentScopeForJavaPackage@199
    deserializedPackageScope = Empty@195 // through LazyPackageFragmentScopeForJavaPackage@199
}

LazyJavaPackageFragment@179['util'] {
    classes('HashMap': Name@200) = LazyJavaClassDescriptor@11['HashMap'] // through LazyPackageFragmentScopeForJavaPackage@201
    deserializedPackageScope = Empty@195 // through LazyPackageFragmentScopeForJavaPackage@201
    functions('HashMap': Name@200) = EmptyList@27[empty] // through LazyPackageFragmentScopeForJavaPackage@201
    memberIndex = computeMemberIndex$1@202 // through LazyPackageFragmentScopeForJavaPackage@201
}

LazyJavaTypeParameterDescriptor@37['K'] {
    defaultType = JetTypeImpl@203['K']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@59
    upperBounds = LinkedHashSet@204[1] { NullableType@205 }
}

LazyJavaTypeParameterDescriptor@32['K'] {
    defaultType = JetTypeImpl@206['K']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@63
}

LazyJavaTypeParameterDescriptor@38['V'] {
    defaultType = JetTypeImpl@207['V']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@129
    upperBounds = LinkedHashSet@208[1] { NullableType@209 }
}

LazyJavaTypeParameterDescriptor@33['V'] {
    defaultType = JetTypeImpl@210['V']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@133
    upperBounds = LinkedHashSet@211[1] { NullableType@212 }
}

LazyJavaTypeParameterResolver@213 {
    resolve(JavaTypeParameterImpl@214['K']) = LazyJavaTypeParameterDescriptor@37['K']
    resolve(JavaTypeParameterImpl@215['V']) = LazyJavaTypeParameterDescriptor@38['V']
}

LazyJavaTypeParameterResolver@216 {
    resolve(JavaTypeParameterImpl@217['K']) = LazyJavaTypeParameterDescriptor@32['K']
    resolve(JavaTypeParameterImpl@218['V']) = LazyJavaTypeParameterDescriptor@33['V']
}

LazyJavaTypeParameterResolver@219 {
    resolve(JavaTypeParameterImpl@132['V']) = null
}

LazyJavaTypeParameterResolver@220 {
    resolve(JavaTypeParameterImpl@148['V']) = null
}

ResolutionTaskHolder@221 {
    <name not found> = ArrayList@222[1] { ResolutionCandidate@223 }
    <name not found> = ArrayList@224[1] { ResolutionCandidate@223 }
}

ResolutionTaskHolder@225 {
    <name not found> = ArrayList@226[1] { ResolutionCandidate@227 }
    <name not found> = ArrayList@228[1] { ResolutionCandidate@227 }
}

ResolutionTaskHolder@229 {
    <name not found> = ArrayList@230[1] { ResolutionCandidate@231 }
    <name not found> = ArrayList@232[1] { ResolutionCandidate@231 }
}

ResolutionTaskHolder@233 {
    <name not found> = ArrayList@234[4] { ResolutionCandidate@235, ResolutionCandidate@236, ResolutionCandidate@237, ... }
    <name not found> = ArrayList@238[4] { ResolutionCandidate@235, ResolutionCandidate@236, ResolutionCandidate@237, ... }
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
}

ResolutionTaskHolder@239 {
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
}

ResolutionTaskHolder@240 {
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
    <name not found> = EmptyList@27[empty]
}
