DescriptorResolver@0 {
    <name not found> = JetTypeImpl@1['NotMap<1>']
}

LazyJavaClassDescriptor@2['Exception'] {
    constructors = ArrayList@3[5] { JavaConstructorDescriptor@4['<init>'], JavaConstructorDescriptor@5['<init>'], JavaConstructorDescriptor@6['<init>'], ... } // through LazyJavaClassMemberScope@7
    defaultType = JetTypeImpl@8['Exception']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@9['Exception']
}

LazyJavaClassTypeConstructor@9['Exception'] {
    parameters = ArrayList@10[empty]
    supertypes = ArrayList@11[1] { LazyJavaClassifierType@12['Throwable'] }
}

LazyJavaClassifierType@13['String'] {
    arguments = ArrayList@14[empty]
    classifier = JavaClassImpl@15['String']
    nullable = 'false': Boolean@16
    typeConstructor = DeserializedClassTypeConstructor@17
}

LazyJavaClassifierType@18['String'] {
    arguments = ArrayList@19[empty]
    classifier = JavaClassImpl@20['String']
    nullable = 'false': Boolean@16
    typeConstructor = DeserializedClassTypeConstructor@17
}

LazyJavaClassifierType@21['String'] {
    arguments = ArrayList@22[empty]
    classifier = JavaClassImpl@23['String']
    nullable = 'false': Boolean@16
    typeConstructor = DeserializedClassTypeConstructor@17
}

LazyJavaClassifierType@24['String'] {
    arguments = ArrayList@25[empty]
    classifier = JavaClassImpl@20['String']
    nullable = 'true': Boolean@26
    typeConstructor = DeserializedClassTypeConstructor@17
}

LazyJavaClassifierType@27['String'] {
    arguments = ArrayList@28[empty]
    classifier = JavaClassImpl@23['String']
    nullable = 'true': Boolean@26
    typeConstructor = DeserializedClassTypeConstructor@17
}

LazyJavaClassifierType@29['String'] {
    arguments = ArrayList@30[empty]
    classifier = JavaClassImpl@15['String']
    nullable = 'true': Boolean@26
    typeConstructor = DeserializedClassTypeConstructor@17
}

LazyJavaClassifierType@31['Throwable'] {
    arguments = ArrayList@32[empty]
    classifier = JavaClassImpl@33['Throwable']
    nullable = 'false': Boolean@16
    typeConstructor = DeserializedClassTypeConstructor@34
}

LazyJavaClassifierType@35['Throwable'] {
    arguments = ArrayList@36[empty]
    classifier = JavaClassImpl@37['Throwable']
    nullable = 'false': Boolean@16
    typeConstructor = DeserializedClassTypeConstructor@34
}

LazyJavaClassifierType@38['Throwable'] {
    arguments = ArrayList@39[empty]
    classifier = JavaClassImpl@40['Throwable']
    nullable = 'false': Boolean@16
    typeConstructor = DeserializedClassTypeConstructor@34
}

LazyJavaClassifierType@41['Throwable'] {
    arguments = ArrayList@42[empty]
    classifier = JavaClassImpl@33['Throwable']
    nullable = 'true': Boolean@26
    typeConstructor = DeserializedClassTypeConstructor@34
}

LazyJavaClassifierType@43['Throwable'] {
    arguments = ArrayList@44[empty]
    classifier = JavaClassImpl@40['Throwable']
    nullable = 'true': Boolean@26
    typeConstructor = DeserializedClassTypeConstructor@34
}

LazyJavaClassifierType@45['Throwable'] {
    arguments = ArrayList@46[empty]
    classifier = JavaClassImpl@37['Throwable']
    nullable = 'true': Boolean@26
    typeConstructor = DeserializedClassTypeConstructor@34
}

LazyJavaClassifierType@12['Throwable'] {
    arguments = ArrayList@47[empty]
    classifier = JavaClassImpl@48['Throwable']
    typeConstructor = DeserializedClassTypeConstructor@34
}

LazyJavaPackageFragmentProvider@49 {
    packageFragments('<root>': FqName@50) = LazyJavaPackageFragment@51['<root>']
    packageFragments('B': FqName@52) = null
    packageFragments('C': FqName@53) = null
    packageFragments('Entry': FqName@54) = null
    packageFragments('NotMap': FqName@55) = null
    packageFragments('R': FqName@56) = null
    packageFragments('V': FqName@57) = null
    packageFragments('i': FqName@58) = null
    packageFragments('i.B': FqName@59) = null
    packageFragments('i.C': FqName@60) = null
    packageFragments('i.Entry': FqName@61) = null
    packageFragments('i.NotMap': FqName@62) = null
    packageFragments('i.R': FqName@63) = null
    packageFragments('i.V': FqName@64) = null
    packageFragments('java': FqName@65) = LazyJavaPackageFragment@66['java']
    packageFragments('java.lang': FqName@67) = LazyJavaPackageFragment@68['lang']
    packageFragments('java.lang.B': FqName@69) = null
    packageFragments('java.lang.C': FqName@70) = null
    packageFragments('java.lang.Entry': FqName@71) = null
    packageFragments('java.lang.NotMap': FqName@72) = null
    packageFragments('java.lang.R': FqName@73) = null
    packageFragments('java.lang.V': FqName@74) = null
    packageFragments('kotlin': FqName@75) = null
    packageFragments('kotlin.B': FqName@76) = null
    packageFragments('kotlin.C': FqName@77) = null
    packageFragments('kotlin.Entry': FqName@78) = null
    packageFragments('kotlin.NotMap': FqName@79) = null
    packageFragments('kotlin.R': FqName@80) = null
    packageFragments('kotlin.V': FqName@81) = null
    packageFragments('kotlin.io': FqName@82) = null
    packageFragments('kotlin.jvm': FqName@83) = null
    topLevelClasses(JavaClassImpl@84['Exception']) = LazyJavaClassDescriptor@2['Exception']
}

LazyJavaPackageFragment@66['java'] {
    classes('lang': Name@85) = null // through LazyPackageFragmentScopeForJavaPackage@86
    deserializedPackageScope = Empty@87 // through LazyPackageFragmentScopeForJavaPackage@86
    functions('lang': Name@88) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@86
    memberIndex = computeMemberIndex$1@90 // through LazyPackageFragmentScopeForJavaPackage@86
}

LazyJavaPackageFragment@68['lang'] {
    classes('Exception': Name@91) = LazyJavaClassDescriptor@2['Exception'] // through LazyPackageFragmentScopeForJavaPackage@92
    classes('f': Name@93) = null // through LazyPackageFragmentScopeForJavaPackage@92
    classes('mapValuesOriginal': Name@94) = null // through LazyPackageFragmentScopeForJavaPackage@92
    deserializedPackageScope = Empty@87 // through LazyPackageFragmentScopeForJavaPackage@92
    functions('Exception': Name@91) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@92
    functions('f': Name@93) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@92
    functions('mapValuesOriginal': Name@94) = EmptyList@89[empty] // through LazyPackageFragmentScopeForJavaPackage@92
    memberIndex = computeMemberIndex$1@95 // through LazyPackageFragmentScopeForJavaPackage@92
}

ResolutionTaskHolder@96 {
    <name not found> = ArrayList@97[1] { ResolutionCandidate@98 }
    <name not found> = ArrayList@99[1] { ResolutionCandidate@98 }
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
}

ResolutionTaskHolder@100 {
    <name not found> = ArrayList@101[1] { ResolutionCandidate@102 }
    <name not found> = ArrayList@103[1] { ResolutionCandidate@102 }
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
}

ResolutionTaskHolder@104 {
    <name not found> = ArrayList@105[1] { ResolutionCandidate@106 }
    <name not found> = ArrayList@107[1] { ResolutionCandidate@106 }
}

ResolutionTaskHolder@108 {
    <name not found> = ArrayList@109[1] { ResolutionCandidate@110 }
    <name not found> = ArrayList@111[1] { ResolutionCandidate@110 }
}

ResolutionTaskHolder@112 {
    <name not found> = ArrayList@113[1] { ResolutionCandidate@114 }
    <name not found> = ArrayList@115[1] { ResolutionCandidate@114 }
}

ResolutionTaskHolder@116 {
    <name not found> = ArrayList@117[4] { ResolutionCandidate@118, ResolutionCandidate@119, ResolutionCandidate@120, ... }
    <name not found> = ArrayList@121[5] { ResolutionCandidate@118, ResolutionCandidate@119, ResolutionCandidate@120, ... }
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
    <name not found> = EmptyList@89[empty]
}
