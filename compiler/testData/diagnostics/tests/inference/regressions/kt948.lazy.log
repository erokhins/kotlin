DescriptorResolver@0 {
    <name not found> = JetTypeImpl@1['List<1>']
}

LazyJavaClassDescriptor@2['AbstractCollection'] {
    typeConstructor = LazyJavaClassTypeConstructor@3['AbstractCollection']
}

LazyJavaClassDescriptor@4['AbstractList'] {
    typeConstructor = LazyJavaClassTypeConstructor@5['AbstractList']
}

LazyJavaClassDescriptor@6['ArrayList'] {
    constructors = ArrayList@7[3] { JavaConstructorDescriptor@8['<init>'], JavaConstructorDescriptor@9['<init>'], JavaConstructorDescriptor@10['<init>'] } // through LazyJavaClassMemberScope@11
    defaultType = JetTypeImpl@12['ArrayList<1>']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@13['ArrayList']
}

LazyJavaClassDescriptor@14['RandomAccess'] {
    typeConstructor = LazyJavaClassTypeConstructor@15['RandomAccess']
}

LazyJavaClassDescriptor@16['Serializable'] {
    typeConstructor = LazyJavaClassTypeConstructor@17['Serializable']
}

LazyJavaClassTypeConstructor@3['AbstractCollection'] {
    supertypes = ArrayList@18[1] { LazyJavaClassifierType@19['Collection<E>'] }
}

LazyJavaClassTypeConstructor@5['AbstractList'] {
    parameters = ArrayList@20[1] { LazyJavaTypeParameterDescriptor@21['E'] }
    supertypes = ArrayList@22[2] { LazyJavaClassifierType@23['AbstractCollection<E>'], LazyJavaClassifierType@24['List<E>'] }
}

LazyJavaClassTypeConstructor@13['ArrayList'] {
    parameters = ArrayList@25[1] { LazyJavaTypeParameterDescriptor@26['E'] }
    supertypes = ArrayList@27[5] { LazyJavaClassifierType@28['AbstractList<E>'], LazyJavaClassifierType@29['List<E>'], LazyJavaClassifierType@30['RandomAccess'], ... }
}

LazyJavaClassifierType@23['AbstractCollection<E>'] {
    classifier = JavaClassImpl@31['AbstractCollection']
    typeConstructor = LazyJavaClassTypeConstructor@3['AbstractCollection']
}

LazyJavaClassifierType@28['AbstractList<E>'] {
    arguments = ArrayList@32[1] { TypeProjectionImpl@33 }
    classifier = JavaClassImpl@34['AbstractList']
    typeConstructor = LazyJavaClassTypeConstructor@5['AbstractList']
}

LazyJavaClassifierType@35['Cloneable'] {
    classifier = JavaClassImpl@36['Cloneable']
    typeConstructor = DeserializedClassTypeConstructor@37
}

LazyJavaClassifierType@38['Collection<? extends E>'] {
    arguments = ArrayList@39[1] { TypeProjectionImpl@40 }
    classifier = JavaClassImpl@41['Collection']
    memberScope = SubstitutingScope@42
    nullable = 'false': Boolean@43
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@45['Collection<? extends E>'] {
    arguments = ArrayList@46[1] { TypeProjectionImpl@47 }
    classifier = JavaClassImpl@41['Collection']
    memberScope = SubstitutingScope@48
    nullable = 'true': Boolean@49
    typeConstructor = DeserializedClassTypeConstructor@50
}

LazyJavaClassifierType@19['Collection<E>'] {
    classifier = JavaClassImpl@51['Collection']
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@52['E'] {
    arguments = ArrayList@53[empty]
    classifier = JavaTypeParameterImpl@54['E']
    nullable = 'false': Boolean@43
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@55
}

LazyJavaClassifierType@56['E'] {
    arguments = ArrayList@57[empty]
    classifier = JavaTypeParameterImpl@58['E']
    nullable = 'false': Boolean@43
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@55
}

LazyJavaClassifierType@59['E'] {
    arguments = ArrayList@60[empty]
    classifier = JavaTypeParameterImpl@61['E']
    nullable = 'false': Boolean@43
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@55
}

LazyJavaClassifierType@62['E'] {
    arguments = ArrayList@63[empty]
    classifier = JavaTypeParameterImpl@64['E']
    nullable = 'false': Boolean@43
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@65
}

LazyJavaClassifierType@66['E'] {
    arguments = ArrayList@67[empty]
    classifier = JavaTypeParameterImpl@58['E']
    nullable = 'true': Boolean@49
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@55
}

LazyJavaClassifierType@68['E'] {
    arguments = ArrayList@69[empty]
    classifier = JavaTypeParameterImpl@64['E']
    nullable = 'true': Boolean@49
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@65
}

LazyJavaClassifierType@70['E'] {
    arguments = ArrayList@71[empty]
    classifier = JavaTypeParameterImpl@61['E']
    nullable = 'true': Boolean@49
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@55
}

LazyJavaClassifierType@72['E'] {
    arguments = ArrayList@73[empty]
    classifier = JavaTypeParameterImpl@54['E']
    nullable = 'true': Boolean@49
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@55
}

LazyJavaClassifierType@24['List<E>'] {
    arguments = ArrayList@74[1] { TypeProjectionImpl@75 }
    classifier = JavaClassImpl@76['List']
    typeConstructor = DeserializedClassTypeConstructor@77
}

LazyJavaClassifierType@29['List<E>'] {
    classifier = JavaClassImpl@78['List']
    typeConstructor = DeserializedClassTypeConstructor@77
}

LazyJavaClassifierType@79['Object'] {
    classifier = JavaClassImpl@80['Object']
    typeConstructor = DeserializedClassTypeConstructor@81
}

LazyJavaClassifierType@30['RandomAccess'] {
    classifier = JavaClassImpl@82['RandomAccess']
    typeConstructor = LazyJavaClassTypeConstructor@15['RandomAccess']
}

LazyJavaClassifierType@83['Serializable'] {
    classifier = JavaClassImpl@84['Serializable']
    typeConstructor = LazyJavaClassTypeConstructor@17['Serializable']
}

LazyJavaPackageFragmentProvider@85 {
    packageFragments('<root>': FqName@86) = LazyJavaPackageFragment@87['<root>']
    packageFragments('Int': FqName@88) = null
    packageFragments('List': FqName@89) = null
    packageFragments('T': FqName@90) = null
    packageFragments('a': FqName@91) = null
    packageFragments('a.Int': FqName@92) = null
    packageFragments('a.List': FqName@93) = null
    packageFragments('a.T': FqName@94) = null
    packageFragments('java': FqName@95) = LazyJavaPackageFragment@96['java']
    packageFragments('java.io': FqName@97) = LazyJavaPackageFragment@98['io']
    packageFragments('java.lang': FqName@99) = LazyJavaPackageFragment@100['lang']
    packageFragments('java.lang.Int': FqName@101) = null
    packageFragments('java.lang.List': FqName@102) = null
    packageFragments('java.lang.T': FqName@103) = null
    packageFragments('java.util': FqName@104) = LazyJavaPackageFragment@105['util']
    packageFragments('java.util.Int': FqName@106) = null
    packageFragments('java.util.List': FqName@107) = null
    packageFragments('java.util.T': FqName@108) = null
    packageFragments('kotlin': FqName@109) = null
    packageFragments('kotlin.Int': FqName@110) = null
    packageFragments('kotlin.List': FqName@111) = null
    packageFragments('kotlin.T': FqName@112) = null
    packageFragments('kotlin.io': FqName@113) = null
    packageFragments('kotlin.jvm': FqName@114) = null
    topLevelClasses(JavaClassImpl@31['AbstractCollection']) = LazyJavaClassDescriptor@2['AbstractCollection']
    topLevelClasses(JavaClassImpl@34['AbstractList']) = LazyJavaClassDescriptor@4['AbstractList']
    topLevelClasses(JavaClassImpl@115['ArrayList']) = LazyJavaClassDescriptor@6['ArrayList']
    topLevelClasses(JavaClassImpl@116['List']) = LazyJavaClassDescriptor@117['List']
    topLevelClasses(JavaClassImpl@82['RandomAccess']) = LazyJavaClassDescriptor@14['RandomAccess']
    topLevelClasses(JavaClassImpl@84['Serializable']) = LazyJavaClassDescriptor@16['Serializable']
}

LazyJavaPackageFragment@96['java'] {
    classes('lang': Name@118) = null // through LazyPackageFragmentScopeForJavaPackage@119
    classes('util': Name@120) = null // through LazyPackageFragmentScopeForJavaPackage@119
    deserializedPackageScope = Empty@121 // through LazyPackageFragmentScopeForJavaPackage@119
    functions('lang': Name@122) = EmptyList@123[empty] // through LazyPackageFragmentScopeForJavaPackage@119
    functions('util': Name@124) = EmptyList@123[empty] // through LazyPackageFragmentScopeForJavaPackage@119
    memberIndex = computeMemberIndex$1@125 // through LazyPackageFragmentScopeForJavaPackage@119
}

LazyJavaPackageFragment@100['lang'] {
    classes('ArrayList': Name@126) = null // through LazyPackageFragmentScopeForJavaPackage@127
    classes('doWithList': Name@128) = null // through LazyPackageFragmentScopeForJavaPackage@127
    classes('emptyList': Name@129) = null // through LazyPackageFragmentScopeForJavaPackage@127
    deserializedPackageScope = Empty@121 // through LazyPackageFragmentScopeForJavaPackage@127
    functions('ArrayList': Name@126) = EmptyList@123[empty] // through LazyPackageFragmentScopeForJavaPackage@127
    functions('doWithList': Name@128) = EmptyList@123[empty] // through LazyPackageFragmentScopeForJavaPackage@127
    functions('emptyList': Name@129) = EmptyList@123[empty] // through LazyPackageFragmentScopeForJavaPackage@127
    memberIndex = computeMemberIndex$1@130 // through LazyPackageFragmentScopeForJavaPackage@127
}

LazyJavaPackageFragment@105['util'] {
    classes('ArrayList': Name@126) = LazyJavaClassDescriptor@6['ArrayList'] // through LazyPackageFragmentScopeForJavaPackage@131
    classes('Int': Name@132) = null // through LazyPackageFragmentScopeForJavaPackage@131
    classes('List': Name@133) = LazyJavaClassDescriptor@117['List'] // through LazyPackageFragmentScopeForJavaPackage@131
    classes('doWithList': Name@128) = null // through LazyPackageFragmentScopeForJavaPackage@131
    classes('emptyList': Name@129) = null // through LazyPackageFragmentScopeForJavaPackage@131
    deserializedPackageScope = Empty@121 // through LazyPackageFragmentScopeForJavaPackage@131
    functions('ArrayList': Name@126) = EmptyList@123[empty] // through LazyPackageFragmentScopeForJavaPackage@131
    functions('doWithList': Name@128) = EmptyList@123[empty] // through LazyPackageFragmentScopeForJavaPackage@131
    functions('emptyList': Name@129) = EmptyList@123[empty] // through LazyPackageFragmentScopeForJavaPackage@131
    memberIndex = computeMemberIndex$1@134 // through LazyPackageFragmentScopeForJavaPackage@131
}

LazyJavaTypeParameterDescriptor@26['E'] {
    defaultType = JetTypeImpl@135['E']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@55
    upperBounds = LinkedHashSet@136[1] { NullableType@137 }
}

LazyJavaTypeParameterDescriptor@21['E'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@65
}

LazyJavaTypeParameterResolver@138 {
    resolve(JavaTypeParameterImpl@139['E']) = LazyJavaTypeParameterDescriptor@26['E']
}

LazyJavaTypeParameterResolver@140 {
    resolve(JavaTypeParameterImpl@64['E']) = LazyJavaTypeParameterDescriptor@21['E']
}

ResolutionTaskHolder@141 {
    <name not found> = ArrayList@142[1] { ResolutionCandidate@143 }
    <name not found> = ArrayList@144[1] { ResolutionCandidate@143 }
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
}

ResolutionTaskHolder@145 {
    <name not found> = ArrayList@146[1] { ResolutionCandidate@147 }
    <name not found> = ArrayList@148[1] { ResolutionCandidate@147 }
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
}

ResolutionTaskHolder@149 {
    <name not found> = ArrayList@150[1] { ResolutionCandidate@151 }
    <name not found> = ArrayList@152[1] { ResolutionCandidate@151 }
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
}

ResolutionTaskHolder@153 {
    <name not found> = ArrayList@154[1] { ResolutionCandidate@155 }
    <name not found> = ArrayList@156[1] { ResolutionCandidate@155 }
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
}

ResolutionTaskHolder@157 {
    <name not found> = ArrayList@158[1] { ResolutionCandidate@159 }
    <name not found> = ArrayList@160[1] { ResolutionCandidate@159 }
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
}

ResolutionTaskHolder@161 {
    <name not found> = ArrayList@162[1] { ResolutionCandidate@163 }
    <name not found> = ArrayList@164[1] { ResolutionCandidate@163 }
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
}

ResolutionTaskHolder@165 {
    <name not found> = ArrayList@166[1] { ResolutionCandidate@167 }
    <name not found> = ArrayList@168[1] { ResolutionCandidate@167 }
}

ResolutionTaskHolder@169 {
    <name not found> = ArrayList@170[1] { ResolutionCandidate@171 }
    <name not found> = ArrayList@172[1] { ResolutionCandidate@171 }
}

ResolutionTaskHolder@173 {
    <name not found> = ArrayList@174[1] { ResolutionCandidate@175 }
    <name not found> = ArrayList@176[1] { ResolutionCandidate@175 }
}

ResolutionTaskHolder@177 {
    <name not found> = ArrayList@178[1] { ResolutionCandidate@179 }
    <name not found> = ArrayList@180[1] { ResolutionCandidate@179 }
}

ResolutionTaskHolder@181 {
    <name not found> = ArrayList@182[1] { ResolutionCandidate@183 }
    <name not found> = ArrayList@184[1] { ResolutionCandidate@183 }
}

ResolutionTaskHolder@185 {
    <name not found> = ArrayList@186[3] { ResolutionCandidate@187, ResolutionCandidate@188, ResolutionCandidate@189 }
    <name not found> = ArrayList@190[3] { ResolutionCandidate@187, ResolutionCandidate@188, ResolutionCandidate@189 }
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
    <name not found> = EmptyList@123[empty]
}
