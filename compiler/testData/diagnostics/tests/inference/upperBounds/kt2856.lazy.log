LazyAnnotationDescriptor@0 {
    resolutionResults = OverloadResolutionResultsImpl@1
    type = JetTypeImpl@2['inline']
    valueArguments(ValueParameterDescriptorImpl@3['strategy']) = null
}

LazyJavaClassDescriptor@4['AbstractMap'] {
    functions('getOrElse1': Name@5) = EmptyList@6[empty] // through LazyJavaClassMemberScope@7
    memberIndex = computeMemberIndex$1@8 // through LazyJavaClassMemberScope@7
    properties('getOrElse1': Name@5) = EmptyList@6[empty] // through LazyJavaClassMemberScope@7
    typeConstructor = LazyJavaClassTypeConstructor@9['AbstractMap']
}

LazyJavaClassDescriptor@10['HashMap'] {
    constructors = ArrayList@11[4] { JavaConstructorDescriptor@12['<init>'], JavaConstructorDescriptor@13['<init>'], JavaConstructorDescriptor@14['<init>'], ... } // through LazyJavaClassMemberScope@15
    defaultType = JetTypeImpl@16['HashMap<2>']
    enumEntryIndex = LinkedHashMap@17 // through LazyJavaClassMemberScope@15
    functionTypeForSamInterface = null
    functions('getOrElse1': Name@5) = EmptyList@6[empty] // through LazyJavaClassMemberScope@15
    memberIndex = computeMemberIndex$1@18 // through LazyJavaClassMemberScope@15
    nestedClassIndex = LinkedHashMap@19 // through LazyJavaClassMemberScope@15
    nestedClasses('getOrElse1': Name@5) = null // through LazyJavaClassMemberScope@15
    properties('getOrElse1': Name@5) = EmptyList@6[empty] // through LazyJavaClassMemberScope@15
    typeConstructor = LazyJavaClassTypeConstructor@20['HashMap']
}

LazyJavaClassDescriptor@21['Serializable'] {
    functions('getOrElse1': Name@5) = EmptyList@6[empty] // through LazyJavaClassMemberScope@22
    memberIndex = computeMemberIndex$1@23 // through LazyJavaClassMemberScope@22
    properties('getOrElse1': Name@5) = EmptyList@6[empty] // through LazyJavaClassMemberScope@22
    typeConstructor = LazyJavaClassTypeConstructor@24['Serializable']
}

LazyJavaClassTypeConstructor@9['AbstractMap'] {
    parameters = ArrayList@25[2] { LazyJavaTypeParameterDescriptor@26['K'], LazyJavaTypeParameterDescriptor@27['V'] }
    supertypes = ArrayList@28[1] { LazyJavaClassifierType@29['Map<K, V>'] }
}

LazyJavaClassTypeConstructor@20['HashMap'] {
    parameters = ArrayList@30[2] { LazyJavaTypeParameterDescriptor@31['K'], LazyJavaTypeParameterDescriptor@32['V'] }
    supertypes = ArrayList@33[4] { LazyJavaClassifierType@34['AbstractMap<K, V>'], LazyJavaClassifierType@35['Map<K, V>'], LazyJavaClassifierType@36['Cloneable'], ... }
}

LazyJavaClassTypeConstructor@24['Serializable'] {
    parameters = ArrayList@37[empty]
    supertypes = ArrayList@38[1] { JetTypeImpl@39['Any'] }
}

LazyJavaClassifierType@34['AbstractMap<K, V>'] {
    arguments = ArrayList@40[2] { TypeProjectionImpl@41, TypeProjectionImpl@42 }
    classifier = JavaClassImpl@43['AbstractMap']
    memberScope = SubstitutingScope@44
    typeConstructor = LazyJavaClassTypeConstructor@9['AbstractMap']
}

LazyJavaClassifierType@36['Cloneable'] {
    arguments = ArrayList@45[empty]
    classifier = JavaClassImpl@46['Cloneable']
    memberScope = DeserializedClassMemberScope@47
    typeConstructor = DeserializedClassTypeConstructor@48
}

LazyJavaClassifierType@49['K'] {
    arguments = ArrayList@50[empty]
    classifier = JavaTypeParameterImpl@51['K']
    nullable = 'false': Boolean@52
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@54['K'] {
    arguments = ArrayList@55[empty]
    classifier = JavaTypeParameterImpl@56['K']
    nullable = 'false': Boolean@52
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@57['K'] {
    arguments = ArrayList@58[empty]
    classifier = JavaTypeParameterImpl@59['K']
    nullable = 'false': Boolean@52
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@60['K'] {
    arguments = ArrayList@61[empty]
    classifier = JavaTypeParameterImpl@62['K']
    nullable = 'false': Boolean@52
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@63
}

LazyJavaClassifierType@64['K'] {
    arguments = ArrayList@65[empty]
    classifier = JavaTypeParameterImpl@66['K']
    nullable = 'false': Boolean@52
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@67['K'] {
    arguments = ArrayList@68[empty]
    classifier = JavaTypeParameterImpl@62['K']
    nullable = 'true': Boolean@69
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@63
}

LazyJavaClassifierType@70['K'] {
    arguments = ArrayList@71[empty]
    classifier = JavaTypeParameterImpl@51['K']
    nullable = 'true': Boolean@69
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@72['K'] {
    arguments = ArrayList@73[empty]
    classifier = JavaTypeParameterImpl@59['K']
    nullable = 'true': Boolean@69
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@74['K'] {
    arguments = ArrayList@75[empty]
    classifier = JavaTypeParameterImpl@66['K']
    nullable = 'true': Boolean@69
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@76['K'] {
    arguments = ArrayList@77[empty]
    classifier = JavaTypeParameterImpl@56['K']
    nullable = 'true': Boolean@69
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@78['Map<? extends K, ? extends V>'] {
    arguments = ArrayList@79[2] { TypeProjectionImpl@80, TypeProjectionImpl@81 }
    classifier = JavaClassImpl@82['Map']
    memberScope = SubstitutingScope@83
    nullable = 'false': Boolean@52
    typeConstructor = DeserializedClassTypeConstructor@84
}

LazyJavaClassifierType@85['Map<? extends K, ? extends V>'] {
    arguments = ArrayList@86[2] { TypeProjectionImpl@87, TypeProjectionImpl@88 }
    classifier = JavaClassImpl@82['Map']
    memberScope = SubstitutingScope@89
    nullable = 'true': Boolean@69
    typeConstructor = DeserializedClassTypeConstructor@90
}

LazyJavaClassifierType@29['Map<K, V>'] {
    arguments = ArrayList@91[2] { TypeProjectionImpl@92, TypeProjectionImpl@93 }
    classifier = JavaClassImpl@94['Map']
    memberScope = SubstitutingScope@95
    typeConstructor = DeserializedClassTypeConstructor@84
}

LazyJavaClassifierType@35['Map<K, V>'] {
    arguments = ArrayList@96[2] { TypeProjectionImpl@97, TypeProjectionImpl@98 }
    classifier = JavaClassImpl@99['Map']
    memberScope = SubstitutingScope@100
    typeConstructor = DeserializedClassTypeConstructor@84
}

LazyJavaClassifierType@101['Object'] {
    classifier = JavaClassImpl@102['Object']
    typeConstructor = DeserializedClassTypeConstructor@103
}

LazyJavaClassifierType@104['Object'] {
    classifier = JavaClassImpl@105['Object']
    typeConstructor = DeserializedClassTypeConstructor@103
}

LazyJavaClassifierType@106['Serializable'] {
    arguments = ArrayList@107[empty]
    classifier = JavaClassImpl@108['Serializable']
    memberScope = LazyJavaClassMemberScope@22
    typeConstructor = LazyJavaClassTypeConstructor@24['Serializable']
}

LazyJavaClassifierType@109['V'] {
    arguments = ArrayList@110[empty]
    classifier = JavaTypeParameterImpl@111['V']
    nullable = 'false': Boolean@52
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@112
}

LazyJavaClassifierType@113['V'] {
    arguments = ArrayList@114[empty]
    classifier = JavaTypeParameterImpl@115['V']
    nullable = 'false': Boolean@52
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@116
}

LazyJavaClassifierType@117['V'] {
    arguments = ArrayList@118[empty]
    classifier = JavaTypeParameterImpl@119['V']
    nullable = 'false': Boolean@52
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@116
}

LazyJavaClassifierType@120['V'] {
    arguments = ArrayList@121[empty]
    classifier = JavaTypeParameterImpl@122['V']
    nullable = 'false': Boolean@52
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@116
}

LazyJavaClassifierType@123['V'] {
    arguments = ArrayList@124[empty]
    classifier = JavaTypeParameterImpl@125['V']
    nullable = 'false': Boolean@52
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@116
}

LazyJavaClassifierType@126['V'] {
    arguments = ArrayList@127[empty]
    classifier = JavaTypeParameterImpl@115['V']
    nullable = 'true': Boolean@69
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@116
}

LazyJavaClassifierType@128['V'] {
    arguments = ArrayList@129[empty]
    classifier = JavaTypeParameterImpl@111['V']
    nullable = 'true': Boolean@69
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@112
}

LazyJavaClassifierType@130['V'] {
    arguments = ArrayList@131[empty]
    classifier = JavaTypeParameterImpl@119['V']
    nullable = 'true': Boolean@69
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@116
}

LazyJavaClassifierType@132['V'] {
    arguments = ArrayList@133[empty]
    classifier = JavaTypeParameterImpl@122['V']
    nullable = 'true': Boolean@69
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@116
}

LazyJavaClassifierType@134['V'] {
    arguments = ArrayList@135[empty]
    classifier = JavaTypeParameterImpl@125['V']
    nullable = 'true': Boolean@69
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@116
}

LazyJavaPackageFragmentProvider@136 {
    packageFragments('<root>': FqName@137) = LazyJavaPackageFragment@138['<root>']
    packageFragments('Any': FqName@139) = null
    packageFragments('Array': FqName@140) = null
    packageFragments('Int': FqName@141) = null
    packageFragments('K': FqName@142) = null
    packageFragments('Map': FqName@143) = null
    packageFragments('String': FqName@144) = null
    packageFragments('V': FqName@145) = null
    packageFragments('V1': FqName@146) = null
    packageFragments('d': FqName@147) = null
    packageFragments('d.Any': FqName@148) = null
    packageFragments('d.Array': FqName@149) = null
    packageFragments('d.Int': FqName@150) = null
    packageFragments('d.K': FqName@151) = null
    packageFragments('d.Map': FqName@152) = null
    packageFragments('d.String': FqName@153) = null
    packageFragments('d.V': FqName@154) = null
    packageFragments('d.V1': FqName@155) = null
    packageFragments('d.inline': FqName@156) = null
    packageFragments('inline': FqName@157) = null
    packageFragments('java': FqName@158) = LazyJavaPackageFragment@159['java']
    packageFragments('java.io': FqName@160) = LazyJavaPackageFragment@161['io']
    packageFragments('java.lang': FqName@162) = LazyJavaPackageFragment@163['lang']
    packageFragments('java.lang.Any': FqName@164) = null
    packageFragments('java.lang.Array': FqName@165) = null
    packageFragments('java.lang.Int': FqName@166) = null
    packageFragments('java.lang.K': FqName@167) = null
    packageFragments('java.lang.Map': FqName@168) = null
    packageFragments('java.lang.String': FqName@169) = null
    packageFragments('java.lang.V': FqName@170) = null
    packageFragments('java.lang.V1': FqName@171) = null
    packageFragments('java.lang.inline': FqName@172) = null
    packageFragments('java.util': FqName@173) = LazyJavaPackageFragment@174['util']
    packageFragments('java.util.HashMap': FqName@175) = null
    packageFragments('kotlin': FqName@176) = null
    packageFragments('kotlin.Any': FqName@177) = null
    packageFragments('kotlin.Array': FqName@178) = null
    packageFragments('kotlin.Int': FqName@179) = null
    packageFragments('kotlin.K': FqName@180) = null
    packageFragments('kotlin.Map': FqName@181) = null
    packageFragments('kotlin.String': FqName@182) = null
    packageFragments('kotlin.V': FqName@183) = null
    packageFragments('kotlin.V1': FqName@184) = null
    packageFragments('kotlin.inline': FqName@185) = null
    packageFragments('kotlin.io': FqName@186) = null
    packageFragments('kotlin.jvm': FqName@187) = null
    topLevelClasses(JavaClassImpl@43['AbstractMap']) = LazyJavaClassDescriptor@4['AbstractMap']
    topLevelClasses(JavaClassImpl@188['HashMap']) = LazyJavaClassDescriptor@10['HashMap']
    topLevelClasses(JavaClassImpl@108['Serializable']) = LazyJavaClassDescriptor@21['Serializable']
}

LazyJavaPackageFragment@159['java'] {
    classes('lang': Name@189) = null // through LazyPackageFragmentScopeForJavaPackage@190
    classes('util': Name@191) = null // through LazyPackageFragmentScopeForJavaPackage@190
    deserializedPackageScope = Empty@192 // through LazyPackageFragmentScopeForJavaPackage@190
    functions('lang': Name@193) = EmptyList@6[empty] // through LazyPackageFragmentScopeForJavaPackage@190
    functions('util': Name@194) = EmptyList@6[empty] // through LazyPackageFragmentScopeForJavaPackage@190
    memberIndex = computeMemberIndex$1@195 // through LazyPackageFragmentScopeForJavaPackage@190
}

LazyJavaPackageFragment@163['lang'] {
    classes('HashMap': Name@196) = null // through LazyPackageFragmentScopeForJavaPackage@197
    classes('defaultValue': Name@198) = null // through LazyPackageFragmentScopeForJavaPackage@197
    classes('getOrElse1': Name@5) = null // through LazyPackageFragmentScopeForJavaPackage@197
    classes('println': Name@199) = null // through LazyPackageFragmentScopeForJavaPackage@197
    deserializedPackageScope = Empty@192 // through LazyPackageFragmentScopeForJavaPackage@197
    functions('HashMap': Name@196) = EmptyList@6[empty] // through LazyPackageFragmentScopeForJavaPackage@197
    functions('defaultValue': Name@198) = EmptyList@6[empty] // through LazyPackageFragmentScopeForJavaPackage@197
    functions('getOrElse1': Name@5) = EmptyList@6[empty] // through LazyPackageFragmentScopeForJavaPackage@197
    functions('println': Name@199) = EmptyList@6[empty] // through LazyPackageFragmentScopeForJavaPackage@197
    memberIndex = computeMemberIndex$1@200 // through LazyPackageFragmentScopeForJavaPackage@197
}

LazyJavaPackageFragment@174['util'] {
    classes('HashMap': Name@201) = LazyJavaClassDescriptor@10['HashMap'] // through LazyPackageFragmentScopeForJavaPackage@202
    deserializedPackageScope = Empty@192 // through LazyPackageFragmentScopeForJavaPackage@202
    functions('HashMap': Name@203) = EmptyList@6[empty] // through LazyPackageFragmentScopeForJavaPackage@202
    memberIndex = computeMemberIndex$1@204 // through LazyPackageFragmentScopeForJavaPackage@202
}

LazyJavaTypeParameterDescriptor@31['K'] {
    defaultType = JetTypeImpl@205['K']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
    upperBounds = LinkedHashSet@206[1] { NullableType@207 }
}

LazyJavaTypeParameterDescriptor@26['K'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@63
}

LazyJavaTypeParameterDescriptor@32['V'] {
    defaultType = JetTypeImpl@208['V']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@116
    upperBounds = LinkedHashSet@209[1] { NullableType@210 }
}

LazyJavaTypeParameterDescriptor@27['V'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@112
}

LazyJavaTypeParameterResolver@211 {
    resolve(JavaTypeParameterImpl@212['K']) = LazyJavaTypeParameterDescriptor@26['K']
    resolve(JavaTypeParameterImpl@213['V']) = LazyJavaTypeParameterDescriptor@27['V']
}

LazyJavaTypeParameterResolver@214 {
    resolve(JavaTypeParameterImpl@215['K']) = LazyJavaTypeParameterDescriptor@31['K']
    resolve(JavaTypeParameterImpl@216['V']) = LazyJavaTypeParameterDescriptor@32['V']
}

ResolutionTaskHolder@217 {
    <name not found> = ArrayList@218[1] { ResolutionCandidate@219 }
    <name not found> = ArrayList@220[1] { ResolutionCandidate@219 }
    <name not found> = EmptyList@6[empty]
    <name not found> = EmptyList@6[empty]
    <name not found> = EmptyList@6[empty]
    <name not found> = EmptyList@6[empty]
}

ResolutionTaskHolder@221 {
    <name not found> = ArrayList@222[1] { ResolutionCandidate@223 }
    <name not found> = ArrayList@224[1] { ResolutionCandidate@223 }
    <name not found> = EmptyList@6[empty]
    <name not found> = EmptyList@6[empty]
    <name not found> = EmptyList@6[empty]
    <name not found> = EmptyList@6[empty]
}

ResolutionTaskHolder@225 {
    <name not found> = ArrayList@226[1] { ResolutionCandidate@227 }
    <name not found> = ArrayList@228[1] { ResolutionCandidate@227 }
    <name not found> = EmptyList@6[empty]
    <name not found> = EmptyList@6[empty]
}

ResolutionTaskHolder@229 {
    <name not found> = ArrayList@230[1] { ResolutionCandidate@231 }
    <name not found> = ArrayList@232[1] { ResolutionCandidate@231 }
}

ResolutionTaskHolder@233 {
    <name not found> = ArrayList@234[1] { ResolutionCandidate@235 }
    <name not found> = ArrayList@236[1] { ResolutionCandidate@235 }
}

ResolutionTaskHolder@237 {
    <name not found> = ArrayList@238[1] { ResolutionCandidate@239 }
    <name not found> = ArrayList@240[1] { ResolutionCandidate@239 }
}

ResolutionTaskHolder@241 {
    <name not found> = ArrayList@242[1] { ResolutionCandidate@243 }
    <name not found> = ArrayList@244[1] { ResolutionCandidate@243 }
}

ResolutionTaskHolder@245 {
    <name not found> = ArrayList@246[1] { ResolutionCandidate@247 }
    <name not found> = ArrayList@248[1] { ResolutionCandidate@247 }
}

ResolutionTaskHolder@249 {
    <name not found> = ArrayList@250[1] { ResolutionCandidate@251 }
    <name not found> = ArrayList@252[1] { ResolutionCandidate@251 }
}

ResolutionTaskHolder@253 {
    <name not found> = ArrayList@254[1] { ResolutionCandidate@255 }
    <name not found> = ArrayList@256[1] { ResolutionCandidate@255 }
}

ResolutionTaskHolder@257 {
    <name not found> = ArrayList@258[1] { ResolutionCandidate@259 }
    <name not found> = ArrayList@260[1] { ResolutionCandidate@259 }
}

ResolutionTaskHolder@261 {
    <name not found> = ArrayList@262[4] { ResolutionCandidate@263, ResolutionCandidate@264, ResolutionCandidate@265, ... }
    <name not found> = ArrayList@266[4] { ResolutionCandidate@263, ResolutionCandidate@264, ResolutionCandidate@265, ... }
    <name not found> = EmptyList@6[empty]
    <name not found> = EmptyList@6[empty]
    <name not found> = EmptyList@6[empty]
    <name not found> = EmptyList@6[empty]
}
