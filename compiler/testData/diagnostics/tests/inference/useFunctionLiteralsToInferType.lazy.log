DescriptorResolver@0 {
    <name not found> = JetTypeImpl@1['Property<1>']
    <name not found> = JetTypeImpl@2['Property<1>']
}

LazyJavaClassDescriptor@3['AbstractCollection'] {
    typeConstructor = LazyJavaClassTypeConstructor@4['AbstractCollection']
}

LazyJavaClassDescriptor@5['AbstractSet'] {
    typeConstructor = LazyJavaClassTypeConstructor@6['AbstractSet']
}

LazyJavaClassDescriptor@7['Exception'] {
    constructors = ArrayList@8[5] { JavaConstructorDescriptor@9['<init>'], JavaConstructorDescriptor@10['<init>'], JavaConstructorDescriptor@11['<init>'], ... } // through LazyJavaClassMemberScope@12
    defaultType = JetTypeImpl@13['Exception']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@14['Exception']
}

LazyJavaClassDescriptor@15['HashSet'] {
    constructors = ArrayList@16[5] { JavaConstructorDescriptor@17['<init>'], JavaConstructorDescriptor@18['<init>'], JavaConstructorDescriptor@19['<init>'], ... } // through LazyJavaClassMemberScope@20
    defaultType = JetTypeImpl@21['HashSet<1>']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@22['HashSet']
}

LazyJavaClassDescriptor@23['Serializable'] {
    typeConstructor = LazyJavaClassTypeConstructor@24['Serializable']
}

LazyJavaClassTypeConstructor@4['AbstractCollection'] {
    parameters = ArrayList@25[1] { LazyJavaTypeParameterDescriptor@26['E'] }
    supertypes = ArrayList@27[1] { LazyJavaClassifierType@28['Collection<E>'] }
}

LazyJavaClassTypeConstructor@6['AbstractSet'] {
    parameters = ArrayList@29[1] { LazyJavaTypeParameterDescriptor@30['E'] }
    supertypes = ArrayList@31[2] { LazyJavaClassifierType@32['AbstractCollection<E>'], LazyJavaClassifierType@33['Set<E>'] }
}

LazyJavaClassTypeConstructor@14['Exception'] {
    parameters = ArrayList@34[empty]
    supertypes = ArrayList@35[1] { LazyJavaClassifierType@36['Throwable'] }
}

LazyJavaClassTypeConstructor@22['HashSet'] {
    parameters = ArrayList@37[1] { LazyJavaTypeParameterDescriptor@38['E'] }
    supertypes = ArrayList@39[4] { LazyJavaClassifierType@40['AbstractSet<E>'], LazyJavaClassifierType@41['Set<E>'], LazyJavaClassifierType@42['Cloneable'], ... }
}

LazyJavaClassTypeConstructor@24['Serializable'] {
    supertypes = ArrayList@43[1] { JetTypeImpl@44['Any'] }
}

LazyJavaClassifierType@32['AbstractCollection<E>'] {
    arguments = ArrayList@45[1] { TypeProjectionImpl@46 }
    classifier = JavaClassImpl@47['AbstractCollection']
    typeConstructor = LazyJavaClassTypeConstructor@4['AbstractCollection']
}

LazyJavaClassifierType@40['AbstractSet<E>'] {
    arguments = ArrayList@48[1] { TypeProjectionImpl@49 }
    classifier = JavaClassImpl@50['AbstractSet']
    typeConstructor = LazyJavaClassTypeConstructor@6['AbstractSet']
}

LazyJavaClassifierType@42['Cloneable'] {
    classifier = JavaClassImpl@51['Cloneable']
    typeConstructor = DeserializedClassTypeConstructor@52
}

LazyJavaClassifierType@53['Collection<? extends E>'] {
    arguments = ArrayList@54[1] { TypeProjectionImpl@55 }
    classifier = JavaClassImpl@56['Collection']
    memberScope = SubstitutingScope@57
    nullable = 'false': Boolean@58
    typeConstructor = DeserializedClassTypeConstructor@59
}

LazyJavaClassifierType@60['Collection<? extends E>'] {
    arguments = ArrayList@61[1] { TypeProjectionImpl@62 }
    classifier = JavaClassImpl@56['Collection']
    memberScope = SubstitutingScope@63
    nullable = 'true': Boolean@64
    typeConstructor = DeserializedClassTypeConstructor@65
}

LazyJavaClassifierType@28['Collection<E>'] {
    arguments = ArrayList@66[1] { TypeProjectionImpl@67 }
    classifier = JavaClassImpl@68['Collection']
    typeConstructor = DeserializedClassTypeConstructor@59
}

LazyJavaClassifierType@69['E'] {
    arguments = ArrayList@70[empty]
    classifier = JavaTypeParameterImpl@71['E']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@72
}

LazyJavaClassifierType@73['E'] {
    arguments = ArrayList@74[empty]
    classifier = JavaTypeParameterImpl@75['E']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@72
}

LazyJavaClassifierType@76['E'] {
    arguments = ArrayList@77[empty]
    classifier = JavaTypeParameterImpl@78['E']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@72
}

LazyJavaClassifierType@79['E'] {
    arguments = ArrayList@80[empty]
    classifier = JavaTypeParameterImpl@81['E']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@82
}

LazyJavaClassifierType@83['E'] {
    arguments = ArrayList@84[empty]
    classifier = JavaTypeParameterImpl@85['E']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@86
}

LazyJavaClassifierType@87['E'] {
    arguments = ArrayList@88[empty]
    classifier = JavaTypeParameterImpl@89['E']
    nullable = 'false': Boolean@58
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@82
}

LazyJavaClassifierType@90['E'] {
    arguments = ArrayList@91[empty]
    classifier = JavaTypeParameterImpl@78['E']
    nullable = 'true': Boolean@64
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@72
}

LazyJavaClassifierType@92['E'] {
    arguments = ArrayList@93[empty]
    classifier = JavaTypeParameterImpl@85['E']
    nullable = 'true': Boolean@64
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@86
}

LazyJavaClassifierType@94['E'] {
    arguments = ArrayList@95[empty]
    classifier = JavaTypeParameterImpl@89['E']
    nullable = 'true': Boolean@64
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@82
}

LazyJavaClassifierType@96['E'] {
    arguments = ArrayList@97[empty]
    classifier = JavaTypeParameterImpl@81['E']
    nullable = 'true': Boolean@64
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@82
}

LazyJavaClassifierType@98['E'] {
    arguments = ArrayList@99[empty]
    classifier = JavaTypeParameterImpl@71['E']
    nullable = 'true': Boolean@64
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@72
}

LazyJavaClassifierType@100['E'] {
    arguments = ArrayList@101[empty]
    classifier = JavaTypeParameterImpl@75['E']
    nullable = 'true': Boolean@64
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@72
}

LazyJavaClassifierType@102['Object'] {
    classifier = JavaClassImpl@103['Object']
    typeConstructor = DeserializedClassTypeConstructor@104
}

LazyJavaClassifierType@105['Object'] {
    classifier = JavaClassImpl@106['Object']
    typeConstructor = DeserializedClassTypeConstructor@104
}

LazyJavaClassifierType@107['Serializable'] {
    classifier = JavaClassImpl@108['Serializable']
    typeConstructor = LazyJavaClassTypeConstructor@24['Serializable']
}

LazyJavaClassifierType@33['Set<E>'] {
    arguments = ArrayList@109[1] { TypeProjectionImpl@110 }
    classifier = JavaClassImpl@111['Set']
    typeConstructor = DeserializedClassTypeConstructor@112
}

LazyJavaClassifierType@41['Set<E>'] {
    classifier = JavaClassImpl@113['Set']
    typeConstructor = DeserializedClassTypeConstructor@112
}

LazyJavaClassifierType@114['String'] {
    arguments = ArrayList@115[empty]
    classifier = JavaClassImpl@116['String']
    nullable = 'false': Boolean@58
    typeConstructor = DeserializedClassTypeConstructor@117
}

LazyJavaClassifierType@118['String'] {
    arguments = ArrayList@119[empty]
    classifier = JavaClassImpl@120['String']
    nullable = 'false': Boolean@58
    typeConstructor = DeserializedClassTypeConstructor@117
}

LazyJavaClassifierType@121['String'] {
    arguments = ArrayList@122[empty]
    classifier = JavaClassImpl@123['String']
    nullable = 'false': Boolean@58
    typeConstructor = DeserializedClassTypeConstructor@117
}

LazyJavaClassifierType@124['String'] {
    arguments = ArrayList@125[empty]
    classifier = JavaClassImpl@116['String']
    nullable = 'true': Boolean@64
    typeConstructor = DeserializedClassTypeConstructor@117
}

LazyJavaClassifierType@126['String'] {
    arguments = ArrayList@127[empty]
    classifier = JavaClassImpl@123['String']
    nullable = 'true': Boolean@64
    typeConstructor = DeserializedClassTypeConstructor@117
}

LazyJavaClassifierType@128['String'] {
    arguments = ArrayList@129[empty]
    classifier = JavaClassImpl@120['String']
    nullable = 'true': Boolean@64
    typeConstructor = DeserializedClassTypeConstructor@117
}

LazyJavaClassifierType@130['Throwable'] {
    arguments = ArrayList@131[empty]
    classifier = JavaClassImpl@132['Throwable']
    nullable = 'false': Boolean@58
    typeConstructor = DeserializedClassTypeConstructor@133
}

LazyJavaClassifierType@134['Throwable'] {
    arguments = ArrayList@135[empty]
    classifier = JavaClassImpl@136['Throwable']
    nullable = 'false': Boolean@58
    typeConstructor = DeserializedClassTypeConstructor@133
}

LazyJavaClassifierType@137['Throwable'] {
    arguments = ArrayList@138[empty]
    classifier = JavaClassImpl@139['Throwable']
    nullable = 'false': Boolean@58
    typeConstructor = DeserializedClassTypeConstructor@133
}

LazyJavaClassifierType@140['Throwable'] {
    arguments = ArrayList@141[empty]
    classifier = JavaClassImpl@136['Throwable']
    nullable = 'true': Boolean@64
    typeConstructor = DeserializedClassTypeConstructor@133
}

LazyJavaClassifierType@142['Throwable'] {
    arguments = ArrayList@143[empty]
    classifier = JavaClassImpl@139['Throwable']
    nullable = 'true': Boolean@64
    typeConstructor = DeserializedClassTypeConstructor@133
}

LazyJavaClassifierType@144['Throwable'] {
    arguments = ArrayList@145[empty]
    classifier = JavaClassImpl@132['Throwable']
    nullable = 'true': Boolean@64
    typeConstructor = DeserializedClassTypeConstructor@133
}

LazyJavaClassifierType@36['Throwable'] {
    arguments = ArrayList@146[empty]
    classifier = JavaClassImpl@147['Throwable']
    typeConstructor = DeserializedClassTypeConstructor@133
}

LazyJavaPackageFragmentProvider@148 {
    packageFragments('<root>': FqName@149) = LazyJavaPackageFragment@150['<root>']
    packageFragments('Comparable': FqName@151) = null
    packageFragments('K': FqName@152) = null
    packageFragments('MutableMap': FqName@153) = null
    packageFragments('Set': FqName@154) = null
    packageFragments('String': FqName@155) = null
    packageFragments('T': FqName@156) = null
    packageFragments('V': FqName@157) = null
    packageFragments('java': FqName@158) = LazyJavaPackageFragment@159['java']
    packageFragments('java.io': FqName@160) = LazyJavaPackageFragment@161['io']
    packageFragments('java.lang': FqName@162) = LazyJavaPackageFragment@163['lang']
    packageFragments('java.lang.Comparable': FqName@164) = null
    packageFragments('java.lang.K': FqName@165) = null
    packageFragments('java.lang.MutableMap': FqName@166) = null
    packageFragments('java.lang.Set': FqName@167) = null
    packageFragments('java.lang.String': FqName@168) = null
    packageFragments('java.lang.T': FqName@169) = null
    packageFragments('java.lang.V': FqName@170) = null
    packageFragments('java.util': FqName@171) = LazyJavaPackageFragment@172['util']
    packageFragments('java.util.HashSet': FqName@173) = null
    packageFragments('kotlin': FqName@174) = null
    packageFragments('kotlin.Comparable': FqName@175) = null
    packageFragments('kotlin.K': FqName@176) = null
    packageFragments('kotlin.MutableMap': FqName@177) = null
    packageFragments('kotlin.Set': FqName@178) = null
    packageFragments('kotlin.String': FqName@179) = null
    packageFragments('kotlin.T': FqName@180) = null
    packageFragments('kotlin.V': FqName@181) = null
    packageFragments('kotlin.io': FqName@182) = null
    packageFragments('kotlin.jvm': FqName@183) = null
    packageFragments('m': FqName@184) = null
    packageFragments('m.Comparable': FqName@185) = null
    packageFragments('m.K': FqName@186) = null
    packageFragments('m.MutableMap': FqName@187) = null
    packageFragments('m.Property': FqName@188) = null
    packageFragments('m.Set': FqName@189) = null
    packageFragments('m.String': FqName@190) = null
    packageFragments('m.T': FqName@191) = null
    packageFragments('m.V': FqName@192) = null
    topLevelClasses(JavaClassImpl@47['AbstractCollection']) = LazyJavaClassDescriptor@3['AbstractCollection']
    topLevelClasses(JavaClassImpl@50['AbstractSet']) = LazyJavaClassDescriptor@5['AbstractSet']
    topLevelClasses(JavaClassImpl@193['Exception']) = LazyJavaClassDescriptor@7['Exception']
    topLevelClasses(JavaClassImpl@194['HashSet']) = LazyJavaClassDescriptor@15['HashSet']
    topLevelClasses(JavaClassImpl@108['Serializable']) = LazyJavaClassDescriptor@23['Serializable']
}

LazyJavaPackageFragment@159['java'] {
    classes('lang': Name@195) = null // through LazyPackageFragmentScopeForJavaPackage@196
    classes('util': Name@197) = null // through LazyPackageFragmentScopeForJavaPackage@196
    deserializedPackageScope = Empty@198 // through LazyPackageFragmentScopeForJavaPackage@196
    functions('lang': Name@199) = EmptyList@200[empty] // through LazyPackageFragmentScopeForJavaPackage@196
    functions('util': Name@201) = EmptyList@200[empty] // through LazyPackageFragmentScopeForJavaPackage@196
    memberIndex = computeMemberIndex$1@202 // through LazyPackageFragmentScopeForJavaPackage@196
}

LazyJavaPackageFragment@163['lang'] {
    classes('Exception': Name@203) = LazyJavaClassDescriptor@7['Exception'] // through LazyPackageFragmentScopeForJavaPackage@204
    classes('HashSet': Name@205) = null // through LazyPackageFragmentScopeForJavaPackage@204
    classes('Property': Name@206) = null // through LazyPackageFragmentScopeForJavaPackage@204
    classes('getOrPut': Name@207) = null // through LazyPackageFragmentScopeForJavaPackage@204
    deserializedPackageScope = Empty@198 // through LazyPackageFragmentScopeForJavaPackage@204
    functions('Exception': Name@203) = EmptyList@200[empty] // through LazyPackageFragmentScopeForJavaPackage@204
    functions('HashSet': Name@205) = EmptyList@200[empty] // through LazyPackageFragmentScopeForJavaPackage@204
    functions('Property': Name@206) = EmptyList@200[empty] // through LazyPackageFragmentScopeForJavaPackage@204
    functions('getOrPut': Name@207) = EmptyList@200[empty] // through LazyPackageFragmentScopeForJavaPackage@204
    memberIndex = computeMemberIndex$1@208 // through LazyPackageFragmentScopeForJavaPackage@204
}

LazyJavaPackageFragment@172['util'] {
    classes('HashSet': Name@209) = LazyJavaClassDescriptor@15['HashSet'] // through LazyPackageFragmentScopeForJavaPackage@210
    deserializedPackageScope = Empty@198 // through LazyPackageFragmentScopeForJavaPackage@210
    functions('HashSet': Name@211) = EmptyList@200[empty] // through LazyPackageFragmentScopeForJavaPackage@210
    memberIndex = computeMemberIndex$1@212 // through LazyPackageFragmentScopeForJavaPackage@210
}

LazyJavaTypeParameterDescriptor@38['E'] {
    defaultType = JetTypeImpl@213['E']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@72
    upperBounds = LinkedHashSet@214[1] { NullableType@215 }
}

LazyJavaTypeParameterDescriptor@26['E'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@86
}

LazyJavaTypeParameterDescriptor@30['E'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@82
}

LazyJavaTypeParameterResolver@216 {
    resolve(JavaTypeParameterImpl@81['E']) = LazyJavaTypeParameterDescriptor@30['E']
}

LazyJavaTypeParameterResolver@217 {
    resolve(JavaTypeParameterImpl@85['E']) = LazyJavaTypeParameterDescriptor@26['E']
}

LazyJavaTypeParameterResolver@218 {
    resolve(JavaTypeParameterImpl@219['E']) = LazyJavaTypeParameterDescriptor@38['E']
}

ResolutionTaskHolder@220 {
    <name not found> = ArrayList@221[1] { ResolutionCandidate@222 }
    <name not found> = ArrayList@223[1] { ResolutionCandidate@222 }
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
}

ResolutionTaskHolder@224 {
    <name not found> = ArrayList@225[1] { ResolutionCandidate@226 }
    <name not found> = ArrayList@227[1] { ResolutionCandidate@226 }
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
}

ResolutionTaskHolder@228 {
    <name not found> = ArrayList@229[1] { ResolutionCandidate@230 }
    <name not found> = ArrayList@231[1] { ResolutionCandidate@230 }
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
}

ResolutionTaskHolder@232 {
    <name not found> = ArrayList@233[1] { ResolutionCandidate@234 }
    <name not found> = ArrayList@235[1] { ResolutionCandidate@234 }
}

ResolutionTaskHolder@236 {
    <name not found> = ArrayList@237[1] { ResolutionCandidate@238 }
    <name not found> = ArrayList@239[1] { ResolutionCandidate@238 }
}

ResolutionTaskHolder@240 {
    <name not found> = ArrayList@241[1] { ResolutionCandidate@242 }
    <name not found> = ArrayList@243[1] { ResolutionCandidate@242 }
}

ResolutionTaskHolder@244 {
    <name not found> = ArrayList@245[1] { ResolutionCandidate@246 }
    <name not found> = ArrayList@247[1] { ResolutionCandidate@246 }
}

ResolutionTaskHolder@248 {
    <name not found> = ArrayList@249[1] { ResolutionCandidate@250 }
    <name not found> = ArrayList@251[1] { ResolutionCandidate@250 }
}

ResolutionTaskHolder@252 {
    <name not found> = ArrayList@253[4] { ResolutionCandidate@254, ResolutionCandidate@255, ResolutionCandidate@256, ... }
    <name not found> = ArrayList@257[5] { ResolutionCandidate@254, ResolutionCandidate@255, ResolutionCandidate@256, ... }
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
}

ResolutionTaskHolder@258 {
    <name not found> = ArrayList@259[4] { ResolutionCandidate@260, ResolutionCandidate@261, ResolutionCandidate@262, ... }
    <name not found> = ArrayList@263[5] { ResolutionCandidate@260, ResolutionCandidate@261, ResolutionCandidate@262, ... }
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
    <name not found> = EmptyList@200[empty]
}

ResolutionTaskHolder@264 {
    <name not found> = ArrayList@265[8] { ResolutionCandidate@266, ResolutionCandidate@267, ResolutionCandidate@268, ... }
    <name not found> = ArrayList@269[8] { ResolutionCandidate@266, ResolutionCandidate@267, ResolutionCandidate@268, ... }
}
