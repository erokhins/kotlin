LazyJavaClassDescriptor@0['Bar'] {
    allDescriptors = ArrayList@1[4] { DeserializedSimpleFunctionDescriptor@2['hashCode'], JavaMethodDescriptor@3['f'], DeserializedSimpleFunctionDescriptor@4['toString'], ... } // through LazyJavaClassMemberScope@5
    constructors = stdlib_emptyListClass@6[empty] // through LazyJavaClassMemberScope@5
    defaultType = JetTypeImpl@7['Bar']
    enumEntryIndex = LinkedHashMap@8 // through LazyJavaClassMemberScope@5
    functions('clone': Name@9) = EmptyList@10[empty] // through LazyJavaClassMemberScope@5
    functions('equals': Name@11) = ArrayList@12[1] { DeserializedSimpleFunctionDescriptor@13['equals'] } // through LazyJavaClassMemberScope@5
    functions('f': Name@14) = ArrayList@15[1] { JavaMethodDescriptor@3['f'] } // through LazyJavaClassMemberScope@5
    functions('finalize': Name@16) = EmptyList@10[empty] // through LazyJavaClassMemberScope@5
    functions('getClass': Name@17) = EmptyList@10[empty] // through LazyJavaClassMemberScope@5
    functions('hashCode': Name@18) = ArrayList@19[1] { DeserializedSimpleFunctionDescriptor@2['hashCode'] } // through LazyJavaClassMemberScope@5
    functions('notify': Name@20) = EmptyList@10[empty] // through LazyJavaClassMemberScope@5
    functions('notifyAll': Name@21) = EmptyList@10[empty] // through LazyJavaClassMemberScope@5
    functions('toString': Name@22) = ArrayList@23[1] { DeserializedSimpleFunctionDescriptor@4['toString'] } // through LazyJavaClassMemberScope@5
    functions('wait': Name@24) = EmptyList@10[empty] // through LazyJavaClassMemberScope@5
    memberIndex = computeMemberIndex$1@25 // through LazyJavaClassMemberScope@5
    nestedClassIndex = LinkedHashMap@26 // through LazyJavaClassMemberScope@5
    thisAsReceiverParameter = LazyClassReceiverParameterDescriptor@27['<this>']
    typeConstructor = LazyJavaClassTypeConstructor@28['Bar']
}

LazyJavaClassDescriptor@29['Exception'] {
    typeConstructor = LazyJavaClassTypeConstructor@30['Exception']
}

LazyJavaClassDescriptor@31['Foo'] {
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@32['Foo']
}

LazyJavaClassDescriptor@33['RuntimeException'] {
    typeConstructor = LazyJavaClassTypeConstructor@34['RuntimeException']
}

LazyJavaClassDescriptor@35['UnsupportedOperationException'] {
    constructors = ArrayList@36[4] { JavaConstructorDescriptor@37['<init>'], JavaConstructorDescriptor@38['<init>'], JavaConstructorDescriptor@39['<init>'], ... } // through LazyJavaClassMemberScope@40
    defaultType = JetTypeImpl@41['UnsupportedOperationException']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@42['UnsupportedOperationException']
}

LazyJavaClassTypeConstructor@28['Bar'] {
    parameters = ArrayList@43[empty]
    supertypes = ArrayList@44[1] { JetTypeImpl@45['Any'] }
}

LazyJavaClassTypeConstructor@30['Exception'] {
    parameters = ArrayList@46[empty]
    supertypes = ArrayList@47[1] { LazyJavaClassifierType@48['Throwable'] }
}

LazyJavaClassTypeConstructor@32['Foo'] {
    parameters = ArrayList@49[1] { LazyJavaTypeParameterDescriptor@50['T'] }
}

LazyJavaClassTypeConstructor@34['RuntimeException'] {
    parameters = ArrayList@51[empty]
    supertypes = ArrayList@52[1] { LazyJavaClassifierType@53['Exception'] }
}

LazyJavaClassTypeConstructor@42['UnsupportedOperationException'] {
    parameters = ArrayList@54[empty]
    supertypes = ArrayList@55[1] { LazyJavaClassifierType@56['RuntimeException'] }
}

LazyJavaClassifierType@57['CharSequence'] {
    arguments = ArrayList@58[empty]
    classifier = JavaClassImpl@59['CharSequence']
    memberScope = DeserializedClassMemberScope@60
    nullable = 'false': Boolean@61
    typeConstructor = DeserializedClassTypeConstructor@62
}

LazyJavaClassifierType@63['CharSequence'] {
    arguments = ArrayList@64[empty]
    classifier = JavaClassImpl@59['CharSequence']
    memberScope = DeserializedClassMemberScope@60
    nullable = 'true': Boolean@65
    typeConstructor = DeserializedClassTypeConstructor@62
}

LazyJavaClassifierType@53['Exception'] {
    arguments = ArrayList@66[empty]
    classifier = JavaClassImpl@67['Exception']
    typeConstructor = LazyJavaClassTypeConstructor@30['Exception']
}

LazyJavaClassifierType@68['Foo'] {
    arguments = ArrayList@69[1] { LazyStarProjection@70 }
    classifier = JavaClassImpl@71['Foo']
    nullable = 'false': Boolean@61
    typeConstructor = LazyJavaClassTypeConstructor@32['Foo']
}

LazyJavaClassifierType@72['Foo'] {
    arguments = ArrayList@73[1] { LazyStarProjection@74 }
    classifier = JavaClassImpl@71['Foo']
    nullable = 'true': Boolean@65
    typeConstructor = LazyJavaClassTypeConstructor@32['Foo']
}

LazyJavaClassifierType@75['Object'] {
    classifier = JavaClassImpl@76['Object']
    typeConstructor = DeserializedClassTypeConstructor@77
}

LazyJavaClassifierType@56['RuntimeException'] {
    arguments = ArrayList@78[empty]
    classifier = JavaClassImpl@79['RuntimeException']
    typeConstructor = LazyJavaClassTypeConstructor@34['RuntimeException']
}

LazyJavaClassifierType@80['String'] {
    arguments = ArrayList@81[empty]
    classifier = JavaClassImpl@82['String']
    nullable = 'false': Boolean@61
    typeConstructor = DeserializedClassTypeConstructor@83
}

LazyJavaClassifierType@84['String'] {
    arguments = ArrayList@85[empty]
    classifier = JavaClassImpl@86['String']
    nullable = 'false': Boolean@61
    typeConstructor = DeserializedClassTypeConstructor@83
}

LazyJavaClassifierType@87['String'] {
    arguments = ArrayList@88[empty]
    classifier = JavaClassImpl@82['String']
    nullable = 'true': Boolean@65
    typeConstructor = DeserializedClassTypeConstructor@83
}

LazyJavaClassifierType@89['String'] {
    arguments = ArrayList@90[empty]
    classifier = JavaClassImpl@86['String']
    nullable = 'true': Boolean@65
    typeConstructor = DeserializedClassTypeConstructor@83
}

LazyJavaClassifierType@91['Throwable'] {
    arguments = ArrayList@92[empty]
    classifier = JavaClassImpl@93['Throwable']
    nullable = 'false': Boolean@61
    typeConstructor = DeserializedClassTypeConstructor@94
}

LazyJavaClassifierType@95['Throwable'] {
    arguments = ArrayList@96[empty]
    classifier = JavaClassImpl@97['Throwable']
    nullable = 'false': Boolean@61
    typeConstructor = DeserializedClassTypeConstructor@94
}

LazyJavaClassifierType@98['Throwable'] {
    arguments = ArrayList@99[empty]
    classifier = JavaClassImpl@97['Throwable']
    nullable = 'true': Boolean@65
    typeConstructor = DeserializedClassTypeConstructor@94
}

LazyJavaClassifierType@100['Throwable'] {
    arguments = ArrayList@101[empty]
    classifier = JavaClassImpl@93['Throwable']
    nullable = 'true': Boolean@65
    typeConstructor = DeserializedClassTypeConstructor@94
}

LazyJavaClassifierType@48['Throwable'] {
    arguments = ArrayList@102[empty]
    classifier = JavaClassImpl@103['Throwable']
    typeConstructor = DeserializedClassTypeConstructor@94
}

LazyJavaPackageFragmentProvider@104 {
    packageFragments('<root>': FqName@105) = LazyJavaPackageFragment@106['<root>']
    packageFragments('Bar': FqName@107) = null
    packageFragments('BarImpl': FqName@108) = null
    packageFragments('CharSequence': FqName@109) = null
    packageFragments('Foo': FqName@110) = null
    packageFragments('java': FqName@111) = LazyJavaPackageFragment@112['java']
    packageFragments('java.lang': FqName@113) = LazyJavaPackageFragment@114['lang']
    packageFragments('java.lang.Bar': FqName@115) = null
    packageFragments('java.lang.CharSequence': FqName@116) = null
    packageFragments('java.lang.Foo': FqName@117) = null
    packageFragments('kotlin': FqName@118) = null
    packageFragments('kotlin.Bar': FqName@119) = null
    packageFragments('kotlin.CharSequence': FqName@120) = null
    packageFragments('kotlin.Foo': FqName@121) = null
    packageFragments('kotlin.io': FqName@122) = null
    packageFragments('kotlin.jvm': FqName@123) = null
    topLevelClasses(JavaClassImpl@124['Bar']) = LazyJavaClassDescriptor@0['Bar']
    topLevelClasses(JavaClassImpl@67['Exception']) = LazyJavaClassDescriptor@29['Exception']
    topLevelClasses(JavaClassImpl@125['Foo']) = LazyJavaClassDescriptor@31['Foo']
    topLevelClasses(JavaClassImpl@79['RuntimeException']) = LazyJavaClassDescriptor@33['RuntimeException']
    topLevelClasses(JavaClassImpl@126['UnsupportedOperationException']) = LazyJavaClassDescriptor@35['UnsupportedOperationException']
}

LazyJavaPackageFragment@106['<root>'] {
    classes('Bar': Name@127) = LazyJavaClassDescriptor@0['Bar'] // through LazyPackageFragmentScopeForJavaPackage@128
    classes('CharSequence': Name@129) = null // through LazyPackageFragmentScopeForJavaPackage@128
    classes('Foo': Name@130) = LazyJavaClassDescriptor@31['Foo'] // through LazyPackageFragmentScopeForJavaPackage@128
    classes('UnsupportedOperationException': Name@131) = null // through LazyPackageFragmentScopeForJavaPackage@128
    deserializedPackageScope = Empty@132 // through LazyPackageFragmentScopeForJavaPackage@128
    functions('UnsupportedOperationException': Name@131) = EmptyList@10[empty] // through LazyPackageFragmentScopeForJavaPackage@128
    memberIndex = computeMemberIndex$1@133 // through LazyPackageFragmentScopeForJavaPackage@128
}

LazyJavaPackageFragment@112['java'] {
    classes('lang': Name@134) = null // through LazyPackageFragmentScopeForJavaPackage@135
    deserializedPackageScope = Empty@132 // through LazyPackageFragmentScopeForJavaPackage@135
    functions('lang': Name@136) = EmptyList@10[empty] // through LazyPackageFragmentScopeForJavaPackage@135
    memberIndex = computeMemberIndex$1@137 // through LazyPackageFragmentScopeForJavaPackage@135
}

LazyJavaPackageFragment@114['lang'] {
    classes('UnsupportedOperationException': Name@131) = LazyJavaClassDescriptor@35['UnsupportedOperationException'] // through LazyPackageFragmentScopeForJavaPackage@138
    deserializedPackageScope = Empty@132 // through LazyPackageFragmentScopeForJavaPackage@138
    functions('UnsupportedOperationException': Name@131) = EmptyList@10[empty] // through LazyPackageFragmentScopeForJavaPackage@138
    memberIndex = computeMemberIndex$1@139 // through LazyPackageFragmentScopeForJavaPackage@138
}

LazyJavaTypeParameterDescriptor@50['T'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@140
    upperBounds = LinkedHashSet@141[1] { DelegatingFlexibleType@142 }
    upperBoundsAsType = DelegatingFlexibleType@142
}

LazyJavaTypeParameterResolver@143 {
    resolve(JavaTypeParameterImpl@144['T']) = LazyJavaTypeParameterDescriptor@50['T']
}

ResolutionTaskHolder@145 {
    <name not found> = ArrayList@146[4] { ResolutionCandidate@147, ResolutionCandidate@148, ResolutionCandidate@149, ... }
    <name not found> = ArrayList@150[4] { ResolutionCandidate@147, ResolutionCandidate@148, ResolutionCandidate@149, ... }
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
    <name not found> = EmptyList@10[empty]
}
