DescriptorResolver@0 {
    <name not found> = DelegatingFlexibleType@1
}

LazyJavaClassDescriptor@2['Bad'] {
    typeConstructor = LazyJavaClassTypeConstructor@3['Bad']
}

LazyJavaClassDescriptor@4['X'] {
    defaultType = JetTypeImpl@5['X']
    enumEntryIndex = LinkedHashMap@6 // through LazyJavaClassMemberScope@7
    functions('foo': Name@8) = ArrayList@9[1] { JavaMethodDescriptor@10['foo'] } // through LazyJavaClassMemberScope@7
    memberIndex = computeMemberIndex$1@11 // through LazyJavaClassMemberScope@7
    nestedClassIndex = LinkedHashMap@12 // through LazyJavaClassMemberScope@7
    nestedClasses('foo': Name@8) = null // through LazyJavaClassMemberScope@7
    thisAsReceiverParameter = LazyClassReceiverParameterDescriptor@13['<this>']
    typeConstructor = LazyJavaClassTypeConstructor@14['X']
}

LazyJavaClassTypeConstructor@3['Bad'] {
    parameters = ArrayList@15[1] { LazyJavaTypeParameterDescriptor@16['T'] }
}

LazyJavaClassTypeConstructor@14['X'] {
    parameters = ArrayList@17[empty]
    supertypes = ArrayList@18[1] { JetTypeImpl@19['Any'] }
}

LazyJavaClassifierType@20['Bad'] {
    arguments = ArrayList@21[1] { LazyStarProjection@22 }
    classifier = JavaClassImpl@23['Bad']
    nullable = 'false': Boolean@24
    typeConstructor = LazyJavaClassTypeConstructor@3['Bad']
}

LazyJavaClassifierType@25['Bad'] {
    arguments = ArrayList@26[1] { LazyStarProjection@27 }
    classifier = JavaClassImpl@23['Bad']
    nullable = 'true': Boolean@28
    typeConstructor = LazyJavaClassTypeConstructor@3['Bad']
}

LazyJavaClassifierType@29['Bad'] {
    arguments = ArrayList@30[1] { TypeProjectionImpl@31 }
    classifier = JavaClassImpl@32['Bad']
    nullable = 'false': Boolean@24
    typeConstructor = LazyJavaClassTypeConstructor@3['Bad']
}

LazyJavaClassifierType@33['Bad'] {
    arguments = ArrayList@34[1] { TypeProjectionImpl@35 }
    classifier = JavaClassImpl@32['Bad']
    nullable = 'true': Boolean@28
    typeConstructor = LazyJavaClassTypeConstructor@3['Bad']
}

LazyJavaClassifierType@36['Object'] {
    classifier = JavaClassImpl@37['Object']
    typeConstructor = DeserializedClassTypeConstructor@38
}

LazyJavaPackageFragmentProvider@39 {
    packageFragments('<root>': FqName@40) = LazyJavaPackageFragment@41['<root>']
    packageFragments('X': FqName@42) = null
    packageFragments('java': FqName@43) = LazyJavaPackageFragment@44['java']
    packageFragments('java.lang': FqName@45) = LazyJavaPackageFragment@46['lang']
    packageFragments('java.lang.X': FqName@47) = null
    packageFragments('kotlin': FqName@48) = null
    packageFragments('kotlin.X': FqName@49) = null
    packageFragments('kotlin.io': FqName@50) = null
    packageFragments('kotlin.jvm': FqName@51) = null
    topLevelClasses(JavaClassImpl@23['Bad']) = LazyJavaClassDescriptor@2['Bad']
    topLevelClasses(JavaClassImpl@52['X']) = LazyJavaClassDescriptor@4['X']
}

LazyJavaPackageFragment@41['<root>'] {
    classes('X': Name@53) = LazyJavaClassDescriptor@4['X'] // through LazyPackageFragmentScopeForJavaPackage@54
}

LazyJavaPackageFragment@44['java'] {
    classes('lang': Name@55) = null // through LazyPackageFragmentScopeForJavaPackage@56
    deserializedPackageScope = Empty@57 // through LazyPackageFragmentScopeForJavaPackage@56
    functions('lang': Name@58) = EmptyList@59[empty] // through LazyPackageFragmentScopeForJavaPackage@56
    memberIndex = computeMemberIndex$1@60 // through LazyPackageFragmentScopeForJavaPackage@56
}

LazyJavaTypeParameterDescriptor@16['T'] {
    upperBounds = LinkedHashSet@61[1] { DelegatingFlexibleType@62 }
    upperBoundsAsType = DelegatingFlexibleType@62
}

LazyJavaTypeParameterResolver@63 {
    resolve(JavaTypeParameterImpl@64['T']) = LazyJavaTypeParameterDescriptor@16['T']
}

ResolutionTaskHolder@65 {
    <name not found> = ArrayList@66[1] { ResolutionCandidate@67 }
    <name not found> = ArrayList@68[1] { ResolutionCandidate@67 }
}

ResolutionTaskHolder@69 {
    <name not found> = ArrayList@70[1] { ResolutionCandidate@71 }
    <name not found> = ArrayList@72[1] { ResolutionCandidate@71 }
}
