LazyJavaClassDescriptor@0['X'] {
    defaultType = JetTypeImpl@1['X<1>']
    functions('bar': Name@2) = ArrayList@3[1] { JavaMethodDescriptor@4['bar'] } // through LazyJavaClassMemberScope@5
    functions('foo': Name@6) = ArrayList@7[1] { JavaMethodDescriptor@8['foo'] } // through LazyJavaClassMemberScope@5
    memberIndex = computeMemberIndex$1@9 // through LazyJavaClassMemberScope@5
    thisAsReceiverParameter = LazyClassReceiverParameterDescriptor@10['<this>']
    typeConstructor = LazyJavaClassTypeConstructor@11['X']
}

LazyJavaClassDescriptor@12['Y'] {
    constructors = ArrayList@13[1] { JavaConstructorDescriptor@14['<init>'] } // through LazyJavaClassMemberScope@15
    defaultType = JetTypeImpl@16['Y']
    enumEntryIndex = LinkedHashMap@17 // through LazyJavaClassMemberScope@15
    functionTypeForSamInterface = null
    functions('bar': Name@2) = ArrayList@18[1] { JavaMethodDescriptor@19['bar'] } // through LazyJavaClassMemberScope@15
    functions('foo': Name@6) = ArrayList@20[1] { JavaMethodDescriptor@21['foo'] } // through LazyJavaClassMemberScope@15
    memberIndex = computeMemberIndex$1@22 // through LazyJavaClassMemberScope@15
    nestedClassIndex = LinkedHashMap@23 // through LazyJavaClassMemberScope@15
    nestedClasses('bar': Name@2) = null // through LazyJavaClassMemberScope@15
    nestedClasses('foo': Name@6) = null // through LazyJavaClassMemberScope@15
    typeConstructor = LazyJavaClassTypeConstructor@24['Y']
}

LazyJavaClassTypeConstructor@11['X'] {
    parameters = ArrayList@25[1] { LazyJavaTypeParameterDescriptor@26['T'] }
    supertypes = ArrayList@27[1] { JetTypeImpl@28['Any'] }
}

LazyJavaClassTypeConstructor@24['Y'] {
    parameters = ArrayList@29[empty]
    supertypes = ArrayList@30[1] { LazyJavaClassifierType@31['X<String>'] }
}

LazyJavaClassifierType@32['Object'] {
    classifier = JavaClassImpl@33['Object']
    typeConstructor = DeserializedClassTypeConstructor@34
}

LazyJavaClassifierType@35['String'] {
    arguments = ArrayList@36[empty]
    classifier = JavaClassImpl@37['String']
    memberScope = DeserializedClassMemberScope@38
    nullable = 'false': Boolean@39
    typeConstructor = DeserializedClassTypeConstructor@40
}

LazyJavaClassifierType@41['String'] {
    arguments = ArrayList@42[empty]
    classifier = JavaClassImpl@37['String']
    nullable = 'true': Boolean@43
    typeConstructor = DeserializedClassTypeConstructor@40
}

LazyJavaClassifierType@44['T'] {
    arguments = ArrayList@45[empty]
    classifier = JavaTypeParameterImpl@46['T']
    nullable = 'false': Boolean@39
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@47
}

LazyJavaClassifierType@48['T'] {
    arguments = ArrayList@49[empty]
    classifier = JavaTypeParameterImpl@50['T']
    nullable = 'false': Boolean@39
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@47
}

LazyJavaClassifierType@51['T'] {
    arguments = ArrayList@52[empty]
    classifier = JavaTypeParameterImpl@50['T']
    nullable = 'true': Boolean@43
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@47
}

LazyJavaClassifierType@53['T'] {
    arguments = ArrayList@54[empty]
    classifier = JavaTypeParameterImpl@46['T']
    nullable = 'true': Boolean@43
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@47
}

LazyJavaClassifierType@31['X<String>'] {
    arguments = ArrayList@55[1] { TypeProjectionImpl@56 }
    classifier = JavaClassImpl@57['X']
    memberScope = SubstitutingScope@58
    typeConstructor = LazyJavaClassTypeConstructor@11['X']
}

LazyJavaPackageFragmentProvider@59 {
    packageFragments('<root>': FqName@60) = LazyJavaPackageFragment@61['<root>']
    packageFragments('java': FqName@62) = LazyJavaPackageFragment@63['java']
    packageFragments('java.lang': FqName@64) = LazyJavaPackageFragment@65['lang']
    packageFragments('kotlin': FqName@66) = null
    packageFragments('kotlin.io': FqName@67) = null
    packageFragments('kotlin.jvm': FqName@68) = null
    topLevelClasses(JavaClassImpl@57['X']) = LazyJavaClassDescriptor@0['X']
    topLevelClasses(JavaClassImpl@69['Y']) = LazyJavaClassDescriptor@12['Y']
}

LazyJavaPackageFragment@61['<root>'] {
    classes('Y': Name@70) = LazyJavaClassDescriptor@12['Y'] // through LazyPackageFragmentScopeForJavaPackage@71
    deserializedPackageScope = Empty@72 // through LazyPackageFragmentScopeForJavaPackage@71
    functions('Y': Name@70) = EmptyList@73[empty] // through LazyPackageFragmentScopeForJavaPackage@71
    memberIndex = computeMemberIndex$1@74 // through LazyPackageFragmentScopeForJavaPackage@71
}

LazyJavaPackageFragment@63['java'] {
    classes('lang': Name@75) = null // through LazyPackageFragmentScopeForJavaPackage@76
    deserializedPackageScope = Empty@72 // through LazyPackageFragmentScopeForJavaPackage@76
    functions('lang': Name@77) = EmptyList@73[empty] // through LazyPackageFragmentScopeForJavaPackage@76
    memberIndex = computeMemberIndex$1@78 // through LazyPackageFragmentScopeForJavaPackage@76
}

LazyJavaPackageFragment@65['lang'] {
    classes('Y': Name@70) = null // through LazyPackageFragmentScopeForJavaPackage@79
    deserializedPackageScope = Empty@72 // through LazyPackageFragmentScopeForJavaPackage@79
    functions('Y': Name@70) = EmptyList@73[empty] // through LazyPackageFragmentScopeForJavaPackage@79
    memberIndex = computeMemberIndex$1@80 // through LazyPackageFragmentScopeForJavaPackage@79
}

LazyJavaTypeParameterDescriptor@26['T'] {
    defaultType = JetTypeImpl@81['T']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@47
    upperBounds = LinkedHashSet@82[1] { NullableType@83 }
}

LazyJavaTypeParameterResolver@84 {
    resolve(JavaTypeParameterImpl@85['T']) = LazyJavaTypeParameterDescriptor@26['T']
}

LazyJavaTypeParameterResolver@86 {
    resolve(JavaTypeParameterImpl@46['T']) = null
}

LazyJavaTypeParameterResolver@87 {
    resolve(JavaTypeParameterImpl@50['T']) = null
}

ResolutionTaskHolder@88 {
    <name not found> = ArrayList@89[1] { ResolutionCandidate@90 }
    <name not found> = ArrayList@91[1] { ResolutionCandidate@90 }
    <name not found> = EmptyList@73[empty]
    <name not found> = EmptyList@73[empty]
    <name not found> = EmptyList@73[empty]
    <name not found> = EmptyList@73[empty]
}

ResolutionTaskHolder@92 {
    <name not found> = ArrayList@93[1] { ResolutionCandidate@94 }
    <name not found> = ArrayList@95[1] { ResolutionCandidate@94 }
    <name not found> = EmptyList@73[empty]
    <name not found> = EmptyList@73[empty]
    <name not found> = EmptyList@73[empty]
    <name not found> = EmptyList@73[empty]
}

ResolutionTaskHolder@96 {
    <name not found> = ArrayList@97[1] { ResolutionCandidate@98 }
    <name not found> = ArrayList@99[1] { ResolutionCandidate@98 }
}

ResolutionTaskHolder@100 {
    <name not found> = ArrayList@101[1] { ResolutionCandidate@102 }
    <name not found> = ArrayList@103[1] { ResolutionCandidate@102 }
}

ResolutionTaskHolder@104 {
    <name not found> = ArrayList@105[1] { ResolutionCandidate@106 }
    <name not found> = ArrayList@107[1] { ResolutionCandidate@106 }
}
