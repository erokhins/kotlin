LazyJavaClassDescriptor@0['Comparable'] {
    allDescriptors = ArrayList@1[4] { DeserializedSimpleFunctionDescriptor@2['hashCode'], DeserializedSimpleFunctionDescriptor@3['toString'], DeserializedSimpleFunctionDescriptor@4['equals'], ... } // through LazyJavaClassMemberScope@5
    annotations = LazyJavaAnnotations@6
    defaultType = JetTypeImpl@7['Comparable<1>']
    enumEntryIndex = LinkedHashMap@8 // through LazyJavaClassMemberScope@5
    functionTypeForSamInterface = JetTypeImpl@9['Function1<2>']
    functions('clone': Name@10) = EmptyList@11[empty] // through LazyJavaClassMemberScope@5
    functions('compareTo': Name@12) = ArrayList@13[1] { JavaMethodDescriptor@14['compareTo'] } // through LazyJavaClassMemberScope@5
    functions('equals': Name@15) = ArrayList@16[1] { DeserializedSimpleFunctionDescriptor@4['equals'] } // through LazyJavaClassMemberScope@5
    functions('finalize': Name@17) = EmptyList@11[empty] // through LazyJavaClassMemberScope@5
    functions('getClass': Name@18) = EmptyList@11[empty] // through LazyJavaClassMemberScope@5
    functions('hashCode': Name@19) = ArrayList@20[1] { DeserializedSimpleFunctionDescriptor@2['hashCode'] } // through LazyJavaClassMemberScope@5
    functions('notify': Name@21) = EmptyList@11[empty] // through LazyJavaClassMemberScope@5
    functions('notifyAll': Name@22) = EmptyList@11[empty] // through LazyJavaClassMemberScope@5
    functions('toString': Name@23) = ArrayList@24[1] { DeserializedSimpleFunctionDescriptor@3['toString'] } // through LazyJavaClassMemberScope@5
    functions('wait': Name@25) = EmptyList@11[empty] // through LazyJavaClassMemberScope@5
    memberIndex = computeMemberIndex$1@26 // through LazyJavaClassMemberScope@5
    nestedClassIndex = LinkedHashMap@27 // through LazyJavaClassMemberScope@5
    thisAsReceiverParameter = LazyClassReceiverParameterDescriptor@28['<this>']
    typeConstructor = LazyJavaClassTypeConstructor@29['Comparable']
}

LazyJavaClassDescriptor@30['Integer'] {
    typeConstructor = LazyJavaClassTypeConstructor@31['Integer']
}

LazyJavaClassDescriptor@32['Iterable'] {
    typeConstructor = LazyJavaClassTypeConstructor@33['Iterable']
}

LazyJavaClassDescriptor@34['Iterator'] {
    defaultType = JetTypeImpl@35['Iterator<1>']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@36['Iterator']
}

LazyJavaClassTypeConstructor@29['Comparable'] {
    parameters = ArrayList@37[1] { LazyJavaTypeParameterDescriptor@38['T'] }
    supertypes = ArrayList@39[1] { JetTypeImpl@40['Any'] }
}

LazyJavaClassTypeConstructor@31['Integer'] {
    parameters = ArrayList@41[empty]
    supertypes = ArrayList@42[2] { LazyJavaClassifierType@43['Number'], LazyJavaClassifierType@44['Comparable<Integer>'] }
}

LazyJavaClassTypeConstructor@33['Iterable'] {
    parameters = ArrayList@45[1] { LazyJavaTypeParameterDescriptor@46['T'] }
}

LazyJavaClassTypeConstructor@36['Iterator'] {
    parameters = ArrayList@47[1] { LazyJavaTypeParameterDescriptor@48['E'] }
    supertypes = ArrayList@49[1] { JetTypeImpl@40['Any'] }
}

LazyJavaClassifierType@44['Comparable<Integer>'] {
    classifier = JavaClassImpl@50['Comparable']
    typeConstructor = DeserializedClassTypeConstructor@51
}

LazyJavaClassifierType@43['Number'] {
    arguments = ArrayList@52[empty]
    classifier = JavaClassImpl@53['Number']
    typeConstructor = DeserializedClassTypeConstructor@54
}

LazyJavaClassifierType@55['Object'] {
    classifier = JavaClassImpl@56['Object']
    typeConstructor = DeserializedClassTypeConstructor@57
}

LazyJavaClassifierType@58['Object'] {
    classifier = JavaClassImpl@59['Object']
    typeConstructor = DeserializedClassTypeConstructor@57
}

LazyJavaClassifierType@60['T'] {
    arguments = ArrayList@61[empty]
    classifier = JavaTypeParameterImpl@62['T']
    nullable = 'false': Boolean@63
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@64
}

LazyJavaClassifierType@65['T'] {
    arguments = ArrayList@66[empty]
    classifier = JavaTypeParameterImpl@67['T']
    nullable = 'false': Boolean@63
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@64
}

LazyJavaClassifierType@68['T'] {
    arguments = ArrayList@69[empty]
    classifier = JavaTypeParameterImpl@62['T']
    nullable = 'true': Boolean@70
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@64
}

LazyJavaClassifierType@71['T'] {
    arguments = ArrayList@72[empty]
    classifier = JavaTypeParameterImpl@67['T']
    nullable = 'true': Boolean@70
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@64
}

LazyJavaPackageFragmentProvider@73 {
    packageFragments('<root>': FqName@74) = LazyJavaPackageFragment@75['<root>']
    packageFragments('Any': FqName@76) = null
    packageFragments('Int': FqName@77) = null
    packageFragments('Integer': FqName@78) = null
    packageFragments('Iterable': FqName@79) = null
    packageFragments('Iterator': FqName@80) = null
    packageFragments('String': FqName@81) = null
    packageFragments('a': FqName@82) = null
    packageFragments('a.Any': FqName@83) = null
    packageFragments('a.Int': FqName@84) = null
    packageFragments('a.Integer': FqName@85) = null
    packageFragments('a.Iterable': FqName@86) = null
    packageFragments('a.Iterator': FqName@87) = null
    packageFragments('a.String': FqName@88) = null
    packageFragments('a.java': FqName@89) = null
    packageFragments('java': FqName@90) = LazyJavaPackageFragment@91['java']
    packageFragments('java.lang': FqName@92) = LazyJavaPackageFragment@93['lang']
    packageFragments('java.lang.Any': FqName@94) = null
    packageFragments('java.lang.Comparable': FqName@95) = null
    packageFragments('java.lang.Int': FqName@96) = null
    packageFragments('java.lang.Integer': FqName@97) = null
    packageFragments('java.lang.Iterable': FqName@98) = null
    packageFragments('java.lang.Iterator': FqName@99) = null
    packageFragments('java.lang.String': FqName@100) = null
    packageFragments('java.util': FqName@101) = LazyJavaPackageFragment@102['util']
    packageFragments('java.util.Iterator': FqName@103) = null
    packageFragments('kotlin': FqName@104) = null
    packageFragments('kotlin.Any': FqName@105) = null
    packageFragments('kotlin.Int': FqName@106) = null
    packageFragments('kotlin.Integer': FqName@107) = null
    packageFragments('kotlin.Iterable': FqName@108) = null
    packageFragments('kotlin.Iterator': FqName@109) = null
    packageFragments('kotlin.String': FqName@110) = null
    packageFragments('kotlin.io': FqName@111) = null
    packageFragments('kotlin.jvm': FqName@112) = null
    topLevelClasses(JavaClassImpl@113['Comparable']) = LazyJavaClassDescriptor@0['Comparable']
    topLevelClasses(JavaClassImpl@114['Integer']) = LazyJavaClassDescriptor@30['Integer']
    topLevelClasses(JavaClassImpl@115['Iterable']) = LazyJavaClassDescriptor@32['Iterable']
    topLevelClasses(JavaClassImpl@116['Iterator']) = LazyJavaClassDescriptor@34['Iterator']
}

LazyJavaPackageFragment@91['java'] {
    classes('lang': Name@117) = null // through LazyPackageFragmentScopeForJavaPackage@118
    classes('util': Name@119) = null // through LazyPackageFragmentScopeForJavaPackage@118
    deserializedPackageScope = Empty@120 // through LazyPackageFragmentScopeForJavaPackage@118
    functions('lang': Name@121) = EmptyList@11[empty] // through LazyPackageFragmentScopeForJavaPackage@118
    functions('util': Name@122) = EmptyList@11[empty] // through LazyPackageFragmentScopeForJavaPackage@118
    memberIndex = computeMemberIndex$1@123 // through LazyPackageFragmentScopeForJavaPackage@118
}

LazyJavaPackageFragment@93['lang'] {
    classes('Comparable': Name@124) = LazyJavaClassDescriptor@0['Comparable'] // through LazyPackageFragmentScopeForJavaPackage@125
    classes('Integer': Name@126) = LazyJavaClassDescriptor@30['Integer'] // through LazyPackageFragmentScopeForJavaPackage@125
    classes('Iterable': Name@127) = LazyJavaClassDescriptor@32['Iterable'] // through LazyPackageFragmentScopeForJavaPackage@125
    classes('java': Name@128) = null // through LazyPackageFragmentScopeForJavaPackage@125
    deserializedPackageScope = Empty@120 // through LazyPackageFragmentScopeForJavaPackage@125
    functions('Comparable': Name@129) = ArrayList@130[1] { SamConstructorDescriptor@131['Comparable'] } // through LazyPackageFragmentScopeForJavaPackage@125
    memberIndex = computeMemberIndex$1@132 // through LazyPackageFragmentScopeForJavaPackage@125
}

LazyJavaPackageFragment@102['util'] {
    classes('Iterator': Name@133) = LazyJavaClassDescriptor@34['Iterator'] // through LazyPackageFragmentScopeForJavaPackage@134
    deserializedPackageScope = Empty@120 // through LazyPackageFragmentScopeForJavaPackage@134
    functions('Iterator': Name@135) = EmptyList@11[empty] // through LazyPackageFragmentScopeForJavaPackage@134
    memberIndex = computeMemberIndex$1@136 // through LazyPackageFragmentScopeForJavaPackage@134
}

LazyJavaTypeParameterDescriptor@48['E'] {
    defaultType = JetTypeImpl@137['E']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@138
    upperBounds = LinkedHashSet@139[1] { NullableType@140 }
    upperBoundsAsType = NullableType@140
}

LazyJavaTypeParameterDescriptor@38['T'] {
    defaultType = JetTypeImpl@141['T']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@64
    upperBounds = LinkedHashSet@142[1] { NullableType@143 }
}

LazyJavaTypeParameterDescriptor@46['T'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@144
    upperBounds = LinkedHashSet@145[1] { NullableType@146 }
}

LazyJavaTypeParameterResolver@147 {
    resolve(JavaTypeParameterImpl@148['E']) = LazyJavaTypeParameterDescriptor@48['E']
}

LazyJavaTypeParameterResolver@149 {
    resolve(JavaTypeParameterImpl@150['T']) = LazyJavaTypeParameterDescriptor@46['T']
}

LazyJavaTypeParameterResolver@151 {
    resolve(JavaTypeParameterImpl@62['T']) = LazyJavaTypeParameterDescriptor@38['T']
}

LazyJavaTypeParameterResolver@152 {
    resolve(JavaTypeParameterImpl@67['T']) = null
}

LazyJavaTypeParameterResolver@153 {
    resolve(JavaTypeParameterImpl@62['T']) = null
}

ResolutionTaskHolder@154 {
    <name not found> = ArrayList@155[1] { ResolutionCandidate@156 }
    <name not found> = ArrayList@157[1] { ResolutionCandidate@156 }
}

ResolutionTaskHolder@158 {
    <name not found> = ArrayList@159[1] { ResolutionCandidate@160 }
    <name not found> = ArrayList@161[1] { ResolutionCandidate@160 }
}

ResolutionTaskHolder@162 {
    <name not found> = ArrayList@163[1] { ResolutionCandidate@164 }
    <name not found> = ArrayList@165[1] { ResolutionCandidate@164 }
}
