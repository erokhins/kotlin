LazyJavaClassDescriptor@0['C'] {
    defaultType = JetTypeImpl@1['C<1>']
    enumEntryIndex = LinkedHashMap@2 // through LazyJavaClassMemberScope@3
    functionTypeForSamInterface = null
    functions('create': Name@4) = ArrayList@5[1] { JavaMethodDescriptor@6['create'] } // through LazyJavaStaticClassScope@7
    functions('create': Name@4) = EmptyList@8[empty] // through LazyJavaClassMemberScope@3
    functions('foo': Name@9) = ArrayList@10[1] { JavaMethodDescriptor@11['foo'] } // through LazyJavaClassMemberScope@3
    memberIndex = computeMemberIndex$1@12 // through LazyJavaClassMemberScope@3
    memberIndex = computeMemberIndex$1@13 // through LazyJavaStaticClassScope@7
    nestedClassIndex = LinkedHashMap@14 // through LazyJavaClassMemberScope@3
    nestedClasses('create': Name@4) = null // through LazyJavaClassMemberScope@3
    nestedClasses('foo': Name@9) = null // through LazyJavaClassMemberScope@3
    properties('create': Name@4) = EmptyList@8[empty] // through LazyJavaClassMemberScope@3
    properties('create': Name@4) = EmptyList@8[empty] // through LazyJavaStaticClassScope@7
    thisAsReceiverParameter = LazyClassReceiverParameterDescriptor@15['<this>']
    typeConstructor = LazyJavaClassTypeConstructor@16['C']
}

LazyJavaClassTypeConstructor@16['C'] {
    parameters = ArrayList@17[1] { LazyJavaTypeParameterDescriptor@18['B'] }
    supertypes = ArrayList@19[1] { JetTypeImpl@20['Any'] }
}

LazyJavaClassifierType@21['B'] {
    arguments = ArrayList@22[empty]
    classifier = JavaTypeParameterImpl@23['B']
    nullable = 'false': Boolean@24
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@25
}

LazyJavaClassifierType@26['B'] {
    arguments = ArrayList@27[empty]
    classifier = JavaTypeParameterImpl@28['B']
    nullable = 'false': Boolean@24
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@25
}

LazyJavaClassifierType@29['B'] {
    arguments = ArrayList@30[empty]
    classifier = JavaTypeParameterImpl@23['B']
    nullable = 'true': Boolean@31
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@25
}

LazyJavaClassifierType@32['B'] {
    arguments = ArrayList@33[empty]
    classifier = JavaTypeParameterImpl@28['B']
    nullable = 'true': Boolean@31
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@25
}

LazyJavaClassifierType@34['C'] {
    arguments = ArrayList@35[1] { LazyStarProjection@36 }
    classifier = JavaClassImpl@37['C']
    memberScope = SubstitutingScope@38
    nullable = 'false': Boolean@24
    typeConstructor = LazyJavaClassTypeConstructor@16['C']
}

LazyJavaClassifierType@39['C'] {
    arguments = ArrayList@40[1] { LazyStarProjection@41 }
    classifier = JavaClassImpl@37['C']
    memberScope = SubstitutingScope@42
    nullable = 'true': Boolean@31
    typeConstructor = LazyJavaClassTypeConstructor@16['C']
}

LazyJavaClassifierType@43['C<?>'] {
    arguments = ArrayList@44[1] { LazyStarProjection@45 }
    classifier = JavaClassImpl@46['C']
    memberScope = SubstitutingScope@47
    nullable = 'false': Boolean@24
    typeConstructor = LazyJavaClassTypeConstructor@16['C']
}

LazyJavaClassifierType@48['C<?>'] {
    arguments = ArrayList@49[1] { LazyStarProjection@50 }
    classifier = JavaClassImpl@46['C']
    nullable = 'true': Boolean@31
    typeConstructor = LazyJavaClassTypeConstructor@16['C']
}

LazyJavaClassifierType@51['C<B>'] {
    arguments = ArrayList@52[1] { TypeProjectionImpl@53 }
    classifier = JavaClassImpl@54['C']
    memberScope = SubstitutingScope@55
    nullable = 'false': Boolean@24
    typeConstructor = LazyJavaClassTypeConstructor@16['C']
}

LazyJavaClassifierType@56['C<B>'] {
    arguments = ArrayList@57[1] { TypeProjectionImpl@58 }
    classifier = JavaClassImpl@54['C']
    memberScope = SubstitutingScope@59
    nullable = 'true': Boolean@31
    typeConstructor = LazyJavaClassTypeConstructor@16['C']
}

LazyJavaClassifierType@60['Object'] {
    classifier = JavaClassImpl@61['Object']
    typeConstructor = DeserializedClassTypeConstructor@62
}

LazyJavaPackageFragmentProvider@63 {
    packageFragments('<root>': FqName@64) = LazyJavaPackageFragment@65['<root>']
    packageFragments('C': FqName@66) = null
    packageFragments('a': FqName@67) = LazyJavaPackageFragment@68['a']
    packageFragments('a.C': FqName@69) = null
    packageFragments('d': FqName@70) = null
    packageFragments('d.C': FqName@71) = null
    packageFragments('java': FqName@72) = LazyJavaPackageFragment@73['java']
    packageFragments('java.lang': FqName@74) = LazyJavaPackageFragment@75['lang']
    packageFragments('java.lang.C': FqName@76) = null
    packageFragments('kotlin': FqName@77) = null
    packageFragments('kotlin.C': FqName@78) = null
    packageFragments('kotlin.io': FqName@79) = null
    packageFragments('kotlin.jvm': FqName@80) = null
    topLevelClasses(JavaClassImpl@81['C']) = LazyJavaClassDescriptor@0['C']
}

LazyJavaPackageFragment@68['a'] {
    classes('C': Name@82) = LazyJavaClassDescriptor@0['C'] // through LazyPackageFragmentScopeForJavaPackage@83
    deserializedPackageScope = Empty@84 // through LazyPackageFragmentScopeForJavaPackage@83
    functions('C': Name@85) = EmptyList@8[empty] // through LazyPackageFragmentScopeForJavaPackage@83
    memberIndex = computeMemberIndex$1@86 // through LazyPackageFragmentScopeForJavaPackage@83
}

LazyJavaPackageFragment@73['java'] {
    classes('lang': Name@87) = null // through LazyPackageFragmentScopeForJavaPackage@88
    deserializedPackageScope = Empty@84 // through LazyPackageFragmentScopeForJavaPackage@88
    functions('lang': Name@89) = EmptyList@8[empty] // through LazyPackageFragmentScopeForJavaPackage@88
    memberIndex = computeMemberIndex$1@90 // through LazyPackageFragmentScopeForJavaPackage@88
}

LazyJavaPackageFragment@75['lang'] {
    deserializedPackageScope = Empty@84 // through LazyPackageFragmentScopeForJavaPackage@91
}

LazyJavaTypeParameterDescriptor@18['B'] {
    defaultType = JetTypeImpl@92['B']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@25
    upperBounds = LinkedHashSet@93[1] { DelegatingFlexibleType@94 }
    upperBoundsAsType = DelegatingFlexibleType@94
}

LazyJavaTypeParameterResolver@95 {
    resolve(JavaTypeParameterImpl@96['B']) = LazyJavaTypeParameterDescriptor@18['B']
}

ResolutionTaskHolder@97 {
    <name not found> = ArrayList@98[1] { ResolutionCandidate@99 }
    <name not found> = ArrayList@100[1] { ResolutionCandidate@99 }
    <name not found> = EmptyList@8[empty]
    <name not found> = EmptyList@8[empty]
    <name not found> = EmptyList@8[empty]
    <name not found> = EmptyList@8[empty]
}

ResolutionTaskHolder@101 {
    <name not found> = ArrayList@102[1] { ResolutionCandidate@103 }
    <name not found> = ArrayList@104[1] { ResolutionCandidate@103 }
}

ResolutionTaskHolder@105 {
    <name not found> = EmptyList@8[empty]
    <name not found> = EmptyList@8[empty]
    <name not found> = EmptyList@8[empty]
    <name not found> = EmptyList@8[empty]
    <name not found> = EmptyList@8[empty]
    <name not found> = EmptyList@8[empty]
    <name not found> = EmptyList@8[empty]
    <name not found> = EmptyList@8[empty]
    <name not found> = EmptyList@8[empty]
    <name not found> = EmptyList@8[empty]
}
