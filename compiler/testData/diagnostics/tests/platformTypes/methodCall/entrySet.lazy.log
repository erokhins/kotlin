LazyJavaClassDescriptor@0['MultiMap'] {
    constructors = ArrayList@1[1] { JavaConstructorDescriptor@2['<init>'] } // through LazyJavaClassMemberScope@3
    defaultType = JetTypeImpl@4['MultiMap<2>']
    enumEntryIndex = LinkedHashMap@5 // through LazyJavaClassMemberScope@3
    functionTypeForSamInterface = null
    functions('entrySet': Name@6) = ArrayList@7[1] { JavaMethodDescriptor@8['entrySet'] } // through LazyJavaClassMemberScope@3
    memberIndex = computeMemberIndex$1@9 // through LazyJavaClassMemberScope@3
    nestedClassIndex = LinkedHashMap@10 // through LazyJavaClassMemberScope@3
    nestedClasses('entrySet': Name@6) = null // through LazyJavaClassMemberScope@3
    thisAsReceiverParameter = LazyClassReceiverParameterDescriptor@11['<this>']
    typeConstructor = LazyJavaClassTypeConstructor@12['MultiMap']
}

LazyJavaClassTypeConstructor@12['MultiMap'] {
    parameters = ArrayList@13[2] { LazyJavaTypeParameterDescriptor@14['K'], LazyJavaTypeParameterDescriptor@15['V'] }
    supertypes = ArrayList@16[1] { JetTypeImpl@17['Any'] }
}

LazyJavaClassifierType@18['Collection<V>'] {
    arguments = ArrayList@19[1] { TypeProjectionImpl@20 }
    classifier = JavaClassImpl@21['Collection']
    memberScope = SubstitutingScope@22
    nullable = 'false': Boolean@23
    typeConstructor = DeserializedClassTypeConstructor@24
}

LazyJavaClassifierType@25['Collection<V>'] {
    arguments = ArrayList@26[1] { TypeProjectionImpl@27 }
    classifier = JavaClassImpl@28['Collection']
    memberScope = SubstitutingScope@29
    nullable = 'false': Boolean@23
    typeConstructor = DeserializedClassTypeConstructor@24
}

LazyJavaClassifierType@30['Collection<V>'] {
    arguments = ArrayList@31[1] { TypeProjectionImpl@32 }
    classifier = JavaClassImpl@21['Collection']
    memberScope = SubstitutingScope@33
    nullable = 'true': Boolean@34
    typeConstructor = DeserializedClassTypeConstructor@35
}

LazyJavaClassifierType@36['Collection<V>'] {
    arguments = ArrayList@37[1] { TypeProjectionImpl@38 }
    classifier = JavaClassImpl@28['Collection']
    memberScope = SubstitutingScope@39
    nullable = 'true': Boolean@34
    typeConstructor = DeserializedClassTypeConstructor@35
}

LazyJavaClassifierType@40['Object'] {
    classifier = JavaClassImpl@41['Object']
    typeConstructor = DeserializedClassTypeConstructor@42
}

LazyJavaClassifierType@43['Set<Collection<V>>'] {
    arguments = ArrayList@44[1] { TypeProjectionImpl@45 }
    classifier = JavaClassImpl@46['Set']
    memberScope = SubstitutingScope@47
    nullable = 'false': Boolean@23
    typeConstructor = DeserializedClassTypeConstructor@48
}

LazyJavaClassifierType@49['Set<Collection<V>>'] {
    arguments = ArrayList@50[1] { TypeProjectionImpl@51 }
    classifier = JavaClassImpl@46['Set']
    memberScope = SubstitutingScope@52
    nullable = 'true': Boolean@34
    typeConstructor = DeserializedClassTypeConstructor@53
}

LazyJavaClassifierType@54['V'] {
    arguments = ArrayList@55[empty]
    classifier = JavaTypeParameterImpl@56['V']
    nullable = 'false': Boolean@23
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@57
}

LazyJavaClassifierType@58['V'] {
    arguments = ArrayList@59[empty]
    classifier = JavaTypeParameterImpl@60['V']
    nullable = 'false': Boolean@23
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@57
}

LazyJavaClassifierType@61['V'] {
    arguments = ArrayList@62[empty]
    classifier = JavaTypeParameterImpl@63['V']
    nullable = 'false': Boolean@23
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@57
}

LazyJavaClassifierType@64['V'] {
    arguments = ArrayList@65[empty]
    classifier = JavaTypeParameterImpl@66['V']
    nullable = 'false': Boolean@23
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@57
}

LazyJavaClassifierType@67['V'] {
    arguments = ArrayList@68[empty]
    classifier = JavaTypeParameterImpl@60['V']
    nullable = 'true': Boolean@34
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@57
}

LazyJavaClassifierType@69['V'] {
    arguments = ArrayList@70[empty]
    classifier = JavaTypeParameterImpl@63['V']
    nullable = 'true': Boolean@34
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@57
}

LazyJavaClassifierType@71['V'] {
    arguments = ArrayList@72[empty]
    classifier = JavaTypeParameterImpl@66['V']
    nullable = 'true': Boolean@34
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@57
}

LazyJavaClassifierType@73['V'] {
    arguments = ArrayList@74[empty]
    classifier = JavaTypeParameterImpl@56['V']
    nullable = 'true': Boolean@34
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@57
}

LazyJavaPackageFragmentProvider@75 {
    packageFragments('<root>': FqName@76) = LazyJavaPackageFragment@77['<root>']
    packageFragments('Int': FqName@78) = null
    packageFragments('String': FqName@79) = null
    packageFragments('java': FqName@80) = LazyJavaPackageFragment@81['java']
    packageFragments('java.lang': FqName@82) = LazyJavaPackageFragment@83['lang']
    packageFragments('java.lang.Int': FqName@84) = null
    packageFragments('java.lang.String': FqName@85) = null
    packageFragments('kotlin': FqName@86) = null
    packageFragments('kotlin.Int': FqName@87) = null
    packageFragments('kotlin.String': FqName@88) = null
    packageFragments('kotlin.io': FqName@89) = null
    packageFragments('kotlin.jvm': FqName@90) = null
    packageFragments('p': FqName@91) = LazyJavaPackageFragment@92['p']
    packageFragments('p.Int': FqName@93) = null
    packageFragments('p.String': FqName@94) = null
    topLevelClasses(JavaClassImpl@95['MultiMap']) = LazyJavaClassDescriptor@0['MultiMap']
}

LazyJavaPackageFragment@77['<root>'] {
    classes('Int': Name@96) = null // through LazyPackageFragmentScopeForJavaPackage@97
    classes('MultiMap': Name@98) = null // through LazyPackageFragmentScopeForJavaPackage@97
    classes('String': Name@99) = null // through LazyPackageFragmentScopeForJavaPackage@97
    classes('p': Name@100) = null // through LazyPackageFragmentScopeForJavaPackage@97
    deserializedPackageScope = Empty@101 // through LazyPackageFragmentScopeForJavaPackage@97
    functions('MultiMap': Name@98) = EmptyList@102[empty] // through LazyPackageFragmentScopeForJavaPackage@97
    functions('p': Name@103) = EmptyList@102[empty] // through LazyPackageFragmentScopeForJavaPackage@97
    memberIndex = computeMemberIndex$1@104 // through LazyPackageFragmentScopeForJavaPackage@97
}

LazyJavaPackageFragment@81['java'] {
    classes('lang': Name@105) = null // through LazyPackageFragmentScopeForJavaPackage@106
    deserializedPackageScope = Empty@101 // through LazyPackageFragmentScopeForJavaPackage@106
    functions('lang': Name@107) = EmptyList@102[empty] // through LazyPackageFragmentScopeForJavaPackage@106
    memberIndex = computeMemberIndex$1@108 // through LazyPackageFragmentScopeForJavaPackage@106
}

LazyJavaPackageFragment@83['lang'] {
    classes('MultiMap': Name@98) = null // through LazyPackageFragmentScopeForJavaPackage@109
    deserializedPackageScope = Empty@101 // through LazyPackageFragmentScopeForJavaPackage@109
    functions('MultiMap': Name@98) = EmptyList@102[empty] // through LazyPackageFragmentScopeForJavaPackage@109
    memberIndex = computeMemberIndex$1@110 // through LazyPackageFragmentScopeForJavaPackage@109
}

LazyJavaPackageFragment@92['p'] {
    classes('Int': Name@96) = null // through LazyPackageFragmentScopeForJavaPackage@111
    classes('MultiMap': Name@98) = LazyJavaClassDescriptor@0['MultiMap'] // through LazyPackageFragmentScopeForJavaPackage@111
    classes('String': Name@99) = null // through LazyPackageFragmentScopeForJavaPackage@111
    deserializedPackageScope = Empty@101 // through LazyPackageFragmentScopeForJavaPackage@111
    functions('MultiMap': Name@98) = EmptyList@102[empty] // through LazyPackageFragmentScopeForJavaPackage@111
    memberIndex = computeMemberIndex$1@112 // through LazyPackageFragmentScopeForJavaPackage@111
}

LazyJavaTypeParameterDescriptor@14['K'] {
    defaultType = JetTypeImpl@113['K']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@114
    upperBounds = LinkedHashSet@115[1] { NullableType@116 }
}

LazyJavaTypeParameterDescriptor@15['V'] {
    defaultType = JetTypeImpl@117['V']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@57
    upperBounds = LinkedHashSet@118[1] { NullableType@119 }
}

LazyJavaTypeParameterResolver@120 {
    resolve(JavaTypeParameterImpl@121['K']) = LazyJavaTypeParameterDescriptor@14['K']
    resolve(JavaTypeParameterImpl@122['V']) = LazyJavaTypeParameterDescriptor@15['V']
}

LazyJavaTypeParameterResolver@123 {
    resolve(JavaTypeParameterImpl@60['V']) = null
}

ResolutionTaskHolder@124 {
    <name not found> = ArrayList@125[1] { ResolutionCandidate@126 }
    <name not found> = ArrayList@127[1] { ResolutionCandidate@126 }
    <name not found> = EmptyList@102[empty]
    <name not found> = EmptyList@102[empty]
    <name not found> = EmptyList@102[empty]
    <name not found> = EmptyList@102[empty]
}

ResolutionTaskHolder@128 {
    <name not found> = ArrayList@129[1] { ResolutionCandidate@130 }
    <name not found> = ArrayList@131[1] { ResolutionCandidate@130 }
}

ResolutionTaskHolder@132 {
    <name not found> = ArrayList@133[1] { ResolutionCandidate@134 }
    <name not found> = ArrayList@135[1] { ResolutionCandidate@134 }
}

ResolutionTaskHolder@136 {
    <name not found> = ArrayList@137[1] { ResolutionCandidate@138 }
    <name not found> = ArrayList@139[1] { ResolutionCandidate@138 }
}

ResolutionTaskHolder@140 {
    <name not found> = ArrayList@141[1] { ResolutionCandidate@142 }
    <name not found> = ArrayList@143[1] { ResolutionCandidate@142 }
}

ResolutionTaskHolder@144 {
    <name not found> = ArrayList@145[1] { ResolutionCandidate@146 }
    <name not found> = ArrayList@147[1] { ResolutionCandidate@146 }
}

ResolutionTaskHolder@148 {
    <name not found> = ArrayList@149[1] { ResolutionCandidate@150 }
    <name not found> = ArrayList@151[1] { ResolutionCandidate@150 }
}

ResolutionTaskHolder@152 {
    <name not found> = ArrayList@153[1] { ResolutionCandidate@154 }
    <name not found> = ArrayList@155[1] { ResolutionCandidate@154 }
}

ResolutionTaskHolder@156 {
    <name not found> = ArrayList@157[1] { ResolutionCandidate@158 }
    <name not found> = ArrayList@159[1] { ResolutionCandidate@158 }
}

ResolutionTaskHolder@160 {
    <name not found> = ArrayList@161[1] { ResolutionCandidate@162 }
    <name not found> = ArrayList@163[1] { ResolutionCandidate@162 }
}
