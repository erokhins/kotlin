LazyJavaClassDescriptor@0['AbstractMap'] {
    typeConstructor = LazyJavaClassTypeConstructor@1['AbstractMap']
}

LazyJavaClassDescriptor@2['HashMap'] {
    constructors = ArrayList@3[4] { JavaConstructorDescriptor@4['<init>'], JavaConstructorDescriptor@5['<init>'], JavaConstructorDescriptor@6['<init>'], ... } // through LazyJavaClassMemberScope@7
    defaultType = JetTypeImpl@8['HashMap<2>']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@9['HashMap']
}

LazyJavaClassDescriptor@10['Serializable'] {
    typeConstructor = LazyJavaClassTypeConstructor@11['Serializable']
}

LazyJavaClassTypeConstructor@1['AbstractMap'] {
    parameters = ArrayList@12[2] { LazyJavaTypeParameterDescriptor@13['K'], LazyJavaTypeParameterDescriptor@14['V'] }
    supertypes = ArrayList@15[1] { LazyJavaClassifierType@16['Map<K, V>'] }
}

LazyJavaClassTypeConstructor@9['HashMap'] {
    parameters = ArrayList@17[2] { LazyJavaTypeParameterDescriptor@18['K'], LazyJavaTypeParameterDescriptor@19['V'] }
    supertypes = ArrayList@20[4] { LazyJavaClassifierType@21['AbstractMap<K, V>'], LazyJavaClassifierType@22['Map<K, V>'], LazyJavaClassifierType@23['Cloneable'], ... }
}

LazyJavaClassTypeConstructor@11['Serializable'] {
    supertypes = ArrayList@24[1] { JetTypeImpl@25['Any'] }
}

LazyJavaClassifierType@21['AbstractMap<K, V>'] {
    arguments = ArrayList@26[2] { TypeProjectionImpl@27, TypeProjectionImpl@28 }
    classifier = JavaClassImpl@29['AbstractMap']
    typeConstructor = LazyJavaClassTypeConstructor@1['AbstractMap']
}

LazyJavaClassifierType@23['Cloneable'] {
    classifier = JavaClassImpl@30['Cloneable']
    typeConstructor = DeserializedClassTypeConstructor@31
}

LazyJavaClassifierType@32['K'] {
    arguments = ArrayList@33[empty]
    classifier = JavaTypeParameterImpl@34['K']
    nullable = 'false': Boolean@35
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@36
}

LazyJavaClassifierType@37['K'] {
    arguments = ArrayList@38[empty]
    classifier = JavaTypeParameterImpl@39['K']
    nullable = 'false': Boolean@35
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@36
}

LazyJavaClassifierType@40['K'] {
    arguments = ArrayList@41[empty]
    classifier = JavaTypeParameterImpl@42['K']
    nullable = 'false': Boolean@35
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@36
}

LazyJavaClassifierType@43['K'] {
    arguments = ArrayList@44[empty]
    classifier = JavaTypeParameterImpl@45['K']
    nullable = 'false': Boolean@35
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@46
}

LazyJavaClassifierType@47['K'] {
    arguments = ArrayList@48[empty]
    classifier = JavaTypeParameterImpl@39['K']
    nullable = 'true': Boolean@49
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@36
}

LazyJavaClassifierType@50['K'] {
    arguments = ArrayList@51[empty]
    classifier = JavaTypeParameterImpl@45['K']
    nullable = 'true': Boolean@49
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@46
}

LazyJavaClassifierType@52['K'] {
    arguments = ArrayList@53[empty]
    classifier = JavaTypeParameterImpl@42['K']
    nullable = 'true': Boolean@49
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@36
}

LazyJavaClassifierType@54['K'] {
    arguments = ArrayList@55[empty]
    classifier = JavaTypeParameterImpl@34['K']
    nullable = 'true': Boolean@49
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@36
}

LazyJavaClassifierType@56['Map<? extends K, ? extends V>'] {
    arguments = ArrayList@57[2] { TypeProjectionImpl@58, TypeProjectionImpl@59 }
    classifier = JavaClassImpl@60['Map']
    memberScope = SubstitutingScope@61
    nullable = 'false': Boolean@35
    typeConstructor = DeserializedClassTypeConstructor@62
}

LazyJavaClassifierType@63['Map<? extends K, ? extends V>'] {
    arguments = ArrayList@64[2] { TypeProjectionImpl@65, TypeProjectionImpl@66 }
    classifier = JavaClassImpl@60['Map']
    memberScope = SubstitutingScope@67
    nullable = 'true': Boolean@49
    typeConstructor = DeserializedClassTypeConstructor@68
}

LazyJavaClassifierType@16['Map<K, V>'] {
    arguments = ArrayList@69[2] { TypeProjectionImpl@70, TypeProjectionImpl@71 }
    classifier = JavaClassImpl@72['Map']
    typeConstructor = DeserializedClassTypeConstructor@62
}

LazyJavaClassifierType@22['Map<K, V>'] {
    classifier = JavaClassImpl@73['Map']
    typeConstructor = DeserializedClassTypeConstructor@62
}

LazyJavaClassifierType@74['Object'] {
    classifier = JavaClassImpl@75['Object']
    typeConstructor = DeserializedClassTypeConstructor@76
}

LazyJavaClassifierType@77['Object'] {
    classifier = JavaClassImpl@78['Object']
    typeConstructor = DeserializedClassTypeConstructor@76
}

LazyJavaClassifierType@79['Serializable'] {
    classifier = JavaClassImpl@80['Serializable']
    typeConstructor = LazyJavaClassTypeConstructor@11['Serializable']
}

LazyJavaClassifierType@81['V'] {
    arguments = ArrayList@82[empty]
    classifier = JavaTypeParameterImpl@83['V']
    nullable = 'false': Boolean@35
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@84
}

LazyJavaClassifierType@85['V'] {
    arguments = ArrayList@86[empty]
    classifier = JavaTypeParameterImpl@87['V']
    nullable = 'false': Boolean@35
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@88
}

LazyJavaClassifierType@89['V'] {
    arguments = ArrayList@90[empty]
    classifier = JavaTypeParameterImpl@91['V']
    nullable = 'false': Boolean@35
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@88
}

LazyJavaClassifierType@92['V'] {
    arguments = ArrayList@93[empty]
    classifier = JavaTypeParameterImpl@94['V']
    nullable = 'false': Boolean@35
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@88
}

LazyJavaClassifierType@95['V'] {
    arguments = ArrayList@96[empty]
    classifier = JavaTypeParameterImpl@91['V']
    nullable = 'true': Boolean@49
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@88
}

LazyJavaClassifierType@97['V'] {
    arguments = ArrayList@98[empty]
    classifier = JavaTypeParameterImpl@94['V']
    nullable = 'true': Boolean@49
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@88
}

LazyJavaClassifierType@99['V'] {
    arguments = ArrayList@100[empty]
    classifier = JavaTypeParameterImpl@83['V']
    nullable = 'true': Boolean@49
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@84
}

LazyJavaClassifierType@101['V'] {
    arguments = ArrayList@102[empty]
    classifier = JavaTypeParameterImpl@87['V']
    nullable = 'true': Boolean@49
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@88
}

LazyJavaPackageFragmentProvider@103 {
    packageFragments('<root>': FqName@104) = LazyJavaPackageFragment@105['<root>']
    packageFragments('Any': FqName@106) = null
    packageFragments('Map': FqName@107) = null
    packageFragments('java': FqName@108) = LazyJavaPackageFragment@109['java']
    packageFragments('java.io': FqName@110) = LazyJavaPackageFragment@111['io']
    packageFragments('java.lang': FqName@112) = LazyJavaPackageFragment@113['lang']
    packageFragments('java.lang.Any': FqName@114) = null
    packageFragments('java.lang.Map': FqName@115) = null
    packageFragments('java.util': FqName@116) = LazyJavaPackageFragment@117['util']
    packageFragments('java.util.Any': FqName@118) = null
    packageFragments('java.util.Map': FqName@119) = null
    packageFragments('kotlin': FqName@120) = null
    packageFragments('kotlin.Any': FqName@121) = null
    packageFragments('kotlin.Map': FqName@122) = null
    packageFragments('kotlin.io': FqName@123) = null
    packageFragments('kotlin.jvm': FqName@124) = null
    topLevelClasses(JavaClassImpl@29['AbstractMap']) = LazyJavaClassDescriptor@0['AbstractMap']
    topLevelClasses(JavaClassImpl@125['HashMap']) = LazyJavaClassDescriptor@2['HashMap']
    topLevelClasses(JavaClassImpl@126['Map']) = LazyJavaClassDescriptor@127['Map']
    topLevelClasses(JavaClassImpl@80['Serializable']) = LazyJavaClassDescriptor@10['Serializable']
}

LazyJavaPackageFragment@105['<root>'] {
    classes('Any': Name@128) = null // through LazyPackageFragmentScopeForJavaPackage@129
    classes('HashMap': Name@130) = null // through LazyPackageFragmentScopeForJavaPackage@129
    classes('Map': Name@131) = null // through LazyPackageFragmentScopeForJavaPackage@129
    classes('java': Name@132) = null // through LazyPackageFragmentScopeForJavaPackage@129
    classes('takeJ': Name@133) = null // through LazyPackageFragmentScopeForJavaPackage@129
    deserializedPackageScope = Empty@134 // through LazyPackageFragmentScopeForJavaPackage@129
    functions('HashMap': Name@130) = EmptyList@135[empty] // through LazyPackageFragmentScopeForJavaPackage@129
    functions('java': Name@136) = EmptyList@135[empty] // through LazyPackageFragmentScopeForJavaPackage@129
    functions('takeJ': Name@133) = EmptyList@135[empty] // through LazyPackageFragmentScopeForJavaPackage@129
    memberIndex = computeMemberIndex$1@137 // through LazyPackageFragmentScopeForJavaPackage@129
}

LazyJavaPackageFragment@109['java'] {
    classes('lang': Name@138) = null // through LazyPackageFragmentScopeForJavaPackage@139
    classes('util': Name@140) = null // through LazyPackageFragmentScopeForJavaPackage@139
    deserializedPackageScope = Empty@134 // through LazyPackageFragmentScopeForJavaPackage@139
    functions('lang': Name@141) = EmptyList@135[empty] // through LazyPackageFragmentScopeForJavaPackage@139
    functions('util': Name@142) = EmptyList@135[empty] // through LazyPackageFragmentScopeForJavaPackage@139
    memberIndex = computeMemberIndex$1@143 // through LazyPackageFragmentScopeForJavaPackage@139
}

LazyJavaPackageFragment@113['lang'] {
    classes('HashMap': Name@130) = null // through LazyPackageFragmentScopeForJavaPackage@144
    classes('takeJ': Name@133) = null // through LazyPackageFragmentScopeForJavaPackage@144
    deserializedPackageScope = Empty@134 // through LazyPackageFragmentScopeForJavaPackage@144
    functions('HashMap': Name@130) = EmptyList@135[empty] // through LazyPackageFragmentScopeForJavaPackage@144
    functions('takeJ': Name@133) = EmptyList@135[empty] // through LazyPackageFragmentScopeForJavaPackage@144
    memberIndex = computeMemberIndex$1@145 // through LazyPackageFragmentScopeForJavaPackage@144
}

LazyJavaPackageFragment@117['util'] {
    classes('Any': Name@128) = null // through LazyPackageFragmentScopeForJavaPackage@146
    classes('HashMap': Name@130) = LazyJavaClassDescriptor@2['HashMap'] // through LazyPackageFragmentScopeForJavaPackage@146
    classes('Map': Name@131) = LazyJavaClassDescriptor@127['Map'] // through LazyPackageFragmentScopeForJavaPackage@146
    classes('takeJ': Name@133) = null // through LazyPackageFragmentScopeForJavaPackage@146
    deserializedPackageScope = Empty@134 // through LazyPackageFragmentScopeForJavaPackage@146
    functions('HashMap': Name@130) = EmptyList@135[empty] // through LazyPackageFragmentScopeForJavaPackage@146
    functions('takeJ': Name@133) = EmptyList@135[empty] // through LazyPackageFragmentScopeForJavaPackage@146
    memberIndex = computeMemberIndex$1@147 // through LazyPackageFragmentScopeForJavaPackage@146
}

LazyJavaTypeParameterDescriptor@18['K'] {
    defaultType = JetTypeImpl@148['K']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@36
    upperBounds = LinkedHashSet@149[1] { NullableType@150 }
}

LazyJavaTypeParameterDescriptor@13['K'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@46
}

LazyJavaTypeParameterDescriptor@19['V'] {
    defaultType = JetTypeImpl@151['V']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@88
    upperBounds = LinkedHashSet@152[1] { NullableType@153 }
}

LazyJavaTypeParameterDescriptor@14['V'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@84
}

LazyJavaTypeParameterResolver@154 {
    resolve(JavaTypeParameterImpl@45['K']) = LazyJavaTypeParameterDescriptor@13['K']
    resolve(JavaTypeParameterImpl@83['V']) = LazyJavaTypeParameterDescriptor@14['V']
}

LazyJavaTypeParameterResolver@155 {
    resolve(JavaTypeParameterImpl@156['K']) = LazyJavaTypeParameterDescriptor@18['K']
    resolve(JavaTypeParameterImpl@157['V']) = LazyJavaTypeParameterDescriptor@19['V']
}

ResolutionTaskHolder@158 {
    <name not found> = ArrayList@159[1] { ResolutionCandidate@160 }
    <name not found> = ArrayList@161[1] { ResolutionCandidate@160 }
    <name not found> = EmptyList@135[empty]
    <name not found> = EmptyList@135[empty]
    <name not found> = EmptyList@135[empty]
    <name not found> = EmptyList@135[empty]
}

ResolutionTaskHolder@162 {
    <name not found> = ArrayList@163[4] { ResolutionCandidate@164, ResolutionCandidate@165, ResolutionCandidate@166, ... }
    <name not found> = ArrayList@167[4] { ResolutionCandidate@164, ResolutionCandidate@165, ResolutionCandidate@166, ... }
    <name not found> = EmptyList@135[empty]
    <name not found> = EmptyList@135[empty]
    <name not found> = EmptyList@135[empty]
    <name not found> = EmptyList@135[empty]
}
