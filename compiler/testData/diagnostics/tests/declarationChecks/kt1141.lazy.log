ClosureExpressionsTypingVisitor$1@0 {
    <name not found> = JetTypeImpl@1['<no name provided>']
}

ClosureExpressionsTypingVisitor$1@2 {
    <name not found> = JetTypeImpl@3['<no name provided>']
}

LazyJavaClassDescriptor@4['Runnable'] {
    allDescriptors = ArrayList@5[4] { DeserializedSimpleFunctionDescriptor@6['hashCode'], DeserializedSimpleFunctionDescriptor@7['toString'], JavaMethodDescriptor@8['run'], ... } // through LazyJavaClassMemberScope@9
    constructors = stdlib_emptyListClass@10[empty] // through LazyJavaClassMemberScope@9
    defaultType = JetTypeImpl@11['Runnable']
    enumEntryIndex = LinkedHashMap@12 // through LazyJavaClassMemberScope@9
    functions('clone': Name@13) = EmptyList@14[empty] // through LazyJavaClassMemberScope@9
    functions('equals': Name@15) = ArrayList@16[1] { DeserializedSimpleFunctionDescriptor@17['equals'] } // through LazyJavaClassMemberScope@9
    functions('finalize': Name@18) = EmptyList@14[empty] // through LazyJavaClassMemberScope@9
    functions('getClass': Name@19) = EmptyList@14[empty] // through LazyJavaClassMemberScope@9
    functions('hashCode': Name@20) = ArrayList@21[1] { DeserializedSimpleFunctionDescriptor@6['hashCode'] } // through LazyJavaClassMemberScope@9
    functions('notify': Name@22) = EmptyList@14[empty] // through LazyJavaClassMemberScope@9
    functions('notifyAll': Name@23) = EmptyList@14[empty] // through LazyJavaClassMemberScope@9
    functions('run': Name@24) = ArrayList@25[1] { JavaMethodDescriptor@8['run'] } // through LazyJavaClassMemberScope@9
    functions('toString': Name@26) = ArrayList@27[1] { DeserializedSimpleFunctionDescriptor@7['toString'] } // through LazyJavaClassMemberScope@9
    functions('wait': Name@28) = EmptyList@14[empty] // through LazyJavaClassMemberScope@9
    memberIndex = computeMemberIndex$1@29 // through LazyJavaClassMemberScope@9
    nestedClassIndex = LinkedHashMap@30 // through LazyJavaClassMemberScope@9
    thisAsReceiverParameter = LazyClassReceiverParameterDescriptor@31['<this>']
    typeConstructor = LazyJavaClassTypeConstructor@32['Runnable']
}

LazyJavaClassTypeConstructor@32['Runnable'] {
    parameters = ArrayList@33[empty]
    supertypes = ArrayList@34[1] { JetTypeImpl@35['Any'] }
}

LazyJavaClassifierType@36['Object'] {
    classifier = JavaClassImpl@37['Object']
    typeConstructor = DeserializedClassTypeConstructor@38
}

LazyJavaPackageFragmentProvider@39 {
    packageFragments('<root>': FqName@40) = LazyJavaPackageFragment@41['<root>']
    packageFragments('Runnable': FqName@42) = null
    packageFragments('SomeTrait': FqName@43) = null
    packageFragments('java': FqName@44) = LazyJavaPackageFragment@45['java']
    packageFragments('java.lang': FqName@46) = LazyJavaPackageFragment@47['lang']
    packageFragments('java.lang.Runnable': FqName@48) = null
    packageFragments('java.lang.SomeTrait': FqName@49) = null
    packageFragments('kotlin': FqName@50) = null
    packageFragments('kotlin.Runnable': FqName@51) = null
    packageFragments('kotlin.SomeTrait': FqName@52) = null
    packageFragments('kotlin.io': FqName@53) = null
    packageFragments('kotlin.jvm': FqName@54) = null
    packageFragments('kt1141': FqName@55) = null
    packageFragments('kt1141.C': FqName@56) = null
    packageFragments('kt1141.Rr': FqName@57) = null
    packageFragments('kt1141.Runnable': FqName@58) = null
    packageFragments('kt1141.SomeTrait': FqName@59) = null
    topLevelClasses(JavaClassImpl@60['Runnable']) = LazyJavaClassDescriptor@4['Runnable']
}

LazyJavaPackageFragment@45['java'] {
    classes('lang': Name@61) = null // through LazyPackageFragmentScopeForJavaPackage@62
    deserializedPackageScope = Empty@63 // through LazyPackageFragmentScopeForJavaPackage@62
    functions('lang': Name@64) = EmptyList@14[empty] // through LazyPackageFragmentScopeForJavaPackage@62
    memberIndex = computeMemberIndex$1@65 // through LazyPackageFragmentScopeForJavaPackage@62
}

LazyJavaPackageFragment@47['lang'] {
    classes('Runnable': Name@66) = LazyJavaClassDescriptor@4['Runnable'] // through LazyPackageFragmentScopeForJavaPackage@67
}

ResolutionTaskHolder@68 {
    <name not found> = ArrayList@69[1] { ResolutionCandidate@70 }
    <name not found> = ArrayList@71[1] { ResolutionCandidate@70 }
}

ResolutionTaskHolder@72 {
    <name not found> = ArrayList@73[1] { ResolutionCandidate@74 }
    <name not found> = ArrayList@75[1] { ResolutionCandidate@74 }
}
