LazyJavaClassDescriptor@0['AbstractMap'] {
    functions('set': Name@1) = EmptyList@2[empty] // through LazyJavaClassMemberScope@3
    memberIndex = computeMemberIndex$1@4 // through LazyJavaClassMemberScope@3
    properties('set': Name@1) = EmptyList@2[empty] // through LazyJavaClassMemberScope@3
    typeConstructor = LazyJavaClassTypeConstructor@5['AbstractMap']
}

LazyJavaClassDescriptor@6['HashMap'] {
    constructors = ArrayList@7[4] { JavaConstructorDescriptor@8['<init>'], JavaConstructorDescriptor@9['<init>'], JavaConstructorDescriptor@10['<init>'], ... } // through LazyJavaClassMemberScope@11
    defaultType = JetTypeImpl@12['HashMap<2>']
    enumEntryIndex = LinkedHashMap@13 // through LazyJavaClassMemberScope@11
    functionTypeForSamInterface = null
    functions('set': Name@1) = EmptyList@2[empty] // through LazyJavaClassMemberScope@11
    memberIndex = computeMemberIndex$1@14 // through LazyJavaClassMemberScope@11
    nestedClassIndex = LinkedHashMap@15 // through LazyJavaClassMemberScope@11
    nestedClasses('set': Name@1) = null // through LazyJavaClassMemberScope@11
    properties('set': Name@1) = EmptyList@2[empty] // through LazyJavaClassMemberScope@11
    typeConstructor = LazyJavaClassTypeConstructor@16['HashMap']
}

LazyJavaClassDescriptor@17['Serializable'] {
    functions('set': Name@1) = EmptyList@2[empty] // through LazyJavaClassMemberScope@18
    memberIndex = computeMemberIndex$1@19 // through LazyJavaClassMemberScope@18
    properties('set': Name@1) = EmptyList@2[empty] // through LazyJavaClassMemberScope@18
    typeConstructor = LazyJavaClassTypeConstructor@20['Serializable']
}

LazyJavaClassTypeConstructor@5['AbstractMap'] {
    parameters = ArrayList@21[2] { LazyJavaTypeParameterDescriptor@22['K'], LazyJavaTypeParameterDescriptor@23['V'] }
    supertypes = ArrayList@24[1] { LazyJavaClassifierType@25['Map<K, V>'] }
}

LazyJavaClassTypeConstructor@16['HashMap'] {
    parameters = ArrayList@26[2] { LazyJavaTypeParameterDescriptor@27['K'], LazyJavaTypeParameterDescriptor@28['V'] }
    supertypes = ArrayList@29[4] { LazyJavaClassifierType@30['AbstractMap<K, V>'], LazyJavaClassifierType@31['Map<K, V>'], LazyJavaClassifierType@32['Cloneable'], ... }
}

LazyJavaClassTypeConstructor@20['Serializable'] {
    parameters = ArrayList@33[empty]
    supertypes = ArrayList@34[1] { JetTypeImpl@35['Any'] }
}

LazyJavaClassifierType@30['AbstractMap<K, V>'] {
    arguments = ArrayList@36[2] { TypeProjectionImpl@37, TypeProjectionImpl@38 }
    classifier = JavaClassImpl@39['AbstractMap']
    memberScope = SubstitutingScope@40
    typeConstructor = LazyJavaClassTypeConstructor@5['AbstractMap']
}

LazyJavaClassifierType@32['Cloneable'] {
    arguments = ArrayList@41[empty]
    classifier = JavaClassImpl@42['Cloneable']
    memberScope = DeserializedClassMemberScope@43
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@45['K'] {
    arguments = ArrayList@46[empty]
    classifier = JavaTypeParameterImpl@47['K']
    nullable = 'false': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@49
}

LazyJavaClassifierType@50['K'] {
    arguments = ArrayList@51[empty]
    classifier = JavaTypeParameterImpl@52['K']
    nullable = 'false': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@54['K'] {
    arguments = ArrayList@55[empty]
    classifier = JavaTypeParameterImpl@56['K']
    nullable = 'false': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@57['K'] {
    arguments = ArrayList@58[empty]
    classifier = JavaTypeParameterImpl@59['K']
    nullable = 'false': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@60['K'] {
    arguments = ArrayList@61[empty]
    classifier = JavaTypeParameterImpl@62['K']
    nullable = 'false': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@63['K'] {
    arguments = ArrayList@64[empty]
    classifier = JavaTypeParameterImpl@62['K']
    nullable = 'true': Boolean@65
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@66['K'] {
    arguments = ArrayList@67[empty]
    classifier = JavaTypeParameterImpl@52['K']
    nullable = 'true': Boolean@65
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@68['K'] {
    arguments = ArrayList@69[empty]
    classifier = JavaTypeParameterImpl@56['K']
    nullable = 'true': Boolean@65
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@70['K'] {
    arguments = ArrayList@71[empty]
    classifier = JavaTypeParameterImpl@47['K']
    nullable = 'true': Boolean@65
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@49
}

LazyJavaClassifierType@72['K'] {
    arguments = ArrayList@73[empty]
    classifier = JavaTypeParameterImpl@59['K']
    nullable = 'true': Boolean@65
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
}

LazyJavaClassifierType@74['Map<? extends K, ? extends V>'] {
    arguments = ArrayList@75[2] { TypeProjectionImpl@76, TypeProjectionImpl@77 }
    classifier = JavaClassImpl@78['Map']
    memberScope = SubstitutingScope@79
    nullable = 'false': Boolean@48
    typeConstructor = DeserializedClassTypeConstructor@80
}

LazyJavaClassifierType@81['Map<? extends K, ? extends V>'] {
    arguments = ArrayList@82[2] { TypeProjectionImpl@83, TypeProjectionImpl@84 }
    classifier = JavaClassImpl@78['Map']
    memberScope = SubstitutingScope@85
    nullable = 'true': Boolean@65
    typeConstructor = DeserializedClassTypeConstructor@86
}

LazyJavaClassifierType@25['Map<K, V>'] {
    arguments = ArrayList@87[2] { TypeProjectionImpl@88, TypeProjectionImpl@89 }
    classifier = JavaClassImpl@90['Map']
    memberScope = SubstitutingScope@91
    nullable = 'false': Boolean@48
    typeConstructor = DeserializedClassTypeConstructor@80
}

LazyJavaClassifierType@31['Map<K, V>'] {
    arguments = ArrayList@92[2] { TypeProjectionImpl@93, TypeProjectionImpl@94 }
    classifier = JavaClassImpl@95['Map']
    memberScope = SubstitutingScope@96
    typeConstructor = DeserializedClassTypeConstructor@80
}

LazyJavaClassifierType@97['Object'] {
    classifier = JavaClassImpl@98['Object']
    typeConstructor = DeserializedClassTypeConstructor@99
}

LazyJavaClassifierType@100['Object'] {
    classifier = JavaClassImpl@101['Object']
    typeConstructor = DeserializedClassTypeConstructor@99
}

LazyJavaClassifierType@102['Serializable'] {
    arguments = ArrayList@103[empty]
    classifier = JavaClassImpl@104['Serializable']
    memberScope = LazyJavaClassMemberScope@18
    typeConstructor = LazyJavaClassTypeConstructor@20['Serializable']
}

LazyJavaClassifierType@105['V'] {
    arguments = ArrayList@106[empty]
    classifier = JavaTypeParameterImpl@107['V']
    nullable = 'false': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@108
}

LazyJavaClassifierType@109['V'] {
    arguments = ArrayList@110[empty]
    classifier = JavaTypeParameterImpl@111['V']
    nullable = 'false': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@108
}

LazyJavaClassifierType@112['V'] {
    arguments = ArrayList@113[empty]
    classifier = JavaTypeParameterImpl@114['V']
    nullable = 'false': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@108
}

LazyJavaClassifierType@115['V'] {
    arguments = ArrayList@116[empty]
    classifier = JavaTypeParameterImpl@117['V']
    nullable = 'false': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@118
}

LazyJavaClassifierType@119['V'] {
    arguments = ArrayList@120[empty]
    classifier = JavaTypeParameterImpl@121['V']
    nullable = 'false': Boolean@48
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@108
}

LazyJavaClassifierType@122['V'] {
    arguments = ArrayList@123[empty]
    classifier = JavaTypeParameterImpl@114['V']
    nullable = 'true': Boolean@65
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@108
}

LazyJavaClassifierType@124['V'] {
    arguments = ArrayList@125[empty]
    classifier = JavaTypeParameterImpl@121['V']
    nullable = 'true': Boolean@65
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@108
}

LazyJavaClassifierType@126['V'] {
    arguments = ArrayList@127[empty]
    classifier = JavaTypeParameterImpl@111['V']
    nullable = 'true': Boolean@65
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@108
}

LazyJavaClassifierType@128['V'] {
    arguments = ArrayList@129[empty]
    classifier = JavaTypeParameterImpl@107['V']
    nullable = 'true': Boolean@65
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@108
}

LazyJavaClassifierType@130['V'] {
    arguments = ArrayList@131[empty]
    classifier = JavaTypeParameterImpl@117['V']
    nullable = 'true': Boolean@65
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@118
}

LazyJavaPackageFragmentProvider@132 {
    packageFragments('<root>': FqName@133) = LazyJavaPackageFragment@134['<root>']
    packageFragments('HashMap': FqName@135) = null
    packageFragments('K': FqName@136) = null
    packageFragments('MutableMap': FqName@137) = null
    packageFragments('String': FqName@138) = null
    packageFragments('V': FqName@139) = null
    packageFragments('java': FqName@140) = LazyJavaPackageFragment@141['java']
    packageFragments('java.io': FqName@142) = LazyJavaPackageFragment@143['io']
    packageFragments('java.lang': FqName@144) = LazyJavaPackageFragment@145['lang']
    packageFragments('java.lang.HashMap': FqName@146) = null
    packageFragments('java.lang.K': FqName@147) = null
    packageFragments('java.lang.MutableMap': FqName@148) = null
    packageFragments('java.lang.String': FqName@149) = null
    packageFragments('java.lang.V': FqName@150) = null
    packageFragments('java.util': FqName@151) = LazyJavaPackageFragment@152['util']
    packageFragments('java.util.HashMap': FqName@153) = null
    packageFragments('java.util.K': FqName@154) = null
    packageFragments('java.util.MutableMap': FqName@155) = null
    packageFragments('java.util.String': FqName@156) = null
    packageFragments('java.util.V': FqName@157) = null
    packageFragments('kotlin': FqName@158) = null
    packageFragments('kotlin.HashMap': FqName@159) = null
    packageFragments('kotlin.K': FqName@160) = null
    packageFragments('kotlin.MutableMap': FqName@161) = null
    packageFragments('kotlin.String': FqName@162) = null
    packageFragments('kotlin.V': FqName@163) = null
    packageFragments('kotlin.io': FqName@164) = null
    packageFragments('kotlin.jvm': FqName@165) = null
    topLevelClasses(JavaClassImpl@39['AbstractMap']) = LazyJavaClassDescriptor@0['AbstractMap']
    topLevelClasses(JavaClassImpl@166['HashMap']) = LazyJavaClassDescriptor@6['HashMap']
    topLevelClasses(JavaClassImpl@104['Serializable']) = LazyJavaClassDescriptor@17['Serializable']
}

LazyJavaPackageFragment@134['<root>'] {
    classes('HashMap': Name@167) = null // through LazyPackageFragmentScopeForJavaPackage@168
    classes('MutableMap': Name@169) = null // through LazyPackageFragmentScopeForJavaPackage@168
    classes('String': Name@170) = null // through LazyPackageFragmentScopeForJavaPackage@168
    classes('java': Name@171) = null // through LazyPackageFragmentScopeForJavaPackage@168
    classes('set': Name@1) = null // through LazyPackageFragmentScopeForJavaPackage@168
    deserializedPackageScope = Empty@172 // through LazyPackageFragmentScopeForJavaPackage@168
    functions('HashMap': Name@173) = EmptyList@2[empty] // through LazyPackageFragmentScopeForJavaPackage@168
    functions('java': Name@174) = EmptyList@2[empty] // through LazyPackageFragmentScopeForJavaPackage@168
    functions('set': Name@1) = EmptyList@2[empty] // through LazyPackageFragmentScopeForJavaPackage@168
    memberIndex = computeMemberIndex$1@175 // through LazyPackageFragmentScopeForJavaPackage@168
}

LazyJavaPackageFragment@141['java'] {
    classes('lang': Name@176) = null // through LazyPackageFragmentScopeForJavaPackage@177
    classes('util': Name@178) = null // through LazyPackageFragmentScopeForJavaPackage@177
    deserializedPackageScope = Empty@172 // through LazyPackageFragmentScopeForJavaPackage@177
    functions('lang': Name@179) = EmptyList@2[empty] // through LazyPackageFragmentScopeForJavaPackage@177
    functions('util': Name@180) = EmptyList@2[empty] // through LazyPackageFragmentScopeForJavaPackage@177
    memberIndex = computeMemberIndex$1@181 // through LazyPackageFragmentScopeForJavaPackage@177
}

LazyJavaPackageFragment@145['lang'] {
    classes('HashMap': Name@173) = null // through LazyPackageFragmentScopeForJavaPackage@182
    classes('set': Name@1) = null // through LazyPackageFragmentScopeForJavaPackage@182
    deserializedPackageScope = Empty@172 // through LazyPackageFragmentScopeForJavaPackage@182
    functions('HashMap': Name@173) = EmptyList@2[empty] // through LazyPackageFragmentScopeForJavaPackage@182
    functions('set': Name@1) = EmptyList@2[empty] // through LazyPackageFragmentScopeForJavaPackage@182
    memberIndex = computeMemberIndex$1@183 // through LazyPackageFragmentScopeForJavaPackage@182
}

LazyJavaPackageFragment@152['util'] {
    classes('HashMap': Name@167) = LazyJavaClassDescriptor@6['HashMap'] // through LazyPackageFragmentScopeForJavaPackage@184
    classes('MutableMap': Name@169) = null // through LazyPackageFragmentScopeForJavaPackage@184
    classes('String': Name@170) = null // through LazyPackageFragmentScopeForJavaPackage@184
    classes('set': Name@1) = null // through LazyPackageFragmentScopeForJavaPackage@184
    deserializedPackageScope = Empty@172 // through LazyPackageFragmentScopeForJavaPackage@184
    functions('HashMap': Name@173) = EmptyList@2[empty] // through LazyPackageFragmentScopeForJavaPackage@184
    functions('set': Name@1) = EmptyList@2[empty] // through LazyPackageFragmentScopeForJavaPackage@184
    memberIndex = computeMemberIndex$1@185 // through LazyPackageFragmentScopeForJavaPackage@184
}

LazyJavaTypeParameterDescriptor@27['K'] {
    defaultType = JetTypeImpl@186['K']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@53
    upperBounds = LinkedHashSet@187[1] { NullableType@188 }
}

LazyJavaTypeParameterDescriptor@22['K'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@49
}

LazyJavaTypeParameterDescriptor@28['V'] {
    defaultType = JetTypeImpl@189['V']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@108
    upperBounds = LinkedHashSet@190[1] { NullableType@191 }
}

LazyJavaTypeParameterDescriptor@23['V'] {
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@118
}

LazyJavaTypeParameterResolver@192 {
    resolve(JavaTypeParameterImpl@193['K']) = LazyJavaTypeParameterDescriptor@22['K']
    resolve(JavaTypeParameterImpl@194['V']) = LazyJavaTypeParameterDescriptor@23['V']
}

LazyJavaTypeParameterResolver@195 {
    resolve(JavaTypeParameterImpl@196['K']) = LazyJavaTypeParameterDescriptor@27['K']
    resolve(JavaTypeParameterImpl@197['V']) = LazyJavaTypeParameterDescriptor@28['V']
}

ResolutionTaskHolder@198 {
    <name not found> = ArrayList@199[1] { ResolutionCandidate@200 }
    <name not found> = ArrayList@201[1] { ResolutionCandidate@200 }
    <name not found> = EmptyList@2[empty]
    <name not found> = EmptyList@2[empty]
    <name not found> = EmptyList@2[empty]
    <name not found> = EmptyList@2[empty]
}

ResolutionTaskHolder@202 {
    <name not found> = ArrayList@203[1] { ResolutionCandidate@204 }
    <name not found> = ArrayList@205[1] { ResolutionCandidate@204 }
}

ResolutionTaskHolder@206 {
    <name not found> = ArrayList@207[4] { ResolutionCandidate@208, ResolutionCandidate@209, ResolutionCandidate@210, ... }
    <name not found> = ArrayList@211[4] { ResolutionCandidate@208, ResolutionCandidate@209, ResolutionCandidate@210, ... }
    <name not found> = EmptyList@2[empty]
    <name not found> = EmptyList@2[empty]
    <name not found> = EmptyList@2[empty]
    <name not found> = EmptyList@2[empty]
}
