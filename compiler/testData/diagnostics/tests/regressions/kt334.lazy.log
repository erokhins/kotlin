LazyJavaClassDescriptor@0['Comparable'] {
    allDescriptors = ArrayList@1[4] { DeserializedSimpleFunctionDescriptor@2['hashCode'], DeserializedSimpleFunctionDescriptor@3['toString'], DeserializedSimpleFunctionDescriptor@4['equals'], ... } // through LazyJavaClassMemberScope@5
    annotations = LazyJavaAnnotations@6
    defaultType = JetTypeImpl@7['Comparable<1>']
    enumEntryIndex = LinkedHashMap@8 // through LazyJavaClassMemberScope@5
    functionTypeForSamInterface = JetTypeImpl@9['Function1<2>']
    functions('clone': Name@10) = EmptyList@11[empty] // through LazyJavaClassMemberScope@5
    functions('compareTo': Name@12) = ArrayList@13[1] { JavaMethodDescriptor@14['compareTo'] } // through LazyJavaClassMemberScope@5
    functions('equals': Name@15) = ArrayList@16[1] { DeserializedSimpleFunctionDescriptor@4['equals'] } // through LazyJavaClassMemberScope@5
    functions('finalize': Name@17) = EmptyList@11[empty] // through LazyJavaClassMemberScope@5
    functions('getClass': Name@18) = EmptyList@11[empty] // through LazyJavaClassMemberScope@5
    functions('hashCode': Name@19) = ArrayList@20[1] { DeserializedSimpleFunctionDescriptor@2['hashCode'] } // through LazyJavaClassMemberScope@5
    functions('notify': Name@21) = EmptyList@11[empty] // through LazyJavaClassMemberScope@5
    functions('notifyAll': Name@22) = EmptyList@11[empty] // through LazyJavaClassMemberScope@5
    functions('toString': Name@23) = ArrayList@24[1] { DeserializedSimpleFunctionDescriptor@3['toString'] } // through LazyJavaClassMemberScope@5
    functions('wait': Name@25) = EmptyList@11[empty] // through LazyJavaClassMemberScope@5
    memberIndex = computeMemberIndex$1@26 // through LazyJavaClassMemberScope@5
    nestedClassIndex = LinkedHashMap@27 // through LazyJavaClassMemberScope@5
    thisAsReceiverParameter = LazyClassReceiverParameterDescriptor@28['<this>']
    typeConstructor = LazyJavaClassTypeConstructor@29['Comparable']
}

LazyJavaClassTypeConstructor@29['Comparable'] {
    parameters = ArrayList@30[1] { LazyJavaTypeParameterDescriptor@31['T'] }
    supertypes = ArrayList@32[1] { JetTypeImpl@33['Any'] }
}

LazyJavaClassifierType@34['Object'] {
    classifier = JavaClassImpl@35['Object']
    typeConstructor = DeserializedClassTypeConstructor@36
}

LazyJavaClassifierType@37['T'] {
    arguments = ArrayList@38[empty]
    classifier = JavaTypeParameterImpl@39['T']
    nullable = 'false': Boolean@40
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@41
}

LazyJavaClassifierType@42['T'] {
    arguments = ArrayList@43[empty]
    classifier = JavaTypeParameterImpl@44['T']
    nullable = 'false': Boolean@40
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@41
}

LazyJavaClassifierType@45['T'] {
    arguments = ArrayList@46[empty]
    classifier = JavaTypeParameterImpl@44['T']
    nullable = 'true': Boolean@47
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@41
}

LazyJavaClassifierType@48['T'] {
    arguments = ArrayList@49[empty]
    classifier = JavaTypeParameterImpl@39['T']
    nullable = 'true': Boolean@47
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@41
}

LazyJavaPackageFragmentProvider@50 {
    packageFragments('<root>': FqName@51) = LazyJavaPackageFragment@52['<root>']
    packageFragments('Comparable': FqName@53) = null
    packageFragments('java': FqName@54) = LazyJavaPackageFragment@55['java']
    packageFragments('java.lang': FqName@56) = LazyJavaPackageFragment@57['lang']
    packageFragments('java.lang.Comparable': FqName@58) = null
    packageFragments('kotlin': FqName@59) = null
    packageFragments('kotlin.Comparable': FqName@60) = null
    packageFragments('kotlin.io': FqName@61) = null
    packageFragments('kotlin.jvm': FqName@62) = null
    topLevelClasses(JavaClassImpl@63['Comparable']) = LazyJavaClassDescriptor@0['Comparable']
}

LazyJavaPackageFragment@52['<root>'] {
    classes('Comparable': Name@64) = null // through LazyPackageFragmentScopeForJavaPackage@65
    classes('java': Name@66) = null // through LazyPackageFragmentScopeForJavaPackage@65
    classes('kotlin': Name@67) = null // through LazyPackageFragmentScopeForJavaPackage@65
    deserializedPackageScope = Empty@68 // through LazyPackageFragmentScopeForJavaPackage@65
    functions('java': Name@69) = EmptyList@11[empty] // through LazyPackageFragmentScopeForJavaPackage@65
    memberIndex = computeMemberIndex$1@70 // through LazyPackageFragmentScopeForJavaPackage@65
}

LazyJavaPackageFragment@55['java'] {
    classes('lang': Name@71) = null // through LazyPackageFragmentScopeForJavaPackage@72
    deserializedPackageScope = Empty@68 // through LazyPackageFragmentScopeForJavaPackage@72
    functions('lang': Name@73) = EmptyList@11[empty] // through LazyPackageFragmentScopeForJavaPackage@72
    memberIndex = computeMemberIndex$1@74 // through LazyPackageFragmentScopeForJavaPackage@72
}

LazyJavaPackageFragment@57['lang'] {
    classes('Comparable': Name@75) = LazyJavaClassDescriptor@0['Comparable'] // through LazyPackageFragmentScopeForJavaPackage@76
    classes('java': Name@77) = null // through LazyPackageFragmentScopeForJavaPackage@76
    classes('kotlin': Name@67) = null // through LazyPackageFragmentScopeForJavaPackage@76
    deserializedPackageScope = Empty@68 // through LazyPackageFragmentScopeForJavaPackage@76
    functions('Comparable': Name@78) = ArrayList@79[1] { SamConstructorDescriptor@80['Comparable'] } // through LazyPackageFragmentScopeForJavaPackage@76
    memberIndex = computeMemberIndex$1@81 // through LazyPackageFragmentScopeForJavaPackage@76
}

LazyJavaTypeParameterDescriptor@31['T'] {
    defaultType = JetTypeImpl@82['T']
    typeConstructor = AbstractLazyTypeParameterDescriptor$1@41
    upperBounds = LinkedHashSet@83[1] { NullableType@84 }
    upperBoundsAsType = NullableType@84
}

LazyJavaTypeParameterResolver@85 {
    resolve(JavaTypeParameterImpl@86['T']) = LazyJavaTypeParameterDescriptor@31['T']
}

LazyJavaTypeParameterResolver@87 {
    resolve(JavaTypeParameterImpl@39['T']) = null
}

LazyJavaTypeParameterResolver@88 {
    resolve(JavaTypeParameterImpl@44['T']) = null
}

ResolutionTaskHolder@89 {
    <name not found> = ArrayList@90[1] { ResolutionCandidate@91 }
    <name not found> = ArrayList@92[1] { ResolutionCandidate@91 }
}

ResolutionTaskHolder@93 {
    <name not found> = ArrayList@94[1] { ResolutionCandidate@95 }
    <name not found> = ArrayList@96[1] { ResolutionCandidate@95 }
}
