DescriptorResolver@0 {
    <name not found> = IntValue@1
}

LazyJavaClassDescriptor@2['Exception'] {
    typeConstructor = LazyJavaClassTypeConstructor@3['Exception']
}

LazyJavaClassDescriptor@4['RuntimeException'] {
    typeConstructor = LazyJavaClassTypeConstructor@5['RuntimeException']
}

LazyJavaClassDescriptor@6['UnsupportedOperationException'] {
    constructors = ArrayList@7[4] { JavaConstructorDescriptor@8['<init>'], JavaConstructorDescriptor@9['<init>'], JavaConstructorDescriptor@10['<init>'], ... } // through LazyJavaClassMemberScope@11
    defaultType = JetTypeImpl@12['UnsupportedOperationException']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@13['UnsupportedOperationException']
}

LazyJavaClassTypeConstructor@3['Exception'] {
    parameters = ArrayList@14[empty]
    supertypes = ArrayList@15[1] { LazyJavaClassifierType@16['Throwable'] }
}

LazyJavaClassTypeConstructor@5['RuntimeException'] {
    parameters = ArrayList@17[empty]
    supertypes = ArrayList@18[1] { LazyJavaClassifierType@19['Exception'] }
}

LazyJavaClassTypeConstructor@13['UnsupportedOperationException'] {
    parameters = ArrayList@20[empty]
    supertypes = ArrayList@21[1] { LazyJavaClassifierType@22['RuntimeException'] }
}

LazyJavaClassifierType@19['Exception'] {
    arguments = ArrayList@23[empty]
    classifier = JavaClassImpl@24['Exception']
    typeConstructor = LazyJavaClassTypeConstructor@3['Exception']
}

LazyJavaClassifierType@22['RuntimeException'] {
    arguments = ArrayList@25[empty]
    classifier = JavaClassImpl@26['RuntimeException']
    typeConstructor = LazyJavaClassTypeConstructor@5['RuntimeException']
}

LazyJavaClassifierType@27['String'] {
    arguments = ArrayList@28[empty]
    classifier = JavaClassImpl@29['String']
    nullable = 'false': Boolean@30
    typeConstructor = DeserializedClassTypeConstructor@31
}

LazyJavaClassifierType@32['String'] {
    arguments = ArrayList@33[empty]
    classifier = JavaClassImpl@34['String']
    nullable = 'false': Boolean@30
    typeConstructor = DeserializedClassTypeConstructor@31
}

LazyJavaClassifierType@35['String'] {
    arguments = ArrayList@36[empty]
    classifier = JavaClassImpl@29['String']
    nullable = 'true': Boolean@37
    typeConstructor = DeserializedClassTypeConstructor@31
}

LazyJavaClassifierType@38['String'] {
    arguments = ArrayList@39[empty]
    classifier = JavaClassImpl@34['String']
    nullable = 'true': Boolean@37
    typeConstructor = DeserializedClassTypeConstructor@31
}

LazyJavaClassifierType@40['Throwable'] {
    arguments = ArrayList@41[empty]
    classifier = JavaClassImpl@42['Throwable']
    nullable = 'false': Boolean@30
    typeConstructor = DeserializedClassTypeConstructor@43
}

LazyJavaClassifierType@44['Throwable'] {
    arguments = ArrayList@45[empty]
    classifier = JavaClassImpl@46['Throwable']
    nullable = 'false': Boolean@30
    typeConstructor = DeserializedClassTypeConstructor@43
}

LazyJavaClassifierType@47['Throwable'] {
    arguments = ArrayList@48[empty]
    classifier = JavaClassImpl@46['Throwable']
    nullable = 'true': Boolean@37
    typeConstructor = DeserializedClassTypeConstructor@43
}

LazyJavaClassifierType@49['Throwable'] {
    arguments = ArrayList@50[empty]
    classifier = JavaClassImpl@42['Throwable']
    nullable = 'true': Boolean@37
    typeConstructor = DeserializedClassTypeConstructor@43
}

LazyJavaClassifierType@16['Throwable'] {
    arguments = ArrayList@51[empty]
    classifier = JavaClassImpl@52['Throwable']
    typeConstructor = DeserializedClassTypeConstructor@43
}

LazyJavaPackageFragmentProvider@53 {
    packageFragments('<root>': FqName@54) = LazyJavaPackageFragment@55['<root>']
    packageFragments('Boolean': FqName@56) = null
    packageFragments('Int': FqName@57) = null
    packageFragments('Iterable': FqName@58) = null
    packageFragments('Iterator': FqName@59) = null
    packageFragments('MyIterable': FqName@60) = null
    packageFragments('T': FqName@61) = null
    packageFragments('X': FqName@62) = null
    packageFragments('Y': FqName@63) = null
    packageFragments('Y1': FqName@64) = null
    packageFragments('Z': FqName@65) = null
    packageFragments('java': FqName@66) = LazyJavaPackageFragment@67['java']
    packageFragments('java.lang': FqName@68) = LazyJavaPackageFragment@69['lang']
    packageFragments('java.lang.Boolean': FqName@70) = null
    packageFragments('java.lang.Int': FqName@71) = null
    packageFragments('java.lang.Iterable': FqName@72) = null
    packageFragments('java.lang.Iterator': FqName@73) = null
    packageFragments('java.lang.T': FqName@74) = null
    packageFragments('java.lang.Y': FqName@75) = null
    packageFragments('kotlin': FqName@76) = null
    packageFragments('kotlin.Boolean': FqName@77) = null
    packageFragments('kotlin.Int': FqName@78) = null
    packageFragments('kotlin.Iterable': FqName@79) = null
    packageFragments('kotlin.Iterator': FqName@80) = null
    packageFragments('kotlin.T': FqName@81) = null
    packageFragments('kotlin.Y': FqName@82) = null
    packageFragments('kotlin.io': FqName@83) = null
    packageFragments('kotlin.jvm': FqName@84) = null
    topLevelClasses(JavaClassImpl@24['Exception']) = LazyJavaClassDescriptor@2['Exception']
    topLevelClasses(JavaClassImpl@26['RuntimeException']) = LazyJavaClassDescriptor@4['RuntimeException']
    topLevelClasses(JavaClassImpl@85['UnsupportedOperationException']) = LazyJavaClassDescriptor@6['UnsupportedOperationException']
}

LazyJavaPackageFragment@55['<root>'] {
    classes('Boolean': Name@86) = null // through LazyPackageFragmentScopeForJavaPackage@87
    classes('Int': Name@88) = null // through LazyPackageFragmentScopeForJavaPackage@87
    classes('Iterable': Name@89) = null // through LazyPackageFragmentScopeForJavaPackage@87
    classes('Iterator': Name@90) = null // through LazyPackageFragmentScopeForJavaPackage@87
    classes('MyIterator': Name@91) = null // through LazyPackageFragmentScopeForJavaPackage@87
    classes('UnsupportedOperationException': Name@92) = null // through LazyPackageFragmentScopeForJavaPackage@87
    deserializedPackageScope = Empty@93 // through LazyPackageFragmentScopeForJavaPackage@87
    functions('MyIterator': Name@91) = EmptyList@94[empty] // through LazyPackageFragmentScopeForJavaPackage@87
    functions('UnsupportedOperationException': Name@92) = EmptyList@94[empty] // through LazyPackageFragmentScopeForJavaPackage@87
    memberIndex = computeMemberIndex$1@95 // through LazyPackageFragmentScopeForJavaPackage@87
}

LazyJavaPackageFragment@67['java'] {
    classes('lang': Name@96) = null // through LazyPackageFragmentScopeForJavaPackage@97
    deserializedPackageScope = Empty@93 // through LazyPackageFragmentScopeForJavaPackage@97
    functions('lang': Name@98) = EmptyList@94[empty] // through LazyPackageFragmentScopeForJavaPackage@97
    memberIndex = computeMemberIndex$1@99 // through LazyPackageFragmentScopeForJavaPackage@97
}

LazyJavaPackageFragment@69['lang'] {
    classes('MyIterator': Name@91) = null // through LazyPackageFragmentScopeForJavaPackage@100
    classes('UnsupportedOperationException': Name@92) = LazyJavaClassDescriptor@6['UnsupportedOperationException'] // through LazyPackageFragmentScopeForJavaPackage@100
    deserializedPackageScope = Empty@93 // through LazyPackageFragmentScopeForJavaPackage@100
    functions('MyIterator': Name@91) = EmptyList@94[empty] // through LazyPackageFragmentScopeForJavaPackage@100
    functions('UnsupportedOperationException': Name@92) = EmptyList@94[empty] // through LazyPackageFragmentScopeForJavaPackage@100
    memberIndex = computeMemberIndex$1@101 // through LazyPackageFragmentScopeForJavaPackage@100
}

ResolutionTaskHolder@102 {
    <name not found> = ArrayList@103[1] { ResolutionCandidate@104 }
    <name not found> = ArrayList@105[1] { ResolutionCandidate@104 }
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
}

ResolutionTaskHolder@106 {
    <name not found> = ArrayList@107[1] { ResolutionCandidate@108 }
    <name not found> = ArrayList@109[1] { ResolutionCandidate@108 }
}

ResolutionTaskHolder@110 {
    <name not found> = ArrayList@111[4] { ResolutionCandidate@112, ResolutionCandidate@113, ResolutionCandidate@114, ... }
    <name not found> = ArrayList@115[4] { ResolutionCandidate@112, ResolutionCandidate@113, ResolutionCandidate@114, ... }
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
    <name not found> = EmptyList@94[empty]
}
