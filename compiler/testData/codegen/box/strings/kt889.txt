MODULE <test-module>
  FILE /kt889.kt
    FUN public operator fun kotlin.Int.plus(/*0*/ s: kotlin.String): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Unit? operator=SAFE_CALL
          VAR val tmp0_safe_receiver: java.io.PrintStream!
            GET_BACKING_FIELD out type=java.io.PrintStream! operator=GET_PROPERTY
          WHEN type=kotlin.Unit? operator=SAFE_CALL
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_safe_receiver type=java.io.PrintStream! operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CONST Null type=kotlin.Nothing? value='null'
            else: CALL .println type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.io.PrintStream
                GET_VAR tmp0_safe_receiver type=java.io.PrintStream! operator=null
              p0: CONST String type=kotlin.String value='Int.plus(s: String) called'
        RETURN type=kotlin.Nothing from=plus
          GET_VAR s type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val s: kotlin.String
          CALL .plus type=kotlin.String operator=PLUS
            $receiver: CONST Int type=kotlin.Int value='1'
            s: CONST String type=kotlin.String value='a'
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR s type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='a'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
