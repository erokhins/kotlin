MODULE <test-module>
  FILE /kt3571.kt
    CLASS CLASS Thing
      CONSTRUCTOR public constructor Thing(/*0*/ delegate: kotlin.CharSequence)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Thing
      PROPERTY val `Thing$CharSequence$delegate`: kotlin.CharSequence
        EXPRESSION_BODY
          GET_VAR delegate type=kotlin.CharSequence operator=null
      FUN public open override /*1*/ /*delegation*/ fun get(/*0*/ index: kotlin.Int): kotlin.Char
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=get
            CALL .get type=kotlin.Char operator=null
              $this: GET_VAR Thing$CharSequence$delegate type=kotlin.CharSequence operator=null
              index: GET_VAR index type=kotlin.Int operator=null
      FUN public open override /*1*/ /*delegation*/ fun subSequence(/*0*/ startIndex: kotlin.Int, /*1*/ endIndex: kotlin.Int): kotlin.CharSequence
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=subSequence
            CALL .subSequence type=kotlin.CharSequence operator=null
              $this: GET_VAR Thing$CharSequence$delegate type=kotlin.CharSequence operator=null
              startIndex: GET_VAR startIndex type=kotlin.Int operator=null
              endIndex: GET_VAR endIndex type=kotlin.Int operator=null
      PROPERTY public open override /*1*/ /*delegation*/ val length: kotlin.Int
        PROPERTY_GETTER public open override /*1*/ /*delegation*/ fun <get-length>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-length>
              CALL .<get-length> type=kotlin.Int operator=null
                $this: GET_VAR Thing$CharSequence$delegate type=kotlin.CharSequence operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val l: kotlin.Int
          CALL .<get-length> type=kotlin.Int operator=GET_PROPERTY
            $this: CALL .<init> type=Thing operator=null
              delegate: CONST String type=kotlin.String value='hello there'
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR l type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='11'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR l type=kotlin.Int operator=null
