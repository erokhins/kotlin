MODULE <test-module>
  FILE /rawStringsWithManyQuotes.kt
    CLASS CLASS P
      CONSTRUCTOR public constructor P(/*0*/ actual: kotlin.String, /*1*/ expected: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD actual type=kotlin.Unit operator=null
            receiver: THIS public final class P type=P
            value: GET_VAR actual type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD expected type=kotlin.Unit operator=null
            receiver: THIS public final class P type=P
            value: GET_VAR expected type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=P
      PROPERTY public final val actual: kotlin.String
        EXPRESSION_BODY
          GET_VAR actual type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val expected: kotlin.String
        EXPRESSION_BODY
          GET_VAR expected type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun array(/*0*/ vararg s: P /*kotlin.Array<out P>*/): kotlin.Array<out P>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=array
          GET_VAR s type=kotlin.Array<out P> operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val data: kotlin.Array<out P>
          CALL .array type=kotlin.Array<out P> operator=null
            s: VARARG type=Array<out P> varargElementType=P
              CALL .<init> type=P operator=null
                actual: CONST String type=kotlin.String value=''
                expected: CONST String type=kotlin.String value=''
              CALL .<init> type=P operator=null
                actual: CONST String type=kotlin.String value='"'
                expected: CONST String type=kotlin.String value='"'
              CALL .<init> type=P operator=null
                actual: CONST String type=kotlin.String value='""'
                expected: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
              CALL .<init> type=P operator=null
                actual: CONST String type=kotlin.String value='"""'
                expected: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
              CALL .<init> type=P operator=null
                actual: CONST String type=kotlin.String value='""""'
                expected: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
              CALL .<init> type=P operator=null
                actual: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value=' '
                expected: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value=' '
              CALL .<init> type=P operator=null
                actual: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value=' '
                expected: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value=' '
              CALL .<init> type=P operator=null
                actual: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='"'
                expected: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='"'
              CALL .<init> type=P operator=null
                actual: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='""'
                expected: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
              CALL .<init> type=P operator=null
                actual: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='"""'
                expected: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
              CALL .<init> type=P operator=null
                actual: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='""""'
                expected: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
              CALL .<init> type=P operator=null
                actual: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='"""""'
                expected: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
              CALL .<init> type=P operator=null
                actual: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='"'
                expected: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='"'
              CALL .<init> type=P operator=null
                actual: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='""'
                expected: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value=' '
                  CONST String type=kotlin.String value='"'
                  CONST String type=kotlin.String value='"'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='0'
                other: CALL .minus type=kotlin.Int operator=MINUS
                  $this: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                    $this: GET_VAR data type=kotlin.Array<out P> operator=null
                  other: CONST Int type=kotlin.Int value='1'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                VAR val p: P
                  CALL .get type=P operator=GET_ARRAY_ELEMENT
                    $this: GET_VAR data type=kotlin.Array<out P> operator=null
                    index: GET_VAR i type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                    arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .<get-actual> type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR p type=P operator=null
                      arg1: CALL .<get-expected> type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR p type=P operator=null
                  then: RETURN type=kotlin.Nothing from=box
                    STRING_CONCATENATION type=kotlin.String
                      CONST String type=kotlin.String value='Fail at #'
                      GET_VAR i type=kotlin.Int operator=null
                      CONST String type=kotlin.String value='. actual=''
                      CALL .<get-actual> type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR p type=P operator=null
                      CONST String type=kotlin.String value='', expected=''
                      CALL .<get-expected> type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR p type=P operator=null
                      CONST String type=kotlin.String value='''
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
