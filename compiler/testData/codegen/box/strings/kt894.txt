MODULE <test-module>
  FILE /kt894.kt
    FUN public fun stringConcat(/*0*/ n: kotlin.Int): kotlin.String?
      BLOCK_BODY
        VAR var string: kotlin.String?
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='0'
                other: CALL .minus type=kotlin.Int operator=MINUS
                  $this: GET_VAR n type=kotlin.Int operator=null
                  other: CONST Int type=kotlin.Int value='1'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              SET_VAR string type=kotlin.Unit operator=PLUSEQ
                CALL .plus type=kotlin.String operator=PLUSEQ
                  $receiver: GET_VAR string type=kotlin.String? operator=PLUSEQ
                  other: CONST String type=kotlin.String value='LOL '
        RETURN type=kotlin.Nothing from=stringConcat
          GET_VAR string type=kotlin.String? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .stringConcat type=kotlin.String? operator=null
                n: CONST Int type=kotlin.Int value='3'
              arg1: CONST String type=kotlin.String value='LOL LOL LOL '
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
