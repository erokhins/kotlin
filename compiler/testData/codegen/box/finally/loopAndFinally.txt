MODULE <test-module>
  FILE /loopAndFinally.kt
    CLASS CLASS MyString
      CONSTRUCTOR public constructor MyString()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=MyString
      PROPERTY public final var s: kotlin.String
        EXPRESSION_BODY
          CONST String type=kotlin.String value=''
      FUN public final operator fun plus(/*0*/ x: kotlin.String): MyString
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=PLUSEQ
            VAR val tmp0_this: MyString
              THIS public final class MyString type=MyString
            CALL .<set-s> type=kotlin.Unit operator=PLUSEQ
              $this: GET_VAR tmp0_this type=MyString operator=null
              <set-?>: CALL .plus type=kotlin.String operator=PLUSEQ
                $this: CALL .<get-s> type=kotlin.String operator=PLUSEQ
                  $this: GET_VAR tmp0_this type=MyString operator=null
                other: GET_VAR x type=kotlin.String operator=null
          RETURN type=kotlin.Nothing from=plus
            THIS public final class MyString type=MyString
      FUN public open override /*1*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            CALL .<get-s> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public final class MyString type=MyString
    FUN public fun test1(): MyString
      BLOCK_BODY
        VAR var r: MyString
          CALL .<init> type=MyString operator=null
        TRY_CATCH type=kotlin.Nothing
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .plus type=MyString operator=PLUS
              $this: GET_VAR r type=MyString operator=null
              x: CONST String type=kotlin.String value='Try'
            WHILE label=null operator=WHILE_LOOP
              condition: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                  arg0: CALL .toString type=kotlin.String operator=null
                    $this: GET_VAR r type=MyString operator=null
                  arg1: CONST String type=kotlin.String value=''
              body: BLOCK type=kotlin.Nothing operator=null
                RETURN type=kotlin.Nothing from=test1
                  CALL .plus type=MyString operator=PLUS
                    $this: GET_VAR r type=MyString operator=null
                    x: CONST String type=kotlin.String value='Loop'
            RETURN type=kotlin.Nothing from=test1
              CALL .plus type=MyString operator=PLUS
                $this: GET_VAR r type=MyString operator=null
                x: CONST String type=kotlin.String value='Fail'
          finally: BLOCK type=MyString operator=null
            CALL .plus type=MyString operator=PLUS
              $this: GET_VAR r type=MyString operator=null
              x: CONST String type=kotlin.String value='Finally'
    FUN public fun test2(): MyString
      BLOCK_BODY
        VAR var r: MyString
          CALL .<init> type=MyString operator=null
        TRY_CATCH type=kotlin.Nothing
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .plus type=MyString operator=PLUS
              $this: GET_VAR r type=MyString operator=null
              x: CONST String type=kotlin.String value='Try'
            DO_WHILE label=null operator=DO_WHILE_LOOP
              body: BLOCK type=kotlin.Unit operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                    arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .toString type=kotlin.String operator=null
                        $this: GET_VAR r type=MyString operator=null
                      arg1: CONST String type=kotlin.String value=''
                  then: BLOCK type=kotlin.Nothing operator=null
                    RETURN type=kotlin.Nothing from=test2
                      CALL .plus type=MyString operator=PLUS
                        $this: GET_VAR r type=MyString operator=null
                        x: CONST String type=kotlin.String value='Loop'
              condition: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                  arg0: CALL .toString type=kotlin.String operator=null
                    $this: GET_VAR r type=MyString operator=null
                  arg1: CONST String type=kotlin.String value=''
            RETURN type=kotlin.Nothing from=test2
              CALL .plus type=MyString operator=PLUS
                $this: GET_VAR r type=MyString operator=null
                x: CONST String type=kotlin.String value='Fail'
          finally: BLOCK type=MyString operator=null
            CALL .plus type=MyString operator=PLUS
              $this: GET_VAR r type=MyString operator=null
              x: CONST String type=kotlin.String value='Finally'
    FUN public fun test3(): MyString
      BLOCK_BODY
        VAR var r: MyString
          CALL .<init> type=MyString operator=null
        TRY_CATCH type=kotlin.Nothing
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .plus type=MyString operator=PLUS
              $this: GET_VAR r type=MyString operator=null
              x: CONST String type=kotlin.String value='Try'
            BLOCK type=kotlin.Unit operator=FOR_LOOP
              VAR val tmp0_iterator: kotlin.collections.IntIterator
                CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
                  $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                    $this: CONST Int type=kotlin.Int value='1'
                    other: CONST Int type=kotlin.Int value='2'
              WHILE label=null operator=FOR_LOOP_INNER_WHILE
                condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
                body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
                  VAR val i: kotlin.Int
                    CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                      $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
                  BLOCK type=kotlin.Nothing operator=null
                    CALL .plus type=MyString operator=PLUS
                      $this: GET_VAR r type=MyString operator=null
                      x: CONST String type=kotlin.String value='Loop'
                    RETURN type=kotlin.Nothing from=test3
                      GET_VAR r type=MyString operator=null
            RETURN type=kotlin.Nothing from=test3
              CALL .plus type=MyString operator=PLUS
                $this: GET_VAR r type=MyString operator=null
                x: CONST String type=kotlin.String value='Fail'
          finally: BLOCK type=MyString operator=null
            CALL .plus type=MyString operator=PLUS
              $this: GET_VAR r type=MyString operator=null
              x: CONST String type=kotlin.String value='Finally'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: CALL .test1 type=MyString operator=null
              arg1: CONST String type=kotlin.String value='TryLoopFinally'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail1: '
              CALL .test1 type=MyString operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: CALL .test2 type=MyString operator=null
              arg1: CONST String type=kotlin.String value='TryLoopFinally'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail2: '
              CALL .test2 type=MyString operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: CALL .test3 type=MyString operator=null
              arg1: CONST String type=kotlin.String value='TryLoopFinally'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail3: '
              CALL .test3 type=MyString operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
