MODULE <test-module>
  FILE /kt3894.kt
    CLASS CLASS MyString
      CONSTRUCTOR public constructor MyString()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=MyString
      PROPERTY public final var s: kotlin.String
        EXPRESSION_BODY
          CONST String type=kotlin.String value=''
      FUN public final operator fun plus(/*0*/ x: kotlin.String): MyString
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=PLUSEQ
            VAR val tmp0_this: MyString
              THIS public final class MyString type=MyString
            CALL .<set-s> type=kotlin.Unit operator=PLUSEQ
              $this: GET_VAR tmp0_this type=MyString operator=null
              <set-?>: CALL .plus type=kotlin.String operator=PLUSEQ
                $this: CALL .<get-s> type=kotlin.String operator=PLUSEQ
                  $this: GET_VAR tmp0_this type=MyString operator=null
                other: GET_VAR x type=kotlin.String operator=null
          RETURN type=kotlin.Nothing from=plus
            THIS public final class MyString type=MyString
      FUN public open override /*1*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            CALL .<get-s> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public final class MyString type=MyString
    FUN public fun test1(): MyString
      BLOCK_BODY
        VAR var r: MyString
          CALL .<init> type=MyString operator=null
        WHILE label=null operator=WHILE_LOOP
          condition: CONST Boolean type=kotlin.Boolean value='true'
          body: BLOCK type=kotlin.Unit operator=null
            TRY_CATCH type=kotlin.Unit
              try: BLOCK type=kotlin.Unit operator=null
                CALL .plus type=MyString operator=PLUS
                  $this: GET_VAR r type=MyString operator=null
                  x: CONST String type=kotlin.String value='Try'
                WHEN type=kotlin.Unit operator=IF
                  if: CONST Boolean type=kotlin.Boolean value='true'
                  then: BLOCK type=kotlin.Nothing operator=null
                    CALL .plus type=MyString operator=PLUS
                      $this: GET_VAR r type=MyString operator=null
                      x: CONST String type=kotlin.String value='Break'
                    BREAK label=null loop.label=null depth=0
              finally: BLOCK type=kotlin.Nothing operator=null
                RETURN type=kotlin.Nothing from=test1
                  CALL .plus type=MyString operator=PLUS
                    $this: GET_VAR r type=MyString operator=null
                    x: CONST String type=kotlin.String value='Finally'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: CALL .test1 type=MyString operator=null
              arg1: CONST String type=kotlin.String value='TryBreakFinally'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail1: '
              CALL .toString type=kotlin.String operator=null
                $this: CALL .test1 type=MyString operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
