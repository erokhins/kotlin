MODULE <test-module>
  FILE /kt3867.kt
    FUN public fun fail(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=fail
          WHEN type=kotlin.Int operator=IF
            if: CONST Boolean type=kotlin.Boolean value='true'
            then: THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.RuntimeException operator=null
            else: CONST Int type=kotlin.Int value='1'
    FUN public fun test1(): kotlin.String
      BLOCK_BODY
        VAR var r: kotlin.String
          CONST String type=kotlin.String value=''
        TRY_CATCH type=kotlin.Nothing
          try: BLOCK type=kotlin.Nothing operator=null
            TRY_CATCH type=kotlin.Nothing
              try: BLOCK type=kotlin.Nothing operator=null
                SET_VAR r type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR r type=kotlin.String operator=PLUSEQ
                    other: CONST String type=kotlin.String value='Try'
                RETURN type=kotlin.Nothing from=test1
                  GET_VAR r type=kotlin.String operator=null
              catch e: BLOCK type=kotlin.Nothing operator=null
                SET_VAR r type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR r type=kotlin.String operator=PLUSEQ
                    other: CONST String type=kotlin.String value='Catch'
                RETURN type=kotlin.Nothing from=test1
                  GET_VAR r type=kotlin.String operator=null
              finally: BLOCK type=kotlin.Int operator=null
                SET_VAR r type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR r type=kotlin.String operator=PLUSEQ
                    other: CONST String type=kotlin.String value='Finally'
                CALL .fail type=kotlin.Int operator=null
          catch e: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from=test1
              GET_VAR r type=kotlin.String operator=null
    FUN public fun test2(): kotlin.String
      BLOCK_BODY
        VAR var r: kotlin.String
          CONST String type=kotlin.String value=''
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Unit operator=null
            TRY_CATCH type=kotlin.Unit
              try: BLOCK type=kotlin.Unit operator=null
                SET_VAR r type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR r type=kotlin.String operator=PLUSEQ
                    other: CONST String type=kotlin.String value='Try'
              catch e: BLOCK type=kotlin.Unit operator=null
                SET_VAR r type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR r type=kotlin.String operator=PLUSEQ
                    other: CONST String type=kotlin.String value='Catch'
              finally: BLOCK type=kotlin.Int operator=null
                SET_VAR r type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR r type=kotlin.String operator=PLUSEQ
                    other: CONST String type=kotlin.String value='Finally'
                CALL .fail type=kotlin.Int operator=null
          catch e: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from=test2
              GET_VAR r type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=test2
          CALL .plus type=kotlin.String operator=PLUS
            $this: GET_VAR r type=kotlin.String operator=null
            other: CONST String type=kotlin.String value='Fail'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test1 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='TryFinally'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail1: '
              CALL .test1 type=kotlin.String operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test2 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='TryFinally'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail2: '
              CALL .test2 type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
