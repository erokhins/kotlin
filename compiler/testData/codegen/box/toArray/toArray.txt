MODULE <test-module>
  FILE /toArray.kt
    CLASS CLASS MyCollection
      CONSTRUCTOR public constructor MyCollection</*0*/ T>(/*0*/ delegate: kotlin.collections.Collection<T>)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD delegate type=kotlin.Unit operator=null
            receiver: THIS public final class MyCollection</*0*/ T> : kotlin.collections.Collection<T> type=MyCollection<T>
            value: GET_VAR delegate type=kotlin.collections.Collection<T> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=MyCollection
      PROPERTY public final val delegate: kotlin.collections.Collection<T>
        EXPRESSION_BODY
          GET_VAR delegate type=kotlin.collections.Collection<T> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY val `MyCollection$Collection$delegate`: kotlin.collections.Collection<T>
        EXPRESSION_BODY
          GET_VAR delegate type=kotlin.collections.Collection<T> operator=null
      FUN public open override /*1*/ /*delegation*/ fun contains(/*0*/ element: T): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=contains
            CALL .contains type=kotlin.Boolean operator=null
              $this: GET_VAR MyCollection$Collection$delegate type=kotlin.collections.Collection<T> operator=null
              element: GET_VAR element type=T operator=null
      FUN public open override /*1*/ /*delegation*/ fun containsAll(/*0*/ elements: kotlin.collections.Collection<T>): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=containsAll
            CALL .containsAll type=kotlin.Boolean operator=null
              $this: GET_VAR MyCollection$Collection$delegate type=kotlin.collections.Collection<T> operator=null
              elements: GET_VAR elements type=kotlin.collections.Collection<T> operator=null
      FUN public open override /*1*/ /*delegation*/ fun isEmpty(): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=isEmpty
            CALL .isEmpty type=kotlin.Boolean operator=null
              $this: GET_VAR MyCollection$Collection$delegate type=kotlin.collections.Collection<T> operator=null
      FUN public open override /*1*/ /*delegation*/ fun iterator(): kotlin.collections.Iterator<T>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=iterator
            CALL .iterator type=kotlin.collections.Iterator<T> operator=null
              $this: GET_VAR MyCollection$Collection$delegate type=kotlin.collections.Collection<T> operator=null
      PROPERTY public open override /*1*/ /*delegation*/ val size: kotlin.Int
        PROPERTY_GETTER public open override /*1*/ /*delegation*/ fun <get-size>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-size>
              CALL .<get-size> type=kotlin.Int operator=null
                $this: GET_VAR MyCollection$Collection$delegate type=kotlin.collections.Collection<T> operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val collection: java.util.Collection<*>
          TYPE_OP operator=CAST typeOperand=java.util.Collection<*>
            CALL .<init> type=MyCollection<kotlin.Int!> operator=null
              delegate: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.collections.List<kotlin.Int!>
                CALL .asList type=kotlin.collections.(Mutable)List<kotlin.Int!>! operator=null
                  p0: VARARG type=(kotlin.Array<(kotlin.Int..kotlin.Int?)>..kotlin.Array<out (kotlin.Int..kotlin.Int?)>?) varargElementType=(kotlin.Int..kotlin.Int?)
                    CONST Int type=kotlin.Int value='2'
                    CONST Int type=kotlin.Int value='3'
                    CONST Int type=kotlin.Int value='9'
        VAR val array1: kotlin.Array<(out) kotlin.Any!>!
          CALL .toArray type=kotlin.Array<(out) kotlin.Any!>! operator=null
            $this: GET_VAR collection type=java.util.Collection<*> operator=null
        VAR val array2: kotlin.Array<(out) kotlin.Int!>!
          CALL .toArray type=kotlin.Array<(out) kotlin.Int!>! operator=null
            $this: GET_VAR collection type=java.util.Collection<*> operator=null
            p0: TYPE_OP operator=CAST typeOperand=kotlin.Array<kotlin.Int>
              CALL .arrayOfNulls type=kotlin.Array<kotlin.Int?> operator=null
                size: CONST Int type=kotlin.Int value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .isArrayOf type=kotlin.Boolean operator=null
              $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Any!>
                GET_VAR array1 type=kotlin.Array<(out) kotlin.Any!>! operator=null
          then: RETURN type=kotlin.Nothing from=box
            CALL .toString type=kotlin.String operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
                CALL .getClass type=java.lang.Class<*>! operator=null
                  $this: TYPE_OP operator=CAST typeOperand=java.lang.Object
                    GET_VAR array1 type=kotlin.Array<(out) kotlin.Any!>! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .isArrayOf type=kotlin.Boolean operator=null
              $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out kotlin.Int!>
                GET_VAR array2 type=kotlin.Array<(out) kotlin.Int!>! operator=null
          then: RETURN type=kotlin.Nothing from=box
            CALL .toString type=kotlin.String operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
                CALL .getClass type=java.lang.Class<*>! operator=null
                  $this: TYPE_OP operator=CAST typeOperand=java.lang.Object
                    GET_VAR array2 type=kotlin.Array<(out) kotlin.Int!>! operator=null
        VAR val s1: kotlin.String!
          CALL .toString type=kotlin.String! operator=null
            p0: GET_VAR array1 type=kotlin.Array<(out) kotlin.Any!>! operator=null
        VAR val s2: kotlin.String!
          CALL .toString type=kotlin.String! operator=null
            p0: GET_VAR array2 type=kotlin.Array<(out) kotlin.Int!>! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR s1 type=kotlin.String! operator=null
              arg1: CONST String type=kotlin.String value='[2, 3, 9]'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='s1 = '
              GET_VAR s1 type=kotlin.String! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR s2 type=kotlin.String! operator=null
              arg1: CONST String type=kotlin.String value='[2, 3, 9]'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='s2 = '
              GET_VAR s2 type=kotlin.String! operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
