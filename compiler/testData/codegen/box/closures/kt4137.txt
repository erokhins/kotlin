MODULE <test-module>
  FILE /kt4137.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ s: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD s type=kotlin.Unit operator=null
            receiver: THIS public open class A type=A
            value: GET_VAR s type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final val s: kotlin.Int
        EXPRESSION_BODY
          GET_VAR s type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public infix fun kotlin.Int.foo(/*0*/ s: kotlin.Int): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CALL .plus type=kotlin.Int operator=PLUS
            $this: $RECEIVER of: foo type=kotlin.Int
            other: GET_VAR s type=kotlin.Int operator=null
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL A
            s: CALL .invoke type=kotlin.Int operator=null
              $this: BLOCK type=() -> kotlin.Int operator=LAMBDA
                FUN local final fun <anonymous>(): kotlin.Int
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .foo type=kotlin.Int operator=null
                        $receiver: CONST Int type=kotlin.Int value='1'
                        s: CONST Int type=kotlin.Int value='2'
                CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Int operator=LAMBDA
          INSTANCE_INITIALIZER_CALL classDescriptor=B
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .<get-s> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .<init> type=B operator=null
              arg1: CONST Int type=kotlin.Int value='3'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='Fail'
