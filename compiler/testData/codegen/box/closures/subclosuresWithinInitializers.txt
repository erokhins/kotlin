MODULE <test-module>
  FILE /subclosuresWithinInitializers.kt
    FUN public fun </*0*/ R> run(/*0*/ block: () -> R): R
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=run
          CALL .invoke type=R operator=INVOKE
            $this: GET_VAR block type=() -> R operator=VARIABLE_AS_FUNCTION
    FUN public inline fun </*0*/ R> inlineRun(/*0*/ block: () -> R): R
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=inlineRun
          CALL .invoke type=R operator=INVOKE
            $this: GET_VAR block type=() -> R operator=VARIABLE_AS_FUNCTION
    CLASS CLASS Outer
      CONSTRUCTOR public constructor Outer(/*0*/ outerProp: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD outerProp type=kotlin.Unit operator=null
            receiver: THIS public final class Outer type=Outer
            value: GET_VAR outerProp type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Outer
      PROPERTY public final val outerProp: kotlin.String
        EXPRESSION_BODY
          GET_VAR outerProp type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun foo(/*0*/ arg: kotlin.String): kotlin.String
        BLOCK_BODY
          CLASS CLASS Local
            CONSTRUCTOR public constructor Local()
              BLOCK_BODY
                DELEGATING_CONSTRUCTOR_CALL Any
                INSTANCE_INITIALIZER_CALL classDescriptor=Local
            PROPERTY public final val work1: kotlin.String
              EXPRESSION_BODY
                CALL .run type=kotlin.String operator=null
                  $receiver: THIS local final class Local type=Outer.foo.Local
                  block: BLOCK type=Outer.foo.Local.() -> kotlin.String operator=LAMBDA
                    FUN local final fun Outer.foo.Local.<anonymous>(): kotlin.String
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          CALL .plus type=kotlin.String operator=PLUS
                            $this: CALL .<get-outerProp> type=kotlin.String operator=GET_PROPERTY
                              $this: THIS public final class Outer type=Outer
                            other: GET_VAR arg type=kotlin.String operator=null
                    CALLABLE_REFERENCE <anonymous> type=Outer.foo.Local.() -> kotlin.String operator=LAMBDA
            PROPERTY public final val work2: kotlin.String
              EXPRESSION_BODY
                CALL .inlineRun type=kotlin.String operator=null
                  block: BLOCK type=() -> kotlin.String operator=LAMBDA
                    FUN local final fun <anonymous>(): kotlin.String
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          CALL .plus type=kotlin.String operator=PLUS
                            $this: CALL .<get-outerProp> type=kotlin.String operator=GET_PROPERTY
                              $this: THIS public final class Outer type=Outer
                            other: GET_VAR arg type=kotlin.String operator=null
                    CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
            PROPERTY public final val obj: Outer.foo.Local.obj.<no name provided>
              EXPRESSION_BODY
                BLOCK type=Outer.foo.Local.obj.<no name provided> operator=OBJECT_LITERAL
                  CLASS CLASS <no name provided>
                    CONSTRUCTOR public constructor <no name provided>()
                      BLOCK_BODY
                        DELEGATING_CONSTRUCTOR_CALL Any
                        INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
                    FUN public open override /*1*/ fun toString(): kotlin.String
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=toString
                          CALL .plus type=kotlin.String operator=PLUS
                            $this: CALL .<get-outerProp> type=kotlin.String operator=GET_PROPERTY
                              $this: THIS public final class Outer type=Outer
                            other: GET_VAR arg type=kotlin.String operator=null
                  CALL .<init> type=Outer.foo.Local.obj.<no name provided> operator=OBJECT_LITERAL
            FUN public open override /*1*/ fun toString(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=toString
                  STRING_CONCATENATION type=kotlin.String
                    CALL .<get-work1> type=kotlin.String operator=GET_PROPERTY
                      $this: THIS local final class Local type=Outer.foo.Local
                    CONST String type=kotlin.String value='#'
                    CALL .<get-work2> type=kotlin.String operator=GET_PROPERTY
                      $this: THIS local final class Local type=Outer.foo.Local
                    CONST String type=kotlin.String value='#'
                    CALL .toString type=kotlin.String operator=null
                      $this: CALL .<get-obj> type=Outer.foo.Local.obj.<no name provided> operator=GET_PROPERTY
                        $this: THIS local final class Local type=Outer.foo.Local
          RETURN type=kotlin.Nothing from=foo
            CALL .toString type=kotlin.String operator=null
              $this: CALL .<init> type=Outer.foo.Local operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val res: kotlin.String
          CALL .foo type=kotlin.String operator=null
            $this: CALL .<init> type=Outer operator=null
              outerProp: CONST String type=kotlin.String value='O'
            arg: CONST String type=kotlin.String value='K'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR res type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='OK#OK#OK'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: '
              GET_VAR res type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
