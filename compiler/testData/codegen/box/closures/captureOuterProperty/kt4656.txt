MODULE <test-module>
  FILE /kt4656.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var foo: () -> kotlin.Int
          BLOCK type=() -> kotlin.Int operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Int
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CONST Int type=kotlin.Int value='1'
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Int operator=LAMBDA
        VAR var bar: kotlin.Int
          CONST Int type=kotlin.Int value='1'
        VAR val t: () -> kotlin.String
          BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  STRING_CONCATENATION type=kotlin.String
                    CALL .invoke type=kotlin.Int operator=INVOKE
                      $this: GET_VAR foo type=() -> kotlin.Int operator=VARIABLE_AS_FUNCTION
                    CONST String type=kotlin.String value=' '
                    GET_VAR bar type=kotlin.Int operator=null
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
        FUN local final fun b(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=b
              STRING_CONCATENATION type=kotlin.String
                CALL .invoke type=kotlin.Int operator=INVOKE
                  $this: GET_VAR foo type=() -> kotlin.Int operator=VARIABLE_AS_FUNCTION
                CONST String type=kotlin.String value=' '
                GET_VAR bar type=kotlin.Int operator=null
        SET_VAR foo type=kotlin.Unit operator=EQ
          BLOCK type=() -> kotlin.Int operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Int
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CONST Int type=kotlin.Int value='2'
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Int operator=LAMBDA
        SET_VAR bar type=kotlin.Unit operator=EQ
          CONST Int type=kotlin.Int value='2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .invoke type=kotlin.String operator=INVOKE
                $this: GET_VAR t type=() -> kotlin.String operator=VARIABLE_AS_FUNCTION
              arg1: CONST String type=kotlin.String value='2 2'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .b type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='2 2'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail2'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
