MODULE <test-module>
  FILE /recursiveInnerAnonymousObject.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A</*0*/ R>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      FUN public abstract fun f(): kotlin.String
      FUN public open override /*1*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            CALL .f type=kotlin.String operator=null
              $this: THIS public abstract class A</*0*/ R> type=A<R>
    CLASS CLASS G
      CONSTRUCTOR public constructor G()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=G
      FUN public abstract fun bar(): kotlin.Any
    FUN public inline fun </*0*/ reified T> baz(): G
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=baz
          BLOCK type=baz.<no name provided><T> operator=OBJECT_LITERAL
            CLASS CLASS <no name provided>
              CONSTRUCTOR public constructor <no name provided>()
                BLOCK_BODY
                  DELEGATING_CONSTRUCTOR_CALL G
                  INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
              FUN public open override /*1*/ fun bar(): kotlin.Any
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=bar
                    BLOCK type=baz.<no name provided>.bar.<no name provided><T> operator=OBJECT_LITERAL
                      CLASS CLASS <no name provided>
                        CONSTRUCTOR public constructor <no name provided>()
                          BLOCK_BODY
                            DELEGATING_CONSTRUCTOR_CALL A
                            INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
                        FUN public open override /*1*/ fun f(): kotlin.String
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from=f
                              CONST String type=kotlin.String value='OK'
                      CALL .<init> type=baz.<no name provided>.bar.<no name provided><T> operator=OBJECT_LITERAL
            CALL .<init> type=baz.<no name provided><T> operator=OBJECT_LITERAL
    FUN public inline fun </*0*/ T1, /*1*/ T2, /*2*/ T3, /*3*/ T4, /*4*/ T5, /*5*/ T6, /*6*/ reified R1, /*7*/ reified R2> foo(): kotlin.Pair<G, G>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CALL .<init> type=kotlin.Pair<G, G> operator=null
            first: CALL .baz type=G operator=null
            second: CALL .baz type=G operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val res: kotlin.Pair<G, G>
          CALL .foo type=kotlin.Pair<G, G> operator=null
        VAR val x1: kotlin.Any
          CALL .bar type=kotlin.Any operator=null
            $this: CALL .<get-first> type=G operator=GET_PROPERTY
              $this: GET_VAR res type=kotlin.Pair<G, G> operator=null
        VAR val x2: kotlin.Any
          CALL .bar type=kotlin.Any operator=null
            $this: CALL .<get-second> type=G operator=GET_PROPERTY
              $this: GET_VAR res type=kotlin.Pair<G, G> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='OK'
          actual: CALL .toString type=kotlin.String operator=null
            $this: GET_VAR x1 type=kotlin.Any operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='OK'
          actual: CALL .toString type=kotlin.String operator=null
            $this: GET_VAR x2 type=kotlin.Any operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='A<java.lang.Integer>'
          actual: BLOCK type=kotlin.String? operator=SAFE_CALL
            VAR val tmp0_safe_receiver: java.lang.reflect.Type!
              CALL .getGenericSuperclass type=java.lang.reflect.Type! operator=null
                $this: CALL .<get-javaClass> type=java.lang.Class<kotlin.Any> operator=GET_PROPERTY
                  $receiver: GET_VAR x1 type=kotlin.Any operator=null
            WHEN type=kotlin.String? operator=SAFE_CALL
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_safe_receiver type=java.lang.reflect.Type! operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CONST Null type=kotlin.Nothing? value='null'
              else: CALL .toString type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  GET_VAR tmp0_safe_receiver type=java.lang.reflect.Type! operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='A<java.lang.String>'
          actual: BLOCK type=kotlin.String? operator=SAFE_CALL
            VAR val tmp1_safe_receiver: java.lang.reflect.Type!
              CALL .getGenericSuperclass type=java.lang.reflect.Type! operator=null
                $this: CALL .<get-javaClass> type=java.lang.Class<kotlin.Any> operator=GET_PROPERTY
                  $receiver: GET_VAR x2 type=kotlin.Any operator=null
            WHEN type=kotlin.String? operator=SAFE_CALL
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp1_safe_receiver type=java.lang.reflect.Type! operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CONST Null type=kotlin.Nothing? value='null'
              else: CALL .toString type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  GET_VAR tmp1_safe_receiver type=java.lang.reflect.Type! operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
