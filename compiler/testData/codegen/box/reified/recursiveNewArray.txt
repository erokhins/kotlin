MODULE <test-module>
  FILE /recursiveNewArray.kt
    FUN public inline fun </*0*/ reified T> createArray(/*0*/ n: kotlin.Int, /*1*/ crossinline block: () -> T): kotlin.Array<T>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=createArray
          CALL .<init> type=kotlin.Array<T> operator=null
            size: GET_VAR n type=kotlin.Int operator=null
            init: BLOCK type=(kotlin.Int) -> T operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.Int): T
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .invoke type=T operator=INVOKE
                      $this: GET_VAR block type=() -> T operator=VARIABLE_AS_FUNCTION
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> T operator=LAMBDA
    FUN public inline fun </*0*/ T1, /*1*/ T2, /*2*/ T3, /*3*/ T4, /*4*/ T5, /*5*/ T6, /*6*/ reified R> recursive(/*0*/ crossinline block: () -> R): kotlin.Array<R>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=recursive
          CALL .createArray type=kotlin.Array<R> operator=null
            n: CONST Int type=kotlin.Int value='5'
            block: BLOCK type=() -> R operator=LAMBDA
              FUN local final fun <anonymous>(): R
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .invoke type=R operator=INVOKE
                      $this: GET_VAR block type=() -> R operator=VARIABLE_AS_FUNCTION
              CALLABLE_REFERENCE <anonymous> type=() -> R operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val x: kotlin.Array<kotlin.String>
          CALL .recursive type=kotlin.Array<kotlin.String> operator=null
            block: BLOCK type=() -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CONST String type=kotlin.String value='abc'
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
        CALL .assert type=kotlin.Unit operator=null
          value: CALL .all type=kotlin.Boolean operator=null
            $receiver: GET_VAR x type=kotlin.Array<kotlin.String> operator=null
            predicate: BLOCK type=(kotlin.String) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.String): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: GET_VAR it type=kotlin.String operator=null
                      arg1: CONST String type=kotlin.String value='abc'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.String) -> kotlin.Boolean operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
