MODULE <test-module>
  FILE /nonInlineableLambdaInReifiedFunction.kt
    FUN public fun foo(/*0*/ block: () -> kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CALL .invoke type=kotlin.String operator=INVOKE
            $this: GET_VAR block type=() -> kotlin.String operator=VARIABLE_AS_FUNCTION
    FUN public inline fun </*0*/ reified T : kotlin.Any> bar1(/*0*/ x: T): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=bar1
          CALL .foo type=kotlin.String operator=null
            block: BLOCK type=() -> kotlin.String! operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String!
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .getName type=kotlin.String! operator=null
                      $this: CALL .<get-java> type=java.lang.Class<T> operator=GET_PROPERTY
                        $receiver: CLASS_REFERENCE T type=kotlin.reflect.KClass<T>
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String! operator=LAMBDA
    FUN public inline fun </*0*/ reified T : kotlin.Any> bar2(/*0*/ x: T, /*1*/ y: kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=bar2
          CALL .foo type=kotlin.String operator=null
            block: BLOCK type=() -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .plus type=kotlin.String operator=PLUS
                      $this: CALL .plus type=kotlin.String operator=PLUS
                        $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.String
                          CALL .getName type=kotlin.String! operator=null
                            $this: CALL .<get-java> type=java.lang.Class<T> operator=GET_PROPERTY
                              $receiver: CLASS_REFERENCE T type=kotlin.reflect.KClass<T>
                        other: CONST String type=kotlin.String value='#'
                      other: GET_VAR y type=kotlin.String operator=null
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='java.lang.Integer'
          actual: CALL .bar1 type=kotlin.String operator=null
            x: CONST Int type=kotlin.Int value='1'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='java.lang.String#OK'
          actual: CALL .bar2 type=kotlin.String operator=null
            x: CONST String type=kotlin.String value='abc'
            y: CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
