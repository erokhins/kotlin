MODULE <test-module>
  FILE /jClass.kt
    FUN public inline fun </*0*/ reified T : kotlin.Any> jClass(): java.lang.Class<T>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=jClass
          CALL .<get-java> type=java.lang.Class<T> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE T type=kotlin.reflect.KClass<T>
    FUN public inline fun </*0*/ reified T : kotlin.Any> jClassArray(): java.lang.Class<kotlin.Array<T>>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=jClassArray
          CALL .jClass type=java.lang.Class<kotlin.Array<T>> operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-simpleName> type=kotlin.String! operator=GET_PROPERTY
                $receiver: CALL .jClass type=java.lang.Class<kotlin.Array<kotlin.String>> operator=null
              arg1: CONST String type=kotlin.String value='String[]'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-simpleName> type=kotlin.String! operator=GET_PROPERTY
                $receiver: CALL .jClass type=java.lang.Class<kotlin.IntArray> operator=null
              arg1: CONST String type=kotlin.String value='int[]'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-simpleName> type=kotlin.String! operator=GET_PROPERTY
                $receiver: CALL .jClassArray type=java.lang.Class<kotlin.Array<kotlin.String>> operator=null
              arg1: CONST String type=kotlin.String value='String[]'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-simpleName> type=kotlin.String! operator=GET_PROPERTY
                $receiver: CALL .jClassArray type=java.lang.Class<kotlin.Array<kotlin.Array<kotlin.String>>> operator=null
              arg1: CONST String type=kotlin.String value='String[][]'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 4'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-simpleName> type=kotlin.String! operator=GET_PROPERTY
                $receiver: CALL .jClassArray type=java.lang.Class<kotlin.Array<kotlin.IntArray>> operator=null
              arg1: CONST String type=kotlin.String value='int[][]'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 5'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
