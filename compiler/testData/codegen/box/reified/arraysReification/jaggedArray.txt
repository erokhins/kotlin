MODULE <test-module>
  FILE /jaggedArray.kt
    FUN public inline fun </*0*/ reified T> jaggedArray(/*0*/ x: (kotlin.Int, kotlin.Int) -> T): kotlin.Array<kotlin.Array<T>>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=jaggedArray
          CALL .<init> type=kotlin.Array<kotlin.Array<T>> operator=null
            size: CONST Int type=kotlin.Int value='1'
            init: BLOCK type=(kotlin.Int) -> kotlin.Array<T> operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ i: kotlin.Int): kotlin.Array<T>
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<init> type=kotlin.Array<T> operator=null
                      size: CONST Int type=kotlin.Int value='1'
                      init: BLOCK type=(kotlin.Int) -> T operator=LAMBDA
                        FUN local final fun <anonymous>(/*0*/ j: kotlin.Int): T
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from=<anonymous>
                              CALL .invoke type=T operator=INVOKE
                                $this: GET_VAR x type=(kotlin.Int, kotlin.Int) -> T operator=VARIABLE_AS_FUNCTION
                                p1: GET_VAR i type=kotlin.Int operator=null
                                p2: GET_VAR j type=kotlin.Int operator=null
                        CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> T operator=LAMBDA
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Array<T> operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val x1: kotlin.Array<kotlin.Array<kotlin.String>>
          CALL .jaggedArray type=kotlin.Array<kotlin.Array<kotlin.String>> operator=null
            x: BLOCK type=(kotlin.Int, kotlin.Int) -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Int, /*1*/ y: kotlin.Int): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    STRING_CONCATENATION type=kotlin.String
                      GET_VAR x type=kotlin.Int operator=null
                      CONST String type=kotlin.String value='-'
                      GET_VAR y type=kotlin.Int operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int, kotlin.Int) -> kotlin.String operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .get type=kotlin.String operator=GET_ARRAY_ELEMENT
                $this: CALL .get type=kotlin.Array<kotlin.String> operator=GET_ARRAY_ELEMENT
                  $this: GET_VAR x1 type=kotlin.Array<kotlin.Array<kotlin.String>> operator=null
                  index: CONST Int type=kotlin.Int value='0'
                index: CONST Int type=kotlin.Int value='0'
              arg1: CONST String type=kotlin.String value='0-0'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        VAR val x2: kotlin.Array<kotlin.Array<kotlin.Array<kotlin.String>>>
          CALL .jaggedArray type=kotlin.Array<kotlin.Array<kotlin.Array<kotlin.String>>> operator=null
            x: BLOCK type=(kotlin.Int, kotlin.Int) -> kotlin.Array<kotlin.String> operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Int, /*1*/ y: kotlin.Int): kotlin.Array<kotlin.String>
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .arrayOf type=kotlin.Array<kotlin.String> operator=null
                      elements: VARARG type=Array<out String> varargElementType=String
                        STRING_CONCATENATION type=kotlin.String
                          GET_VAR x type=kotlin.Int operator=null
                          CONST String type=kotlin.String value='-'
                          GET_VAR y type=kotlin.Int operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int, kotlin.Int) -> kotlin.Array<kotlin.String> operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .get type=kotlin.String operator=GET_ARRAY_ELEMENT
                $this: CALL .get type=kotlin.Array<kotlin.String> operator=GET_ARRAY_ELEMENT
                  $this: CALL .get type=kotlin.Array<kotlin.Array<kotlin.String>> operator=GET_ARRAY_ELEMENT
                    $this: GET_VAR x2 type=kotlin.Array<kotlin.Array<kotlin.Array<kotlin.String>>> operator=null
                    index: CONST Int type=kotlin.Int value='0'
                  index: CONST Int type=kotlin.Int value='0'
                index: CONST Int type=kotlin.Int value='0'
              arg1: CONST String type=kotlin.String value='0-0'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        VAR val x3: kotlin.Array<kotlin.Array<kotlin.IntArray>>
          CALL .jaggedArray type=kotlin.Array<kotlin.Array<kotlin.IntArray>> operator=null
            x: BLOCK type=(kotlin.Int, kotlin.Int) -> kotlin.IntArray operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Int, /*1*/ y: kotlin.Int): kotlin.IntArray
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .intArrayOf type=kotlin.IntArray operator=null
                      elements: VARARG type=IntArray varargElementType=Int
                        CALL .plus type=kotlin.Int operator=PLUS
                          $this: CALL .plus type=kotlin.Int operator=PLUS
                            $this: GET_VAR x type=kotlin.Int operator=null
                            other: GET_VAR y type=kotlin.Int operator=null
                          other: CONST Int type=kotlin.Int value='1'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int, kotlin.Int) -> kotlin.IntArray operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .get type=kotlin.Int operator=GET_ARRAY_ELEMENT
                $this: CALL .get type=kotlin.IntArray operator=GET_ARRAY_ELEMENT
                  $this: CALL .get type=kotlin.Array<kotlin.IntArray> operator=GET_ARRAY_ELEMENT
                    $this: GET_VAR x3 type=kotlin.Array<kotlin.Array<kotlin.IntArray>> operator=null
                    index: CONST Int type=kotlin.Int value='0'
                  index: CONST Int type=kotlin.Int value='0'
                index: CONST Int type=kotlin.Int value='0'
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 3'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
