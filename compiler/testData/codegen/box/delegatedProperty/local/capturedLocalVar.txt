MODULE <test-module>
  FILE /capturedLocalVar.kt
    FUN public inline fun </*0*/ T> run(/*0*/ f: () -> T): T
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=run
          CALL .invoke type=T operator=INVOKE
            $this: GET_VAR f type=() -> T operator=VARIABLE_AS_FUNCTION
    CLASS CLASS Delegate
      CONSTRUCTOR public constructor Delegate()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Delegate
      PROPERTY public final var inner: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='1'
      FUN public final operator fun getValue(/*0*/ t: kotlin.Any?, /*1*/ p: kotlin.reflect.KProperty<*>): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=getValue
            CALL .<get-inner> type=kotlin.Int operator=GET_PROPERTY
              $this: THIS public final class Delegate type=foo.Delegate
      FUN public final operator fun setValue(/*0*/ t: kotlin.Any?, /*1*/ p: kotlin.reflect.KProperty<*>, /*2*/ i: kotlin.Int): kotlin.Unit
        BLOCK_BODY
          CALL .<set-inner> type=kotlin.Unit operator=EQ
            $this: THIS public final class Delegate type=foo.Delegate
            <set-?>: GET_VAR i type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        LOCAL_DELEGATED_PROPERTY var prop: kotlin.Int
          VAR val `prop$delegate`: foo.Delegate
            CALL .<init> type=foo.Delegate operator=null
          LOCAL_PROPERTY_ACCESSOR <get-prop>
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=<get-prop>
                CALL .getValue type=kotlin.Int operator=null
                  $this: GET_VAR prop$delegate type=foo.Delegate operator=null
                  t: CONST Null type=kotlin.Nothing? value='null'
                  p: CALLABLE_REFERENCE prop type=kotlin.reflect.KMutableProperty0<kotlin.Int> operator=PROPERTY_REFERENCE_FOR_DELEGATE
          LOCAL_PROPERTY_ACCESSOR <set-prop>
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=<set-prop>
                TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Int
                  CALL .setValue type=kotlin.Unit operator=null
                    $this: GET_VAR prop$delegate type=foo.Delegate operator=null
                    t: CONST Null type=kotlin.Nothing? value='null'
                    p: CALLABLE_REFERENCE prop type=kotlin.reflect.KMutableProperty0<kotlin.Int> operator=PROPERTY_REFERENCE_FOR_DELEGATE
                    i: GET_VAR value type=kotlin.Int operator=null
        CALL .run type=kotlin.Unit operator=null
          f: BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .<set-prop> type=kotlin.Int operator=EQ
                    value: CONST Int type=kotlin.Int value='2'
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-prop> type=kotlin.Int operator=GET_LOCAL_PROPERTY
              arg1: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail get'
        RETURN type=kotlin.Nothing from=box
          CALL .run type=kotlin.String operator=null
            f: BLOCK type=() -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    WHEN type=kotlin.String operator=IF
                      if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                        arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                          arg0: CALL .<get-prop> type=kotlin.Int operator=GET_LOCAL_PROPERTY
                          arg1: CONST Int type=kotlin.Int value='2'
                      then: CONST String type=kotlin.String value='fail set'
                      else: CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
