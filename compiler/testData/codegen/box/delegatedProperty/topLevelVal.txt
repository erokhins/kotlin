MODULE <test-module>
  FILE /topLevelVal.kt
    CLASS CLASS Delegate
      CONSTRUCTOR public constructor Delegate()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Delegate
      FUN public final operator fun getValue(/*0*/ t: kotlin.Any?, /*1*/ p: kotlin.reflect.KProperty<*>): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=getValue
            CONST Int type=kotlin.Int value='1'
    PROPERTY public val prop: kotlin.Int
      delegate: PROPERTY val `prop$delegate`: Delegate
        EXPRESSION_BODY
          CALL .<init> type=Delegate operator=null
      PROPERTY_GETTER public fun <get-prop>(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=<get-prop>
            CALL .getValue type=kotlin.Int operator=null
              $this: GET_BACKING_FIELD prop$delegate type=Delegate operator=null
              t: CONST Null type=kotlin.Nothing? value='null'
              p: CALLABLE_REFERENCE prop type=kotlin.reflect.KProperty0<kotlin.Int> operator=PROPERTY_REFERENCE_FOR_DELEGATE
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .<get-prop> type=kotlin.Int operator=GET_PROPERTY
              arg1: CONST Int type=kotlin.Int value='1'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
