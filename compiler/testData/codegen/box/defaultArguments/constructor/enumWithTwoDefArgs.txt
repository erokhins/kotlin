MODULE <test-module>
  FILE /enumWithTwoDefArgs.kt
    CLASS ENUM_CLASS Foo
      CONSTRUCTOR private constructor Foo(/*0*/ a: kotlin.Int = ..., /*1*/ b: kotlin.String = ...)
        a: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='1'
        b: EXPRESSION_BODY
          CONST String type=kotlin.String value='a'
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL Enum super
          SET_BACKING_FIELD a type=kotlin.Unit operator=null
            receiver: THIS public final enum class Foo : kotlin.Enum<Foo> type=Foo
            value: GET_VAR a type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD b type=kotlin.Unit operator=null
            receiver: THIS public final enum class Foo : kotlin.Enum<Foo> type=Foo
            value: GET_VAR b type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Foo
      PROPERTY public final val a: kotlin.Int
        EXPRESSION_BODY
          GET_VAR a type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val b: kotlin.String
        EXPRESSION_BODY
          GET_VAR b type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      ENUM_ENTRY enum entry A
        init: ENUM_CONSTRUCTOR_CALL Foo A
      ENUM_ENTRY enum entry B
        init: ENUM_CONSTRUCTOR_CALL Foo B
          a: CONST Int type=kotlin.Int value='2'
          b: CONST String type=kotlin.String value='b'
      ENUM_ENTRY enum entry C
        init: ENUM_CONSTRUCTOR_CALL Foo C
          b: CONST String type=kotlin.String value='b'
      ENUM_ENTRY enum entry D
        init: ENUM_CONSTRUCTOR_CALL Foo D
          a: CONST Int type=kotlin.Int value='2'
      FUN public final /*synthesized*/ fun values(): kotlin.Array<Foo>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): Foo
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-a> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_ENUM_VALUE A type=Foo
                arg1: CONST Int type=kotlin.Int value='1'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-b> type=kotlin.String operator=GET_PROPERTY
                  $this: GET_ENUM_VALUE A type=Foo
                arg1: CONST String type=kotlin.String value='a'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-a> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_ENUM_VALUE B type=Foo
                arg1: CONST Int type=kotlin.Int value='2'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-b> type=kotlin.String operator=GET_PROPERTY
                  $this: GET_ENUM_VALUE B type=Foo
                arg1: CONST String type=kotlin.String value='b'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-a> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_ENUM_VALUE C type=Foo
                arg1: CONST Int type=kotlin.Int value='1'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-b> type=kotlin.String operator=GET_PROPERTY
                  $this: GET_ENUM_VALUE C type=Foo
                arg1: CONST String type=kotlin.String value='b'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-a> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_ENUM_VALUE D type=Foo
                arg1: CONST Int type=kotlin.Int value='2'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-b> type=kotlin.String operator=GET_PROPERTY
                  $this: GET_ENUM_VALUE D type=Foo
                arg1: CONST String type=kotlin.String value='a'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
