MODULE <test-module>
  FILE /kt6382.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .run type=kotlin.String operator=null
                $this: CALL .<init> type=A operator=null
              arg1: CONST String type=kotlin.String value='Aabc'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      FUN public final fun run(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=run
            CALL .with type=kotlin.String operator=null
              receiver: CONST String type=kotlin.String value='abc'
              block: BLOCK type=kotlin.String.() -> kotlin.String operator=LAMBDA
                FUN local final fun kotlin.String.<anonymous>(): kotlin.String
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .show type=kotlin.String operator=null
                        $this: THIS public final class A type=A
                        $receiver: $RECEIVER of: <anonymous> type=kotlin.String
                CALLABLE_REFERENCE <anonymous> type=kotlin.String.() -> kotlin.String operator=LAMBDA
      FUN private final fun kotlin.String.show(/*0*/ p: kotlin.Boolean = ...): kotlin.String
        p: EXPRESSION_BODY
          CONST Boolean type=kotlin.Boolean value='false'
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=show
            CALL .plus type=kotlin.String operator=PLUS
              $this: CALL .getName type=kotlin.String operator=null
                $this: THIS public final class A type=A
              other: $RECEIVER of: show type=kotlin.String
      FUN private final fun getName(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=getName
            CONST String type=kotlin.String value='A'
