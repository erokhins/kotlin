MODULE <test-module>
  FILE /innerExtentionFunctionDoubleTwoArgs.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      FUN public final fun kotlin.Double.foo(/*0*/ a: kotlin.Double = ..., /*1*/ b: kotlin.Double = ...): kotlin.Double
        a: EXPRESSION_BODY
          CONST Double type=kotlin.Double value='1.0'
        b: EXPRESSION_BODY
          CONST Double type=kotlin.Double value='1.0'
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CALL .plus type=kotlin.Double operator=PLUS
              $this: GET_VAR a type=kotlin.Double operator=null
              other: GET_VAR b type=kotlin.Double operator=null
      FUN public final fun test(): kotlin.String
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.Double operator=null
                  $this: THIS public final class A type=A
                  $receiver: CONST Double type=kotlin.Double value='1.0'
                arg1: CONST Double type=kotlin.Double value='2.0'
            then: RETURN type=kotlin.Nothing from=test
              CONST String type=kotlin.String value='fail'
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.Double operator=null
                  $this: THIS public final class A type=A
                  $receiver: CONST Double type=kotlin.Double value='1.0'
                  a: CONST Double type=kotlin.Double value='2.0'
                  b: CONST Double type=kotlin.Double value='2.0'
                arg1: CONST Double type=kotlin.Double value='4.0'
            then: RETURN type=kotlin.Nothing from=test
              CONST String type=kotlin.String value='fail'
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.Double operator=null
                  $this: THIS public final class A type=A
                  $receiver: CONST Double type=kotlin.Double value='1.0'
                  a: CONST Double type=kotlin.Double value='2.0'
                arg1: CONST Double type=kotlin.Double value='3.0'
            then: RETURN type=kotlin.Nothing from=test
              CONST String type=kotlin.String value='fail'
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.Double operator=null
                  $this: THIS public final class A type=A
                  $receiver: CONST Double type=kotlin.Double value='1.0'
                  b: CONST Double type=kotlin.Double value='2.0'
                arg1: CONST Double type=kotlin.Double value='3.0'
            then: RETURN type=kotlin.Nothing from=test
              CONST String type=kotlin.String value='fail'
          RETURN type=kotlin.Nothing from=test
            CONST String type=kotlin.String value='OK'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          CALL .test type=kotlin.String operator=null
            $this: CALL .<init> type=A operator=null
