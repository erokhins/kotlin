MODULE <test-module>
  FILE /mixingNamedAndPositioned.kt
    FUN public fun foo(/*0*/ a: kotlin.String = ..., /*1*/ b: kotlin.Int = ..., /*2*/ c: kotlin.Long = ...): kotlin.String
      a: EXPRESSION_BODY
        CONST String type=kotlin.String value='Companion'
      b: EXPRESSION_BODY
        CONST Int type=kotlin.Int value='1'
      c: EXPRESSION_BODY
        CONST Long type=kotlin.Long value='2'
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          STRING_CONCATENATION type=kotlin.String
            GET_VAR a type=kotlin.String operator=null
            CONST String type=kotlin.String value=' '
            GET_VAR b type=kotlin.Int operator=null
            CONST String type=kotlin.String value=' '
            GET_VAR c type=kotlin.Long operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val test1: kotlin.String
          CALL .foo type=kotlin.String operator=null
            a: CONST String type=kotlin.String value='test1'
            b: CONST Int type=kotlin.Int value='2'
            c: CONST Long type=kotlin.Long value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR test1 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='test1 2 3'
          then: RETURN type=kotlin.Nothing from=box
            GET_VAR test1 type=kotlin.String operator=null
        VAR val test2: kotlin.String
          CALL .foo type=kotlin.String operator=null
            a: CONST String type=kotlin.String value='test2'
            c: CONST Long type=kotlin.Long value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR test2 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='test2 1 3'
          then: RETURN type=kotlin.Nothing from=box
            GET_VAR test2 type=kotlin.String operator=null
        VAR val test3: kotlin.String
          CALL .foo type=kotlin.String operator=null
            a: CONST String type=kotlin.String value='test3'
            b: CONST Int type=kotlin.Int value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR test3 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='test3 3 2'
          then: RETURN type=kotlin.Nothing from=box
            GET_VAR test3 type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
