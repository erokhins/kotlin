MODULE <test-module>
  FILE /abstractClass.kt
    CLASS CLASS Base
      CONSTRUCTOR public constructor Base()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Base
      FUN public abstract fun foo(/*0*/ a: kotlin.String = ...): kotlin.String
        a: EXPRESSION_BODY
          CONST String type=kotlin.String value='abc'
    CLASS CLASS Derived
      CONSTRUCTOR public constructor Derived()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Base
          INSTANCE_INITIALIZER_CALL classDescriptor=Derived
      FUN public open override /*1*/ fun foo(/*0*/ a: kotlin.String = ...): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            GET_VAR a type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val result: kotlin.String
          CALL .foo type=kotlin.String operator=null
            $this: CALL .<init> type=Derived operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR result type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='abc'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail: '
              GET_VAR result type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
