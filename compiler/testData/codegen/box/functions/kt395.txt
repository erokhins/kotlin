MODULE <test-module>
  FILE /kt395.kt
    FUN public fun kotlin.Any.with(/*0*/ operation: kotlin.Any.() -> kotlin.Any): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=with
          CALL .toString type=kotlin.String operator=null
            $this: CALL .invoke type=kotlin.Any operator=INVOKE
              $this: GET_VAR operation type=kotlin.Any.() -> kotlin.Any operator=VARIABLE_AS_FUNCTION
              $receiver: $RECEIVER of: with type=kotlin.Any
    PROPERTY public val f: (kotlin.Int) -> kotlin.Unit
      EXPRESSION_BODY
        BLOCK type=(kotlin.Int) -> kotlin.Unit operator=LAMBDA
          FUN local final fun <anonymous>(/*0*/ a: kotlin.Int): kotlin.Unit
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=<anonymous>
          CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Unit operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .with type=kotlin.String operator=null
                $receiver: CONST Int type=kotlin.Int value='20'
                operation: BLOCK type=kotlin.Any.() -> kotlin.Any operator=LAMBDA
                  FUN local final fun kotlin.Any.<anonymous>(): kotlin.Any
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                        $RECEIVER of: <anonymous> type=kotlin.Any
                  CALLABLE_REFERENCE <anonymous> type=kotlin.Any.() -> kotlin.Any operator=LAMBDA
              arg1: CONST String type=kotlin.String value='20'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
