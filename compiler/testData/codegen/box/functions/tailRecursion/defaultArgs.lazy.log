LazyAnnotationDescriptor@0 {
    resolutionResults = OverloadResolutionResultsImpl@1
    type = JetTypeImpl@2['tailRecursive']
}

LazyJavaClassDescriptor@3['Exception'] {
    typeConstructor = LazyJavaClassTypeConstructor@4['Exception']
}

LazyJavaClassDescriptor@5['IllegalArgumentException'] {
    constructors = ArrayList@6[4] { JavaConstructorDescriptor@7['<init>'], JavaConstructorDescriptor@8['<init>'], JavaConstructorDescriptor@9['<init>'], ... } // through LazyJavaClassMemberScope@10
    defaultType = JetTypeImpl@11['IllegalArgumentException']
    functionTypeForSamInterface = null
    typeConstructor = LazyJavaClassTypeConstructor@12['IllegalArgumentException']
}

LazyJavaClassDescriptor@13['RuntimeException'] {
    typeConstructor = LazyJavaClassTypeConstructor@14['RuntimeException']
}

LazyJavaClassTypeConstructor@4['Exception'] {
    parameters = ArrayList@15[empty]
    supertypes = ArrayList@16[1] { LazyJavaClassifierType@17['Throwable'] }
}

LazyJavaClassTypeConstructor@12['IllegalArgumentException'] {
    parameters = ArrayList@18[empty]
    supertypes = ArrayList@19[1] { LazyJavaClassifierType@20['RuntimeException'] }
}

LazyJavaClassTypeConstructor@14['RuntimeException'] {
    parameters = ArrayList@21[empty]
    supertypes = ArrayList@22[1] { LazyJavaClassifierType@23['Exception'] }
}

LazyJavaClassifierType@23['Exception'] {
    arguments = ArrayList@24[empty]
    classifier = JavaClassImpl@25['Exception']
    typeConstructor = LazyJavaClassTypeConstructor@4['Exception']
}

LazyJavaClassifierType@20['RuntimeException'] {
    arguments = ArrayList@26[empty]
    classifier = JavaClassImpl@27['RuntimeException']
    typeConstructor = LazyJavaClassTypeConstructor@14['RuntimeException']
}

LazyJavaClassifierType@28['String'] {
    arguments = ArrayList@29[empty]
    classifier = JavaClassImpl@30['String']
    nullable = 'false': Boolean@31
    typeConstructor = DeserializedClassTypeConstructor@32
}

LazyJavaClassifierType@33['String'] {
    arguments = ArrayList@34[empty]
    classifier = JavaClassImpl@35['String']
    nullable = 'false': Boolean@31
    typeConstructor = DeserializedClassTypeConstructor@32
}

LazyJavaClassifierType@36['String'] {
    arguments = ArrayList@37[empty]
    classifier = JavaClassImpl@30['String']
    nullable = 'true': Boolean@38
    typeConstructor = DeserializedClassTypeConstructor@32
}

LazyJavaClassifierType@39['String'] {
    arguments = ArrayList@40[empty]
    classifier = JavaClassImpl@35['String']
    nullable = 'true': Boolean@38
    typeConstructor = DeserializedClassTypeConstructor@32
}

LazyJavaClassifierType@41['Throwable'] {
    arguments = ArrayList@42[empty]
    classifier = JavaClassImpl@43['Throwable']
    nullable = 'false': Boolean@31
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@45['Throwable'] {
    arguments = ArrayList@46[empty]
    classifier = JavaClassImpl@47['Throwable']
    nullable = 'false': Boolean@31
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@48['Throwable'] {
    arguments = ArrayList@49[empty]
    classifier = JavaClassImpl@43['Throwable']
    nullable = 'true': Boolean@38
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@50['Throwable'] {
    arguments = ArrayList@51[empty]
    classifier = JavaClassImpl@47['Throwable']
    nullable = 'true': Boolean@38
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaClassifierType@17['Throwable'] {
    arguments = ArrayList@52[empty]
    classifier = JavaClassImpl@53['Throwable']
    typeConstructor = DeserializedClassTypeConstructor@44
}

LazyJavaPackageFragmentProvider@54 {
    packageFragments('<root>': FqName@55) = LazyJavaPackageFragment@56['<root>']
    packageFragments('Any': FqName@57) = null
    packageFragments('Int': FqName@58) = null
    packageFragments('String': FqName@59) = null
    packageFragments('java': FqName@60) = LazyJavaPackageFragment@61['java']
    packageFragments('java.lang': FqName@62) = LazyJavaPackageFragment@63['lang']
    packageFragments('java.lang.Any': FqName@64) = null
    packageFragments('java.lang.Int': FqName@65) = null
    packageFragments('java.lang.String': FqName@66) = null
    packageFragments('java.lang.tailRecursive': FqName@67) = null
    packageFragments('kotlin': FqName@68) = null
    packageFragments('kotlin.Any': FqName@69) = null
    packageFragments('kotlin.Int': FqName@70) = null
    packageFragments('kotlin.String': FqName@71) = null
    packageFragments('kotlin.io': FqName@72) = null
    packageFragments('kotlin.jvm': FqName@73) = null
    packageFragments('kotlin.tailRecursive': FqName@74) = null
    packageFragments('tailRecursive': FqName@75) = null
    topLevelClasses(JavaClassImpl@25['Exception']) = LazyJavaClassDescriptor@3['Exception']
    topLevelClasses(JavaClassImpl@76['IllegalArgumentException']) = LazyJavaClassDescriptor@5['IllegalArgumentException']
    topLevelClasses(JavaClassImpl@27['RuntimeException']) = LazyJavaClassDescriptor@13['RuntimeException']
}

LazyJavaPackageFragment@56['<root>'] {
    classes('Any': Name@77) = null // through LazyPackageFragmentScopeForJavaPackage@78
    classes('IllegalArgumentException': Name@79) = null // through LazyPackageFragmentScopeForJavaPackage@78
    classes('Int': Name@80) = null // through LazyPackageFragmentScopeForJavaPackage@78
    classes('String': Name@81) = null // through LazyPackageFragmentScopeForJavaPackage@78
    classes('tailRecursive': Name@82) = null // through LazyPackageFragmentScopeForJavaPackage@78
    classes('test': Name@83) = null // through LazyPackageFragmentScopeForJavaPackage@78
    deserializedPackageScope = Empty@84 // through LazyPackageFragmentScopeForJavaPackage@78
    functions('IllegalArgumentException': Name@79) = EmptyList@85[empty] // through LazyPackageFragmentScopeForJavaPackage@78
    functions('test': Name@83) = EmptyList@85[empty] // through LazyPackageFragmentScopeForJavaPackage@78
    memberIndex = computeMemberIndex$1@86 // through LazyPackageFragmentScopeForJavaPackage@78
}

LazyJavaPackageFragment@61['java'] {
    classes('lang': Name@87) = null // through LazyPackageFragmentScopeForJavaPackage@88
    deserializedPackageScope = Empty@84 // through LazyPackageFragmentScopeForJavaPackage@88
    functions('lang': Name@89) = EmptyList@85[empty] // through LazyPackageFragmentScopeForJavaPackage@88
    memberIndex = computeMemberIndex$1@90 // through LazyPackageFragmentScopeForJavaPackage@88
}

LazyJavaPackageFragment@63['lang'] {
    classes('IllegalArgumentException': Name@79) = LazyJavaClassDescriptor@5['IllegalArgumentException'] // through LazyPackageFragmentScopeForJavaPackage@91
    classes('test': Name@83) = null // through LazyPackageFragmentScopeForJavaPackage@91
    deserializedPackageScope = Empty@84 // through LazyPackageFragmentScopeForJavaPackage@91
    functions('IllegalArgumentException': Name@79) = EmptyList@85[empty] // through LazyPackageFragmentScopeForJavaPackage@91
    functions('test': Name@83) = EmptyList@85[empty] // through LazyPackageFragmentScopeForJavaPackage@91
    memberIndex = computeMemberIndex$1@92 // through LazyPackageFragmentScopeForJavaPackage@91
}

ResolutionTaskHolder@93 {
    <name not found> = ArrayList@94[1] { ResolutionCandidate@95 }
    <name not found> = ArrayList@96[1] { ResolutionCandidate@95 }
    <name not found> = EmptyList@85[empty]
    <name not found> = EmptyList@85[empty]
    <name not found> = EmptyList@85[empty]
    <name not found> = EmptyList@85[empty]
}

ResolutionTaskHolder@97 {
    <name not found> = ArrayList@98[1] { ResolutionCandidate@99 }
    <name not found> = ArrayList@100[1] { ResolutionCandidate@99 }
    <name not found> = EmptyList@85[empty]
    <name not found> = EmptyList@85[empty]
    <name not found> = EmptyList@85[empty]
    <name not found> = EmptyList@85[empty]
}

ResolutionTaskHolder@101 {
    <name not found> = ArrayList@102[1] { ResolutionCandidate@103 }
    <name not found> = ArrayList@104[1] { ResolutionCandidate@103 }
}

ResolutionTaskHolder@105 {
    <name not found> = ArrayList@106[1] { ResolutionCandidate@107 }
    <name not found> = ArrayList@108[1] { ResolutionCandidate@107 }
}

ResolutionTaskHolder@109 {
    <name not found> = ArrayList@110[1] { ResolutionCandidate@111 }
    <name not found> = ArrayList@112[1] { ResolutionCandidate@111 }
}

ResolutionTaskHolder@113 {
    <name not found> = ArrayList@114[1] { ResolutionCandidate@115 }
    <name not found> = ArrayList@116[1] { ResolutionCandidate@115 }
}

ResolutionTaskHolder@117 {
    <name not found> = ArrayList@118[1] { ResolutionCandidate@119 }
    <name not found> = ArrayList@120[1] { ResolutionCandidate@119 }
}

ResolutionTaskHolder@121 {
    <name not found> = ArrayList@122[1] { ResolutionCandidate@123 }
    <name not found> = ArrayList@124[1] { ResolutionCandidate@123 }
}

ResolutionTaskHolder@125 {
    <name not found> = ArrayList@126[4] { ResolutionCandidate@127, ResolutionCandidate@128, ResolutionCandidate@129, ... }
    <name not found> = ArrayList@130[4] { ResolutionCandidate@127, ResolutionCandidate@128, ResolutionCandidate@129, ... }
    <name not found> = EmptyList@85[empty]
    <name not found> = EmptyList@85[empty]
    <name not found> = EmptyList@85[empty]
    <name not found> = EmptyList@85[empty]
}

ResolutionTaskHolder@131 {
    <name not found> = ArrayList@132[7] { ResolutionCandidate@133, ResolutionCandidate@134, ResolutionCandidate@135, ... }
    <name not found> = ArrayList@136[7] { ResolutionCandidate@133, ResolutionCandidate@134, ResolutionCandidate@135, ... }
}

ResolutionTaskHolder@137 {
    <name not found> = ArrayList@138[8] { ResolutionCandidate@139, ResolutionCandidate@140, ResolutionCandidate@141, ... }
    <name not found> = ArrayList@142[8] { ResolutionCandidate@139, ResolutionCandidate@140, ResolutionCandidate@141, ... }
}
