MODULE <test-module>
  FILE /defaultargs5.kt
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      FUN public abstract fun foo2(/*0*/ arg: kotlin.Int = ...): kotlin.Int
        arg: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='239'
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL B
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      FUN public open override /*1*/ fun foo2(/*0*/ arg: kotlin.Int = ...): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo2
            GET_VAR arg type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .foo2 type=kotlin.Int operator=null
                $this: CALL .<init> type=C operator=null
              arg1: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .foo2 type=kotlin.Int operator=null
                $this: CALL .<init> type=C operator=null
                arg: CONST Int type=kotlin.Int value='10'
              arg1: CONST Int type=kotlin.Int value='10'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
