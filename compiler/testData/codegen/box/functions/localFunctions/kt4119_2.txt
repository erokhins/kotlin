MODULE <test-module>
  FILE /kt4119_2.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        FUN local final infix fun kotlin.Int.foo(/*0*/ a: kotlin.Int): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=foo
              CALL .plus type=kotlin.Int operator=PLUS
                $this: GET_VAR a type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='2'
        VAR val s: box.<no name provided>
          BLOCK type=box.<no name provided> operator=OBJECT_LITERAL
            CLASS CLASS <no name provided>
              CONSTRUCTOR public constructor <no name provided>()
                BLOCK_BODY
                  DELEGATING_CONSTRUCTOR_CALL Any
                  INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
              FUN public final fun test(): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=test
                    CALL .foo type=kotlin.Int operator=null
                      $receiver: CONST Int type=kotlin.Int value='1'
                      a: CONST Int type=kotlin.Int value='1'
            CALL .<init> type=box.<no name provided> operator=OBJECT_LITERAL
        FUN local final fun local(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=local
              CALL .foo type=kotlin.Int operator=null
                $receiver: CONST Int type=kotlin.Int value='1'
                a: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test type=kotlin.Int operator=null
                $this: GET_VAR s type=box.<no name provided> operator=null
              arg1: CONST Int type=kotlin.Int value='3'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .local type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='3'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
