MODULE <test-module>
  FILE /callInlineLocalInLambda.kt
    FUN public inline fun foo(/*0*/ x: kotlin.String, /*1*/ block: (kotlin.String) -> kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CALL .invoke type=kotlin.String operator=INVOKE
            $this: GET_VAR block type=(kotlin.String) -> kotlin.String operator=VARIABLE_AS_FUNCTION
            p1: GET_VAR x type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        FUN local final fun bar(/*0*/ y: kotlin.String): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=bar
              CALL .plus type=kotlin.String operator=PLUS
                $this: GET_VAR y type=kotlin.String operator=null
                other: CONST String type=kotlin.String value='cde'
        VAR val res: kotlin.String
          CALL .foo type=kotlin.String operator=null
            x: CONST String type=kotlin.String value='abc'
            block: BLOCK type=(kotlin.String) -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.String): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .bar type=kotlin.String operator=null
                      y: GET_VAR it type=kotlin.String operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.String) -> kotlin.String operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='abccde'
          actual: GET_VAR res type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
