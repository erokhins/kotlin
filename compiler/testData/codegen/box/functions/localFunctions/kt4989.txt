MODULE <test-module>
  FILE /kt4989.kt
    CLASS CLASS It
      CONSTRUCTOR public constructor It(/*0*/ id: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD id type=kotlin.Unit operator=null
            receiver: THIS public final class It type=It
            value: GET_VAR id type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=It
      PROPERTY public final val id: kotlin.String
        EXPRESSION_BODY
          GET_VAR id type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val projectId: kotlin.String = "projectId"
          CONST String type=kotlin.String value='projectId'
        VAR val it: It
          CALL .<init> type=It operator=null
            id: CONST String type=kotlin.String value='it'
        FUN local final fun selectMetaRunnerId(): kotlin.String
          BLOCK_BODY
            FUN local final operator fun kotlin.Int?.inc(): kotlin.Int
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=inc
                  CALL .plus type=kotlin.Int operator=PLUS
                    $this: BLOCK type=kotlin.Int operator=ELVIS
                      VAR val tmp0_elvis_lhs: kotlin.Int?
                        $RECEIVER of: inc type=kotlin.Int?
                      WHEN type=kotlin.Int operator=null
                        if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                          arg0: GET_VAR tmp0_elvis_lhs type=kotlin.Int? operator=null
                          arg1: CONST Null type=kotlin.Nothing? value='null'
                        then: CONST Int type=kotlin.Int value='0'
                        else: GET_VAR tmp0_elvis_lhs type=kotlin.Int? operator=null
                    other: CONST Int type=kotlin.Int value='1'
            VAR var counter: kotlin.Int?
              CONST Null type=kotlin.Nothing? value='null'
            FUN local final fun path(/*0*/ metaRunnerId: kotlin.String): kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=path
                  CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                    arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                      arg0: GET_VAR counter type=kotlin.Int? operator=null
                      arg1: CONST Int type=kotlin.Int value='2'
            WHILE label=null operator=WHILE_LOOP
              condition: CONST Boolean type=kotlin.Boolean value='true'
              body: BLOCK type=kotlin.Int? operator=null
                VAR val name: kotlin.String
                  CALL .plus type=kotlin.String operator=PLUS
                    $this: CALL .plus type=kotlin.String operator=PLUS
                      $this: CALL .plus type=kotlin.String operator=PLUS
                        $this: GET_VAR projectId type=kotlin.String operator=null
                        other: CONST String type=kotlin.String value='_'
                      other: CALL .<get-id> type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR it type=It operator=null
                    other: WHEN type=kotlin.String operator=IF
                      if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR counter type=kotlin.Int? operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST String type=kotlin.String value=''
                      else: STRING_CONCATENATION type=kotlin.String
                        CONST String type=kotlin.String value='_'
                        GET_VAR counter type=kotlin.Int? operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .not type=kotlin.Boolean operator=EXCL
                    $this: CALL .path type=kotlin.Boolean operator=null
                      metaRunnerId: GET_VAR name type=kotlin.String operator=null
                  then: BLOCK type=kotlin.Nothing operator=null
                    RETURN type=kotlin.Nothing from=selectMetaRunnerId
                      GET_VAR name type=kotlin.String operator=null
                BLOCK type=kotlin.Int? operator=POSTFIX_INCR
                  VAR val tmp0: kotlin.Int?
                    GET_VAR counter type=kotlin.Int? operator=POSTFIX_INCR
                  SET_VAR counter type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $receiver: GET_VAR tmp0 type=kotlin.Int? operator=null
                  GET_VAR tmp0 type=kotlin.Int? operator=null
        VAR val X: kotlin.String
          CALL .selectMetaRunnerId type=kotlin.String operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR X type=kotlin.String operator=null
              arg1: CALL .plus type=kotlin.String operator=PLUS
                $this: CALL .plus type=kotlin.String operator=PLUS
                  $this: CALL .plus type=kotlin.String operator=PLUS
                    $this: GET_VAR projectId type=kotlin.String operator=null
                    other: CONST String type=kotlin.String value='_'
                  other: CALL .<get-id> type=kotlin.String operator=GET_PROPERTY
                    $this: GET_VAR it type=It operator=null
                other: CONST String type=kotlin.String value='_2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: '
              GET_VAR X type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
