MODULE <test-module>
  FILE /defaultargs1.kt
    FUN public fun </*0*/ T> T.toPrefixedString(/*0*/ prefix: kotlin.String = ..., /*1*/ suffix: kotlin.String = ...): kotlin.String
      prefix: EXPRESSION_BODY
        CONST String type=kotlin.String value=''
      suffix: EXPRESSION_BODY
        CONST String type=kotlin.String value=''
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=toPrefixedString
          CALL .plus type=kotlin.String operator=PLUS
            $this: CALL .plus type=kotlin.String operator=PLUS
              $this: GET_VAR prefix type=kotlin.String operator=null
              other: CALL .toString type=kotlin.String operator=null
                $receiver: $RECEIVER of: toPrefixedString type=T
            other: GET_VAR suffix type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.String operator=ARGUMENTS_REORDERING_FOR_CALL
                VAR val tmp0_suffix: kotlin.String
                  CONST String type=kotlin.String value='321'
                VAR val tmp1_prefix: kotlin.String
                  CONST String type=kotlin.String value='papa'
                CALL .toPrefixedString type=kotlin.String operator=null
                  $receiver: CONST String type=kotlin.String value='mama'
                  prefix: GET_VAR tmp1_prefix type=kotlin.String operator=null
                  suffix: GET_VAR tmp0_suffix type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='papamama321'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toPrefixedString type=kotlin.String operator=null
                $receiver: CONST String type=kotlin.String value='mama'
                prefix: CONST String type=kotlin.String value='papa'
              arg1: CONST String type=kotlin.String value='papamama'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toPrefixedString type=kotlin.String operator=null
                $receiver: CONST String type=kotlin.String value='mama'
                prefix: CONST String type=kotlin.String value='papa'
                suffix: CONST String type=kotlin.String value='239'
              arg1: CONST String type=kotlin.String value='papamama239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toPrefixedString type=kotlin.String operator=null
                $receiver: CONST String type=kotlin.String value='mama'
                prefix: CONST String type=kotlin.String value='papa'
              arg1: CONST String type=kotlin.String value='papamama'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toPrefixedString type=kotlin.String operator=null
                $receiver: CONST String type=kotlin.String value='mama'
              arg1: CONST String type=kotlin.String value='mama'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
