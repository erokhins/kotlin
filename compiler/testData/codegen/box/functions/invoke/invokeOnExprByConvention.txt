MODULE <test-module>
  FILE /invokeOnExprByConvention.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      FUN public final operator fun invoke(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=invoke
            CONST String type=kotlin.String value='##'
      FUN public final operator fun invoke(/*0*/ i: kotlin.Int): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=invoke
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='#'
              GET_VAR i type=kotlin.Int operator=null
    FUN public fun foo(): A
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CALL .<init> type=A operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .invoke type=kotlin.String operator=null
                $this: CALL .<init> type=A operator=null
              arg1: CONST String type=kotlin.String value='##'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .invoke type=kotlin.String operator=null
                $this: CALL .<init> type=A operator=null
                i: CONST Int type=kotlin.Int value='1'
              arg1: CONST String type=kotlin.String value='#1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .invoke type=kotlin.String operator=null
                $this: CALL .foo type=A operator=null
              arg1: CONST String type=kotlin.String value='##'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .invoke type=kotlin.String operator=null
                $this: CALL .foo type=A operator=null
                i: CONST Int type=kotlin.Int value='42'
              arg1: CONST String type=kotlin.String value='#42'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail4'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .invoke type=kotlin.String operator=null
                $this: CALL .foo type=A operator=null
                i: CONST Int type=kotlin.Int value='42'
              arg1: CONST String type=kotlin.String value='#42'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail5'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .invoke type=kotlin.String operator=null
                $this: CALL .invoke type=A operator=null
                  $this: BLOCK type=() -> A operator=LAMBDA
                    FUN local final fun <anonymous>(): A
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          CALL .<init> type=A operator=null
                    CALLABLE_REFERENCE <anonymous> type=() -> A operator=LAMBDA
              arg1: CONST String type=kotlin.String value='##'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail6'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .invoke type=kotlin.String operator=null
                $this: CALL .invoke type=A operator=null
                  $this: BLOCK type=() -> A operator=LAMBDA
                    FUN local final fun <anonymous>(): A
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          CALL .<init> type=A operator=null
                    CALLABLE_REFERENCE <anonymous> type=() -> A operator=LAMBDA
                i: CONST Int type=kotlin.Int value='37'
              arg1: CONST String type=kotlin.String value='#37'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail7'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
