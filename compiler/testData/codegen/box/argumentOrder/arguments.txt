MODULE <test-module>
  FILE /arguments.kt
    FUN public fun test(/*0*/ a: kotlin.String, /*1*/ b: kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=test
          CALL .plus type=kotlin.String operator=PLUS
            $this: GET_VAR a type=kotlin.String operator=null
            other: GET_VAR b type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var res: kotlin.String
          CONST String type=kotlin.String value=''
        VAR val call: kotlin.String
          BLOCK type=kotlin.String operator=ARGUMENTS_REORDERING_FOR_CALL
            VAR val tmp0_b: kotlin.String
              CALL .invoke type=kotlin.String operator=null
                $this: BLOCK type=() -> kotlin.String operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.String
                    BLOCK_BODY
                      SET_VAR res type=kotlin.Unit operator=PLUSEQ
                        CALL .plus type=kotlin.String operator=PLUSEQ
                          $this: GET_VAR res type=kotlin.String operator=PLUSEQ
                          other: CONST String type=kotlin.String value='K'
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CONST String type=kotlin.String value='K'
                  CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
            VAR val tmp1_a: kotlin.String
              CALL .invoke type=kotlin.String operator=null
                $this: BLOCK type=() -> kotlin.String operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.String
                    BLOCK_BODY
                      SET_VAR res type=kotlin.Unit operator=PLUSEQ
                        CALL .plus type=kotlin.String operator=PLUSEQ
                          $this: GET_VAR res type=kotlin.String operator=PLUSEQ
                          other: CONST String type=kotlin.String value='O'
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CONST String type=kotlin.String value='O'
                  CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
            CALL .test type=kotlin.String operator=null
              a: GET_VAR tmp1_a type=kotlin.String operator=null
              b: GET_VAR tmp0_b type=kotlin.String operator=null
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: GET_VAR res type=kotlin.String operator=null
                arg1: CONST String type=kotlin.String value='KO'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: GET_VAR call type=kotlin.String operator=null
                arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: '
              GET_VAR res type=kotlin.String operator=null
              CONST String type=kotlin.String value=' != KO or '
              GET_VAR call type=kotlin.String operator=null
              CONST String type=kotlin.String value=' != OK'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
