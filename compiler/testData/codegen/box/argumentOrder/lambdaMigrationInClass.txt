MODULE <test-module>
  FILE /lambdaMigrationInClass.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var res: kotlin.String
          CONST String type=kotlin.String value=''
        VAR var call: kotlin.String
          CALL .test type=kotlin.String operator=null
            $this: CALL .<init> type=Z operator=null
              p: CONST String type=kotlin.String value='Z'
            a: CALL .invoke type=kotlin.String operator=null
              $this: BLOCK type=() -> kotlin.String operator=LAMBDA
                FUN local final fun <anonymous>(): kotlin.String
                  BLOCK_BODY
                    SET_VAR res type=kotlin.Unit operator=PLUSEQ
                      CALL .plus type=kotlin.String operator=PLUSEQ
                        $this: GET_VAR res type=kotlin.String operator=PLUSEQ
                        other: CONST String type=kotlin.String value='K'
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CONST String type=kotlin.String value='K'
                CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
            b: CALL .invoke type=kotlin.String operator=null
              $this: BLOCK type=() -> kotlin.String operator=LAMBDA
                FUN local final fun <anonymous>(): kotlin.String
                  BLOCK_BODY
                    SET_VAR res type=kotlin.Unit operator=PLUSEQ
                      CALL .plus type=kotlin.String operator=PLUSEQ
                        $this: GET_VAR res type=kotlin.String operator=PLUSEQ
                        other: CONST String type=kotlin.String value='O'
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CONST String type=kotlin.String value='O'
                CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
            c: BLOCK type=() -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String
                BLOCK_BODY
                  SET_VAR res type=kotlin.Unit operator=PLUSEQ
                    CALL .plus type=kotlin.String operator=PLUSEQ
                      $this: GET_VAR res type=kotlin.String operator=PLUSEQ
                      other: CONST String type=kotlin.String value='L'
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CONST String type=kotlin.String value='L'
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: GET_VAR res type=kotlin.String operator=null
                arg1: CONST String type=kotlin.String value='KOL'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: GET_VAR call type=kotlin.String operator=null
                arg1: CONST String type=kotlin.String value='KOLZ'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 1: '
              GET_VAR res type=kotlin.String operator=null
              CONST String type=kotlin.String value=' != KOL or '
              GET_VAR call type=kotlin.String operator=null
              CONST String type=kotlin.String value=' != KOLZ'
        SET_VAR res type=kotlin.Unit operator=EQ
          CONST String type=kotlin.String value=''
        SET_VAR call type=kotlin.Unit operator=EQ
          BLOCK type=kotlin.String operator=ARGUMENTS_REORDERING_FOR_CALL
            VAR val tmp0_a: kotlin.String
              CALL .invoke type=kotlin.String operator=null
                $this: BLOCK type=() -> kotlin.String operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.String
                    BLOCK_BODY
                      SET_VAR res type=kotlin.Unit operator=PLUSEQ
                        CALL .plus type=kotlin.String operator=PLUSEQ
                          $this: GET_VAR res type=kotlin.String operator=PLUSEQ
                          other: CONST String type=kotlin.String value='K'
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CONST String type=kotlin.String value='K'
                  CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
            VAR val tmp1_c: () -> kotlin.String
              BLOCK type=() -> kotlin.String operator=LAMBDA
                FUN local final fun <anonymous>(): kotlin.String
                  BLOCK_BODY
                    SET_VAR res type=kotlin.Unit operator=PLUSEQ
                      CALL .plus type=kotlin.String operator=PLUSEQ
                        $this: GET_VAR res type=kotlin.String operator=PLUSEQ
                        other: CONST String type=kotlin.String value='L'
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CONST String type=kotlin.String value='L'
                CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
            VAR val tmp2_b: kotlin.String
              CALL .invoke type=kotlin.String operator=null
                $this: BLOCK type=() -> kotlin.String operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.String
                    BLOCK_BODY
                      SET_VAR res type=kotlin.Unit operator=PLUSEQ
                        CALL .plus type=kotlin.String operator=PLUSEQ
                          $this: GET_VAR res type=kotlin.String operator=PLUSEQ
                          other: CONST String type=kotlin.String value='O'
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CONST String type=kotlin.String value='O'
                  CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
            CALL .test type=kotlin.String operator=null
              $this: CALL .<init> type=Z operator=null
                p: CONST String type=kotlin.String value='Z'
              a: GET_VAR tmp0_a type=kotlin.String operator=null
              b: GET_VAR tmp2_b type=kotlin.String operator=null
              c: GET_VAR tmp1_c type=() -> kotlin.String operator=null
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: GET_VAR res type=kotlin.String operator=null
                arg1: CONST String type=kotlin.String value='KOL'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: GET_VAR call type=kotlin.String operator=null
                arg1: CONST String type=kotlin.String value='KOLZ'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 2: '
              GET_VAR res type=kotlin.String operator=null
              CONST String type=kotlin.String value=' != KOL or '
              GET_VAR call type=kotlin.String operator=null
              CONST String type=kotlin.String value=' != KOLZ'
        SET_VAR res type=kotlin.Unit operator=EQ
          CONST String type=kotlin.String value=''
        SET_VAR call type=kotlin.Unit operator=EQ
          BLOCK type=kotlin.String operator=ARGUMENTS_REORDERING_FOR_CALL
            VAR val tmp3_c: () -> kotlin.String
              BLOCK type=() -> kotlin.String operator=LAMBDA
                FUN local final fun <anonymous>(): kotlin.String
                  BLOCK_BODY
                    SET_VAR res type=kotlin.Unit operator=PLUSEQ
                      CALL .plus type=kotlin.String operator=PLUSEQ
                        $this: GET_VAR res type=kotlin.String operator=PLUSEQ
                        other: CONST String type=kotlin.String value='L'
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CONST String type=kotlin.String value='L'
                CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
            VAR val tmp4_a: kotlin.String
              CALL .invoke type=kotlin.String operator=null
                $this: BLOCK type=() -> kotlin.String operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.String
                    BLOCK_BODY
                      SET_VAR res type=kotlin.Unit operator=PLUSEQ
                        CALL .plus type=kotlin.String operator=PLUSEQ
                          $this: GET_VAR res type=kotlin.String operator=PLUSEQ
                          other: CONST String type=kotlin.String value='K'
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CONST String type=kotlin.String value='K'
                  CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
            VAR val tmp5_b: kotlin.String
              CALL .invoke type=kotlin.String operator=null
                $this: BLOCK type=() -> kotlin.String operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.String
                    BLOCK_BODY
                      SET_VAR res type=kotlin.Unit operator=PLUSEQ
                        CALL .plus type=kotlin.String operator=PLUSEQ
                          $this: GET_VAR res type=kotlin.String operator=PLUSEQ
                          other: CONST String type=kotlin.String value='O'
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CONST String type=kotlin.String value='O'
                  CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
            CALL .test type=kotlin.String operator=null
              $this: CALL .<init> type=Z operator=null
                p: CONST String type=kotlin.String value='Z'
              a: GET_VAR tmp4_a type=kotlin.String operator=null
              b: GET_VAR tmp5_b type=kotlin.String operator=null
              c: GET_VAR tmp3_c type=() -> kotlin.String operator=null
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: GET_VAR res type=kotlin.String operator=null
                arg1: CONST String type=kotlin.String value='KOL'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: GET_VAR call type=kotlin.String operator=null
                arg1: CONST String type=kotlin.String value='KOLZ'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 3: '
              GET_VAR res type=kotlin.String operator=null
              CONST String type=kotlin.String value=' != KOL or '
              GET_VAR call type=kotlin.String operator=null
              CONST String type=kotlin.String value=' != KOLZ'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
    CLASS CLASS Z
      CONSTRUCTOR public constructor Z(/*0*/ p: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD p type=kotlin.Unit operator=null
            receiver: THIS public final class Z type=Z
            value: GET_VAR p type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Z
      PROPERTY public final val p: kotlin.String
        EXPRESSION_BODY
          GET_VAR p type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun test(/*0*/ a: kotlin.String, /*1*/ b: kotlin.String, /*2*/ c: () -> kotlin.String): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=test
            CALL .plus type=kotlin.String operator=PLUS
              $this: CALL .plus type=kotlin.String operator=PLUS
                $this: CALL .plus type=kotlin.String operator=PLUS
                  $this: GET_VAR a type=kotlin.String operator=null
                  other: GET_VAR b type=kotlin.String operator=null
                other: CALL .invoke type=kotlin.String operator=INVOKE
                  $this: GET_VAR c type=() -> kotlin.String operator=VARIABLE_AS_FUNCTION
              other: CALL .<get-p> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public final class Z type=Z
