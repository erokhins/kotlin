MODULE <test-module>
  FILE /kt318.kt
    PROPERTY public var result: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value=''
    CLASS INTERFACE Base
    CLASS CLASS Child
      CONSTRUCTOR public constructor Child()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Child
    CLASS INTERFACE A
      FUN public open fun </*0*/ E : T> foo(/*0*/ a: E): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=PLUSEQ
            CALL .<set-result> type=kotlin.Unit operator=PLUSEQ
              <set-?>: CALL .plus type=kotlin.String operator=PLUSEQ
                $this: CALL .<get-result> type=kotlin.String operator=PLUSEQ
                other: CONST String type=kotlin.String value='A'
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      FUN public open override /*1*/ fun </*0*/ E : Child> foo(/*0*/ a: E): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=PLUSEQ
            CALL .<set-result> type=kotlin.Unit operator=PLUSEQ
              <set-?>: CALL .plus type=kotlin.String operator=PLUSEQ
                $this: CALL .<get-result> type=kotlin.String operator=PLUSEQ
                other: CONST String type=kotlin.String value='B'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val b: B
          CALL .<init> type=B operator=null
        CALL .foo type=kotlin.Unit operator=null
          $this: GET_VAR b type=B operator=null
          a: CALL .<init> type=Child operator=null
        VAR val a: A<Child>
          GET_VAR b type=B operator=null
        CALL .foo type=kotlin.Unit operator=null
          $this: GET_VAR a type=A<Child> operator=null
          a: CALL .<init> type=Child operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
              arg1: CONST String type=kotlin.String value='BB'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail: '
              CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
