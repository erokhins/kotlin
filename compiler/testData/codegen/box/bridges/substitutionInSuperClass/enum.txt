MODULE <test-module>
  FILE /enum.kt
    CLASS INTERFACE A
      FUN public open fun foo(/*0*/ t: T): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CONST String type=kotlin.String value='A'
    CLASS INTERFACE B
    CLASS ENUM_CLASS Z
      CONSTRUCTOR private constructor Z(/*0*/ aname: kotlin.String)
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL Enum super
          SET_BACKING_FIELD aname type=kotlin.Unit operator=null
            receiver: THIS public final enum class Z : kotlin.Enum<Z>, B type=Z
            value: GET_VAR aname type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Z
      PROPERTY public final val aname: kotlin.String
        EXPRESSION_BODY
          GET_VAR aname type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      ENUM_ENTRY enum entry Z1
        init: ENUM_CONSTRUCTOR_CALL Z Z1
          aname: CONST String type=kotlin.String value='Z1'
      ENUM_ENTRY enum entry Z2
        init: ENUM_CONSTRUCTOR_CALL Z Z2
          aname: CONST String type=kotlin.String value='Z2'
      FUN public open override /*1*/ fun foo(/*0*/ t: kotlin.String): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CALL .<get-aname> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public final enum class Z : kotlin.Enum<Z>, B type=Z
      FUN public final /*synthesized*/ fun values(): kotlin.Array<Z>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): Z
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val z1b: B
          GET_ENUM_VALUE Z1 type=Z
        VAR val z2b: B
          GET_ENUM_VALUE Z2 type=Z
        VAR val z1a: A<kotlin.String>
          GET_ENUM_VALUE Z1 type=Z
        VAR val z2a: A<kotlin.String>
          GET_ENUM_VALUE Z2 type=Z
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=WHEN
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.String operator=null
                  $this: GET_ENUM_VALUE Z1 type=Z
                  t: CONST String type=kotlin.String value=''
                arg1: CONST String type=kotlin.String value='Z1'
            then: CONST String type=kotlin.String value='Fail #1'
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.String operator=null
                  $this: GET_ENUM_VALUE Z2 type=Z
                  t: CONST String type=kotlin.String value=''
                arg1: CONST String type=kotlin.String value='Z2'
            then: CONST String type=kotlin.String value='Fail #2'
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.String operator=null
                  $this: GET_VAR z1b type=B operator=null
                  t: CONST String type=kotlin.String value=''
                arg1: CONST String type=kotlin.String value='Z1'
            then: CONST String type=kotlin.String value='Fail #3'
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.String operator=null
                  $this: GET_VAR z2b type=B operator=null
                  t: CONST String type=kotlin.String value=''
                arg1: CONST String type=kotlin.String value='Z2'
            then: CONST String type=kotlin.String value='Fail #4'
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.String operator=null
                  $this: GET_VAR z1a type=A<kotlin.String> operator=null
                  t: CONST String type=kotlin.String value=''
                arg1: CONST String type=kotlin.String value='Z1'
            then: CONST String type=kotlin.String value='Fail #5'
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.String operator=null
                  $this: GET_VAR z2a type=A<kotlin.String> operator=null
                  t: CONST String type=kotlin.String value=''
                arg1: CONST String type=kotlin.String value='Z2'
            then: CONST String type=kotlin.String value='Fail #6'
            else: CONST String type=kotlin.String value='OK'
