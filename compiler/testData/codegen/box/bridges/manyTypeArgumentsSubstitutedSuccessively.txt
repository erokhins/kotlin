MODULE <test-module>
  FILE /manyTypeArgumentsSubstitutedSuccessively.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A</*0*/ T, /*1*/ U, /*2*/ V>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      FUN public open fun foo(/*0*/ t: T, /*1*/ u: U, /*2*/ v: V): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CONST String type=kotlin.String value='A'
    CLASS CLASS B
      CONSTRUCTOR public constructor B</*0*/ T, /*1*/ V>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL A
          INSTANCE_INITIALIZER_CALL classDescriptor=B
    CLASS CLASS C
      CONSTRUCTOR public constructor C</*0*/ V>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL B
          INSTANCE_INITIALIZER_CALL classDescriptor=C
    CLASS CLASS Z
      CONSTRUCTOR public constructor Z()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL C
          INSTANCE_INITIALIZER_CALL classDescriptor=Z
      FUN public open override /*1*/ fun foo(/*0*/ t: kotlin.String, /*1*/ u: kotlin.Int, /*2*/ v: kotlin.Double): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CONST String type=kotlin.String value='Z'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val z: Z
          CALL .<init> type=Z operator=null
        VAR val c: C<kotlin.Double>
          GET_VAR z type=Z operator=null
        VAR val b: B<kotlin.String, kotlin.Double>
          GET_VAR z type=Z operator=null
        VAR val a: A<kotlin.String, kotlin.Int, kotlin.Double>
          GET_VAR z type=Z operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=WHEN
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.String operator=null
                  $this: GET_VAR z type=Z operator=null
                  t: CONST String type=kotlin.String value=''
                  u: CONST Int type=kotlin.Int value='0'
                  v: CONST Double type=kotlin.Double value='0.0'
                arg1: CONST String type=kotlin.String value='Z'
            then: CONST String type=kotlin.String value='Fail #1'
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.String operator=null
                  $this: GET_VAR c type=C<kotlin.Double> operator=null
                  t: CONST String type=kotlin.String value=''
                  u: CONST Int type=kotlin.Int value='0'
                  v: CONST Double type=kotlin.Double value='0.0'
                arg1: CONST String type=kotlin.String value='Z'
            then: CONST String type=kotlin.String value='Fail #2'
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.String operator=null
                  $this: GET_VAR b type=B<kotlin.String, kotlin.Double> operator=null
                  t: CONST String type=kotlin.String value=''
                  u: CONST Int type=kotlin.Int value='0'
                  v: CONST Double type=kotlin.Double value='0.0'
                arg1: CONST String type=kotlin.String value='Z'
            then: CONST String type=kotlin.String value='Fail #3'
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.String operator=null
                  $this: GET_VAR a type=A<kotlin.String, kotlin.Int, kotlin.Double> operator=null
                  t: CONST String type=kotlin.String value=''
                  u: CONST Int type=kotlin.Int value='0'
                  v: CONST Double type=kotlin.Double value='0.0'
                arg1: CONST String type=kotlin.String value='Z'
            then: CONST String type=kotlin.String value='Fail #4'
            else: CONST String type=kotlin.String value='OK'
