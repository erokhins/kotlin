MODULE <test-module>
  FILE /overloadedFun.kt
    FUN public fun foo(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CONST String type=kotlin.String value='foo1'
    FUN public fun foo(/*0*/ i: kotlin.Int): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CONST String type=kotlin.String value='foo2'
    PROPERTY public val f1: () -> kotlin.String
      EXPRESSION_BODY
        CALLABLE_REFERENCE foo type=kotlin.reflect.KFunction0<kotlin.String> operator=null
    PROPERTY public val f2: (kotlin.Int) -> kotlin.String
      EXPRESSION_BODY
        CALLABLE_REFERENCE foo type=kotlin.reflect.KFunction1<kotlin.Int, kotlin.String> operator=null
    FUN public fun foo1(): kotlin.Unit
      BLOCK_BODY
    FUN public fun foo2(/*0*/ i: kotlin.Int): kotlin.Unit
      BLOCK_BODY
    FUN public fun bar(/*0*/ f: () -> kotlin.Unit): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=bar
          CONST String type=kotlin.String value='bar1'
    FUN public fun bar(/*0*/ f: (kotlin.Int) -> kotlin.Unit): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=bar
          CONST String type=kotlin.String value='bar2'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val x1: kotlin.String
          CALL .invoke type=kotlin.String operator=INVOKE
            $this: CALL .<get-f1> type=() -> kotlin.String operator=GET_PROPERTY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR x1 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='foo1'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 1: '
              GET_VAR x1 type=kotlin.String operator=null
        VAR val x2: kotlin.String
          CALL .invoke type=kotlin.String operator=INVOKE
            $this: CALL .<get-f2> type=(kotlin.Int) -> kotlin.String operator=GET_PROPERTY
            p1: CONST Int type=kotlin.Int value='0'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR x2 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='foo2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 2: '
              GET_VAR x2 type=kotlin.String operator=null
        VAR val y1: kotlin.String
          CALL .bar type=kotlin.String operator=null
            f: CALLABLE_REFERENCE foo1 type=kotlin.reflect.KFunction0<kotlin.Unit> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR y1 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='bar1'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 3: '
              GET_VAR y1 type=kotlin.String operator=null
        VAR val y2: kotlin.String
          CALL .bar type=kotlin.String operator=null
            f: CALLABLE_REFERENCE foo2 type=kotlin.reflect.KFunction1<kotlin.Int, kotlin.Unit> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR y2 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='bar2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 4: '
              GET_VAR y2 type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
