MODULE <test-module>
  FILE /unitWithSideEffect.kt
    PROPERTY public var state: kotlin.Int
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='23'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        FUN local final fun incrementState(/*0*/ inc: kotlin.Int): kotlin.Unit
          BLOCK_BODY
            BLOCK type=kotlin.Unit operator=PLUSEQ
              CALL .<set-state> type=kotlin.Unit operator=PLUSEQ
                <set-?>: CALL .plus type=kotlin.Int operator=PLUSEQ
                  $this: CALL .<get-state> type=kotlin.Int operator=PLUSEQ
                  other: GET_VAR inc type=kotlin.Int operator=null
        VAR val inc: kotlin.reflect.KFunction1<kotlin.Int, kotlin.Unit>
          CALLABLE_REFERENCE incrementState type=kotlin.reflect.KFunction1<kotlin.Int, kotlin.Unit> operator=null
        CALL .invoke type=kotlin.Unit operator=INVOKE
          $this: GET_VAR inc type=kotlin.reflect.KFunction1<kotlin.Int, kotlin.Unit> operator=VARIABLE_AS_FUNCTION
          p1: CONST Int type=kotlin.Int value='12'
        CALL .invoke type=kotlin.Unit operator=INVOKE
          $this: GET_VAR inc type=kotlin.reflect.KFunction1<kotlin.Int, kotlin.Unit> operator=VARIABLE_AS_FUNCTION
          p1: CONST Int type=kotlin.Int value='-5'
        CALL .invoke type=kotlin.Unit operator=INVOKE
          $this: GET_VAR inc type=kotlin.reflect.KFunction1<kotlin.Int, kotlin.Unit> operator=VARIABLE_AS_FUNCTION
          p1: CONST Int type=kotlin.Int value='27'
        CALL .invoke type=kotlin.Unit operator=INVOKE
          $this: GET_VAR inc type=kotlin.reflect.KFunction1<kotlin.Int, kotlin.Unit> operator=VARIABLE_AS_FUNCTION
          p1: CONST Int type=kotlin.Int value='-15'
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .<get-state> type=kotlin.Int operator=GET_PROPERTY
              arg1: CONST Int type=kotlin.Int value='42'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              CALL .<get-state> type=kotlin.Int operator=GET_PROPERTY
