MODULE <test-module>
  FILE /simpleMutableExtension.kt
    PROPERTY public var storage: kotlin.Int
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='0'
    PROPERTY public var kotlin.Int.foo: kotlin.Int
      PROPERTY_GETTER public fun kotlin.Int.<get-foo>(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=<get-foo>
            CALL .plus type=kotlin.Int operator=PLUS
              $this: $RECEIVER of: foo type=kotlin.Int
              other: CALL .<get-storage> type=kotlin.Int operator=GET_PROPERTY
      PROPERTY_SETTER public fun kotlin.Int.<set-foo>(/*0*/ value: kotlin.Int): kotlin.Unit
        BLOCK_BODY
          CALL .<set-storage> type=kotlin.Unit operator=EQ
            <set-?>: CALL .plus type=kotlin.Int operator=PLUS
              $this: $RECEIVER of: foo type=kotlin.Int
              other: GET_VAR value type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val pr: kotlin.reflect.KMutableProperty1<kotlin.Int, kotlin.Int>
          CALLABLE_REFERENCE foo type=kotlin.reflect.KMutableProperty1<kotlin.Int, kotlin.Int> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .get type=kotlin.Int operator=null
                $this: GET_VAR pr type=kotlin.reflect.KMutableProperty1<kotlin.Int, kotlin.Int> operator=null
                receiver: CONST Int type=kotlin.Int value='42'
              arg1: CONST Int type=kotlin.Int value='42'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 1: '
              CALL .get type=kotlin.Int operator=null
                $this: GET_VAR pr type=kotlin.reflect.KMutableProperty1<kotlin.Int, kotlin.Int> operator=null
                receiver: CONST Int type=kotlin.Int value='42'
        CALL .set type=kotlin.Unit operator=null
          $this: GET_VAR pr type=kotlin.reflect.KMutableProperty1<kotlin.Int, kotlin.Int> operator=null
          receiver: CONST Int type=kotlin.Int value='200'
          value: CONST Int type=kotlin.Int value='39'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .get type=kotlin.Int operator=null
                $this: GET_VAR pr type=kotlin.reflect.KMutableProperty1<kotlin.Int, kotlin.Int> operator=null
                receiver: CONST Int type=kotlin.Int value='-239'
              arg1: CONST Int type=kotlin.Int value='0'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 2: '
              CALL .get type=kotlin.Int operator=null
                $this: GET_VAR pr type=kotlin.reflect.KMutableProperty1<kotlin.Int, kotlin.Int> operator=null
                receiver: CONST Int type=kotlin.Int value='-239'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-storage> type=kotlin.Int operator=GET_PROPERTY
              arg1: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 3: '
              CALL .<get-storage> type=kotlin.Int operator=GET_PROPERTY
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
