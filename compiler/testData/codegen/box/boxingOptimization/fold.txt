MODULE <test-module>
  FILE /fold.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val x: kotlin.LongArray
          CALL .<init> type=kotlin.LongArray operator=null
            size: CONST Int type=kotlin.Int value='5'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='0'
                other: CONST Int type=kotlin.Int value='4'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL .set type=kotlin.Unit operator=EQ
                  $this: GET_VAR x type=kotlin.LongArray operator=null
                  index: GET_VAR i type=kotlin.Int operator=null
                  value: CALL .toLong type=kotlin.Long operator=null
                    $this: CALL .plus type=kotlin.Int operator=PLUS
                      $this: GET_VAR i type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='1'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Long type=kotlin.Long value='15'
          actual: CALL .fold type=kotlin.Long operator=null
            $receiver: GET_VAR x type=kotlin.LongArray operator=null
            initial: CONST Long type=kotlin.Long value='0'
            operation: BLOCK type=(kotlin.Long, kotlin.Long) -> kotlin.Long operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Long, /*1*/ y: kotlin.Long): kotlin.Long
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .plus type=kotlin.Long operator=PLUS
                      $this: GET_VAR x type=kotlin.Long operator=null
                      other: GET_VAR y type=kotlin.Long operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Long, kotlin.Long) -> kotlin.Long operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
