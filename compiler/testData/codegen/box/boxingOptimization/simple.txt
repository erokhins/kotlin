MODULE <test-module>
  FILE /simple.kt
    FUN public inline fun </*0*/ R> foo(/*0*/ x: R, /*1*/ block: (R) -> R): R
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CALL .invoke type=R operator=INVOKE
            $this: GET_VAR block type=(R) -> R operator=VARIABLE_AS_FUNCTION
            p1: GET_VAR x type=R operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val result: kotlin.Int
          CALL .foo type=kotlin.Int operator=null
            x: CONST Int type=kotlin.Int value='1'
            block: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Int): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .plus type=kotlin.Int operator=PLUS
                      $this: GET_VAR x type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='1'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='2'
          actual: GET_VAR result type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
