MODULE <test-module>
  FILE /casts.kt
    FUN public inline fun </*0*/ R, /*1*/ T> foo(/*0*/ x: R?, /*1*/ block: (R?) -> T): T
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CALL .invoke type=T operator=INVOKE
            $this: GET_VAR block type=(R?) -> T operator=VARIABLE_AS_FUNCTION
            p1: GET_VAR x type=R? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Long type=kotlin.Long value='1'
          actual: CALL .foo type=kotlin.Long operator=null
            x: CONST Int type=kotlin.Int value='1'
            block: BLOCK type=(kotlin.Int?) -> kotlin.Long operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Int?): kotlin.Long
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .toLong type=kotlin.Long operator=null
                      $this: BLOCK type=kotlin.Int operator=EXCLEXCL
                        VAR val tmp0_notnull: kotlin.Int?
                          GET_VAR x type=kotlin.Int? operator=null
                        WHEN type=kotlin.Int operator=null
                          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR tmp0_notnull type=kotlin.Int? operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                          else: GET_VAR tmp0_notnull type=kotlin.Int? operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int?) -> kotlin.Long operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .toShort type=kotlin.Short operator=null
            $this: CONST Int type=kotlin.Int value='1'
          actual: CALL .foo type=kotlin.Short operator=null
            x: CONST Int type=kotlin.Int value='1'
            block: BLOCK type=(kotlin.Int?) -> kotlin.Short operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Int?): kotlin.Short
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .toShort type=kotlin.Short operator=null
                      $this: BLOCK type=kotlin.Int operator=EXCLEXCL
                        VAR val tmp0_notnull: kotlin.Int?
                          GET_VAR x type=kotlin.Int? operator=null
                        WHEN type=kotlin.Int operator=null
                          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR tmp0_notnull type=kotlin.Int? operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                          else: GET_VAR tmp0_notnull type=kotlin.Int? operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int?) -> kotlin.Short operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .toByte type=kotlin.Byte operator=null
            $this: CONST Int type=kotlin.Int value='1'
          actual: CALL .foo type=kotlin.Byte operator=null
            x: CONST Long type=kotlin.Long value='1'
            block: BLOCK type=(kotlin.Long?) -> kotlin.Byte operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Long?): kotlin.Byte
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .toByte type=kotlin.Byte operator=null
                      $this: BLOCK type=kotlin.Long operator=EXCLEXCL
                        VAR val tmp0_notnull: kotlin.Long?
                          GET_VAR x type=kotlin.Long? operator=null
                        WHEN type=kotlin.Long operator=null
                          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR tmp0_notnull type=kotlin.Long? operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                          else: GET_VAR tmp0_notnull type=kotlin.Long? operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Long?) -> kotlin.Byte operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .toShort type=kotlin.Short operator=null
            $this: CONST Int type=kotlin.Int value='1'
          actual: CALL .foo type=kotlin.Short operator=null
            x: CONST Long type=kotlin.Long value='1'
            block: BLOCK type=(kotlin.Long?) -> kotlin.Short operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Long?): kotlin.Short
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .toShort type=kotlin.Short operator=null
                      $this: BLOCK type=kotlin.Long operator=EXCLEXCL
                        VAR val tmp0_notnull: kotlin.Long?
                          GET_VAR x type=kotlin.Long? operator=null
                        WHEN type=kotlin.Long operator=null
                          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR tmp0_notnull type=kotlin.Long? operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                          else: GET_VAR tmp0_notnull type=kotlin.Long? operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Long?) -> kotlin.Short operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .toDouble type=kotlin.Double operator=null
            $this: CONST Char type=kotlin.Char value='a'
          actual: CALL .foo type=kotlin.Double operator=null
            x: CONST Char type=kotlin.Char value='a'
            block: BLOCK type=(kotlin.Char?) -> kotlin.Double operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Char?): kotlin.Double
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .toDouble type=kotlin.Double operator=null
                      $this: BLOCK type=kotlin.Char operator=EXCLEXCL
                        VAR val tmp0_notnull: kotlin.Char?
                          GET_VAR x type=kotlin.Char? operator=null
                        WHEN type=kotlin.Char operator=null
                          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR tmp0_notnull type=kotlin.Char? operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                          else: GET_VAR tmp0_notnull type=kotlin.Char? operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Char?) -> kotlin.Double operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .toByte type=kotlin.Byte operator=null
            $this: CONST Double type=kotlin.Double value='1.0'
          actual: CALL .foo type=kotlin.Byte operator=null
            x: CONST Double type=kotlin.Double value='1.0'
            block: BLOCK type=(kotlin.Double?) -> kotlin.Byte operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Double?): kotlin.Byte
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .toByte type=kotlin.Byte operator=null
                      $this: BLOCK type=kotlin.Double operator=EXCLEXCL
                        VAR val tmp0_notnull: kotlin.Double?
                          GET_VAR x type=kotlin.Double? operator=null
                        WHEN type=kotlin.Double operator=null
                          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR tmp0_notnull type=kotlin.Double? operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                          else: GET_VAR tmp0_notnull type=kotlin.Double? operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Double?) -> kotlin.Byte operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
