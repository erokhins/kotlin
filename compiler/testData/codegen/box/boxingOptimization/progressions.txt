MODULE <test-module>
  FILE /progressions.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val result1: kotlin.Int
          CALL .count type=kotlin.Int operator=null
            $receiver: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
              $this: CONST Int type=kotlin.Int value='1'
              other: CONST Int type=kotlin.Int value='100'
            predicate: BLOCK type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Int): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: CALL .mod type=kotlin.Int operator=PERC
                        $this: GET_VAR x type=kotlin.Int operator=null
                        other: CONST Int type=kotlin.Int value='2'
                      arg1: CONST Int type=kotlin.Int value='0'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
        VAR val result2: kotlin.Int
          CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
            $this: CALL .filter type=kotlin.collections.List<kotlin.Int> operator=null
              $receiver: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='1'
                other: CONST Int type=kotlin.Int value='100'
              predicate: BLOCK type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ x: kotlin.Int): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: CALL .mod type=kotlin.Int operator=PERC
                          $this: GET_VAR x type=kotlin.Int operator=null
                          other: CONST Int type=kotlin.Int value='2'
                        arg1: CONST Int type=kotlin.Int value='0'
                CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR result1 type=kotlin.Int operator=null
          actual: CONST Int type=kotlin.Int value='50'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR result2 type=kotlin.Int operator=null
          actual: CONST Int type=kotlin.Int value='50'
        VAR val result3: kotlin.Int
          CALL .count type=kotlin.Int operator=null
            $receiver: CALL .map type=kotlin.collections.List<kotlin.Int> operator=null
              $receiver: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='1'
                other: CONST Int type=kotlin.Int value='100'
              transform: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ x: kotlin.Int): kotlin.Int
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .times type=kotlin.Int operator=MUL
                        $this: CONST Int type=kotlin.Int value='2'
                        other: GET_VAR x type=kotlin.Int operator=null
                CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
            predicate: BLOCK type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Int): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: CALL .mod type=kotlin.Int operator=PERC
                        $this: GET_VAR x type=kotlin.Int operator=null
                        other: CONST Int type=kotlin.Int value='2'
                      arg1: CONST Int type=kotlin.Int value='0'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
        VAR val result4: kotlin.Int
          CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
            $this: CALL .filter type=kotlin.collections.List<kotlin.Int> operator=null
              $receiver: CALL .map type=kotlin.collections.List<kotlin.Int> operator=null
                $receiver: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                  $this: CONST Int type=kotlin.Int value='1'
                  other: CONST Int type=kotlin.Int value='100'
                transform: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
                  FUN local final fun <anonymous>(/*0*/ x: kotlin.Int): kotlin.Int
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CALL .times type=kotlin.Int operator=MUL
                          $this: CONST Int type=kotlin.Int value='2'
                          other: GET_VAR x type=kotlin.Int operator=null
                  CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
              predicate: BLOCK type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ x: kotlin.Int): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: CALL .mod type=kotlin.Int operator=PERC
                          $this: GET_VAR x type=kotlin.Int operator=null
                          other: CONST Int type=kotlin.Int value='2'
                        arg1: CONST Int type=kotlin.Int value='0'
                CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR result3 type=kotlin.Int operator=null
          actual: CONST Int type=kotlin.Int value='100'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR result4 type=kotlin.Int operator=null
          actual: CONST Int type=kotlin.Int value='100'
        VAR val result5: kotlin.Int
          CALL .count type=kotlin.Int operator=null
            $receiver: CALL .rangeTo type=kotlin.ranges.LongRange operator=RANGE
              $this: CONST Long type=kotlin.Long value='1'
              other: CONST Long type=kotlin.Long value='100'
            predicate: BLOCK type=(kotlin.Long) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Long): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: CALL .mod type=kotlin.Long operator=PERC
                        $this: GET_VAR x type=kotlin.Long operator=null
                        other: CONST Int type=kotlin.Int value='2'
                      arg1: CONST Long type=kotlin.Long value='0'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Long) -> kotlin.Boolean operator=LAMBDA
        VAR val result6: kotlin.Int
          CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
            $this: CALL .filter type=kotlin.collections.List<kotlin.Long> operator=null
              $receiver: CALL .rangeTo type=kotlin.ranges.LongRange operator=RANGE
                $this: CONST Long type=kotlin.Long value='1'
                other: CONST Long type=kotlin.Long value='100'
              predicate: BLOCK type=(kotlin.Long) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ x: kotlin.Long): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: CALL .mod type=kotlin.Long operator=PERC
                          $this: GET_VAR x type=kotlin.Long operator=null
                          other: CONST Int type=kotlin.Int value='2'
                        arg1: CONST Long type=kotlin.Long value='0'
                CALLABLE_REFERENCE <anonymous> type=(kotlin.Long) -> kotlin.Boolean operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR result5 type=kotlin.Int operator=null
          actual: CONST Int type=kotlin.Int value='50'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR result6 type=kotlin.Int operator=null
          actual: CONST Int type=kotlin.Int value='50'
        VAR val result7: kotlin.Int
          CALL .count type=kotlin.Int operator=null
            $receiver: CALL .map type=kotlin.collections.List<kotlin.Long> operator=null
              $receiver: CALL .rangeTo type=kotlin.ranges.LongRange operator=RANGE
                $this: CONST Long type=kotlin.Long value='1'
                other: CONST Long type=kotlin.Long value='100'
              transform: BLOCK type=(kotlin.Long) -> kotlin.Long operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ x: kotlin.Long): kotlin.Long
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .times type=kotlin.Long operator=MUL
                        $this: CONST Int type=kotlin.Int value='2'
                        other: GET_VAR x type=kotlin.Long operator=null
                CALLABLE_REFERENCE <anonymous> type=(kotlin.Long) -> kotlin.Long operator=LAMBDA
            predicate: BLOCK type=(kotlin.Long) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Long): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: CALL .mod type=kotlin.Long operator=PERC
                        $this: GET_VAR x type=kotlin.Long operator=null
                        other: CONST Int type=kotlin.Int value='2'
                      arg1: CONST Long type=kotlin.Long value='0'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Long) -> kotlin.Boolean operator=LAMBDA
        VAR val result8: kotlin.Int
          CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
            $this: CALL .filter type=kotlin.collections.List<kotlin.Long> operator=null
              $receiver: CALL .map type=kotlin.collections.List<kotlin.Long> operator=null
                $receiver: CALL .rangeTo type=kotlin.ranges.LongRange operator=RANGE
                  $this: CONST Long type=kotlin.Long value='1'
                  other: CONST Long type=kotlin.Long value='100'
                transform: BLOCK type=(kotlin.Long) -> kotlin.Long operator=LAMBDA
                  FUN local final fun <anonymous>(/*0*/ x: kotlin.Long): kotlin.Long
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CALL .times type=kotlin.Long operator=MUL
                          $this: CONST Int type=kotlin.Int value='2'
                          other: GET_VAR x type=kotlin.Long operator=null
                  CALLABLE_REFERENCE <anonymous> type=(kotlin.Long) -> kotlin.Long operator=LAMBDA
              predicate: BLOCK type=(kotlin.Long) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ x: kotlin.Long): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: CALL .mod type=kotlin.Long operator=PERC
                          $this: GET_VAR x type=kotlin.Long operator=null
                          other: CONST Int type=kotlin.Int value='2'
                        arg1: CONST Long type=kotlin.Long value='0'
                CALLABLE_REFERENCE <anonymous> type=(kotlin.Long) -> kotlin.Boolean operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR result7 type=kotlin.Int operator=null
          actual: CONST Int type=kotlin.Int value='100'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR result8 type=kotlin.Int operator=null
          actual: CONST Int type=kotlin.Int value='100'
        VAR val result9: kotlin.Int
          CALL .reduce type=kotlin.Int operator=null
            $receiver: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
              $this: CONST Int type=kotlin.Int value='0'
              other: CONST Int type=kotlin.Int value='10'
            operation: BLOCK type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ total: kotlin.Int, /*1*/ next: kotlin.Int): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .plus type=kotlin.Int operator=PLUS
                      $this: GET_VAR total type=kotlin.Int operator=null
                      other: GET_VAR next type=kotlin.Int operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=LAMBDA
        VAR val result10: kotlin.Long
          CALL .reduce type=kotlin.Long operator=null
            $receiver: CALL .rangeTo type=kotlin.ranges.LongRange operator=RANGE
              $this: CONST Long type=kotlin.Long value='0'
              other: CONST Long type=kotlin.Long value='10'
            operation: BLOCK type=(kotlin.Long, kotlin.Long) -> kotlin.Long operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ total: kotlin.Long, /*1*/ next: kotlin.Long): kotlin.Long
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .plus type=kotlin.Long operator=PLUS
                      $this: GET_VAR total type=kotlin.Long operator=null
                      other: GET_VAR next type=kotlin.Long operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Long, kotlin.Long) -> kotlin.Long operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR result9 type=kotlin.Int operator=null
          actual: CONST Int type=kotlin.Int value='55'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR result10 type=kotlin.Long operator=null
          actual: CONST Long type=kotlin.Long value='55'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
