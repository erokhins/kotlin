MODULE <test-module>
  FILE /nullCheck.kt
    FUN public inline fun </*0*/ R, /*1*/ T> foo(/*0*/ x: R?, /*1*/ y: R?, /*2*/ block: (R?) -> T): T
      BLOCK_BODY
        WHEN type=kotlin.Nothing operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR x type=R? operator=null
            arg1: CONST Null type=kotlin.Nothing? value='null'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from=foo
              CALL .invoke type=T operator=INVOKE
                $this: GET_VAR block type=(R?) -> T operator=VARIABLE_AS_FUNCTION
                p1: GET_VAR x type=R? operator=null
          else: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from=foo
              CALL .invoke type=T operator=INVOKE
                $this: GET_VAR block type=(R?) -> T operator=VARIABLE_AS_FUNCTION
                p1: GET_VAR y type=R? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='3'
          actual: CALL .foo type=kotlin.Int operator=null
            x: CONST Int type=kotlin.Int value='1'
            y: CONST Int type=kotlin.Int value='2'
            block: BLOCK type=(kotlin.Int?) -> kotlin.Int operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Int?): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    WHEN type=kotlin.Int operator=IF
                      if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                        arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                          arg0: GET_VAR x type=kotlin.Int? operator=null
                          arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST Int type=kotlin.Int value='3'
                      else: CONST Int type=kotlin.Int value='4'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int?) -> kotlin.Int operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
