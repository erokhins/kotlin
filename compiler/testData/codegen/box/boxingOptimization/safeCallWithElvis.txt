MODULE <test-module>
  FILE /safeCallWithElvis.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ x: kotlin.Int, /*1*/ y: A?)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD x type=kotlin.Unit operator=null
            receiver: THIS public final class A type=A
            value: GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD y type=kotlin.Unit operator=null
            receiver: THIS public final class A type=A
            value: GET_VAR y type=A? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final val x: kotlin.Int
        EXPRESSION_BODY
          GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val y: A?
        EXPRESSION_BODY
          GET_VAR y type=A? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun check(/*0*/ a: A?): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=check
          BLOCK type=kotlin.Int operator=ELVIS
            VAR val tmp4_elvis_lhs: kotlin.Int?
              BLOCK type=kotlin.Int? operator=SAFE_CALL
                VAR val tmp1_safe_receiver: A?
                  BLOCK type=A? operator=SAFE_CALL
                    VAR val tmp0_safe_receiver: A?
                      GET_VAR a type=A? operator=null
                    WHEN type=A? operator=SAFE_CALL
                      if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR tmp0_safe_receiver type=A? operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST Null type=kotlin.Nothing? value='null'
                      else: CALL .<get-y> type=A? operator=GET_PROPERTY
                        $this: GET_VAR tmp0_safe_receiver type=A? operator=null
                WHEN type=kotlin.Int? operator=SAFE_CALL
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp1_safe_receiver type=A? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Null type=kotlin.Nothing? value='null'
                  else: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                    $this: GET_VAR tmp1_safe_receiver type=A? operator=null
            WHEN type=kotlin.Int operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp4_elvis_lhs type=kotlin.Int? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: BLOCK type=kotlin.Int operator=ELVIS
                VAR val tmp3_elvis_lhs: kotlin.Int?
                  BLOCK type=kotlin.Int? operator=SAFE_CALL
                    VAR val tmp2_safe_receiver: A?
                      GET_VAR a type=A? operator=null
                    WHEN type=kotlin.Int? operator=SAFE_CALL
                      if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR tmp2_safe_receiver type=A? operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST Null type=kotlin.Nothing? value='null'
                      else: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR tmp2_safe_receiver type=A? operator=null
                WHEN type=kotlin.Int operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp3_elvis_lhs type=kotlin.Int? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Int type=kotlin.Int value='3'
                  else: GET_VAR tmp3_elvis_lhs type=kotlin.Int? operator=null
              else: GET_VAR tmp4_elvis_lhs type=kotlin.Int? operator=null
    FUN public fun checkLeftAssoc(/*0*/ a: A?): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=checkLeftAssoc
          BLOCK type=kotlin.Int operator=ELVIS
            VAR val tmp4_elvis_lhs: kotlin.Int?
              BLOCK type=kotlin.Int? operator=ELVIS
                VAR val tmp3_elvis_lhs: kotlin.Int?
                  BLOCK type=kotlin.Int? operator=SAFE_CALL
                    VAR val tmp1_safe_receiver: A?
                      BLOCK type=A? operator=SAFE_CALL
                        VAR val tmp0_safe_receiver: A?
                          GET_VAR a type=A? operator=null
                        WHEN type=A? operator=SAFE_CALL
                          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR tmp0_safe_receiver type=A? operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CONST Null type=kotlin.Nothing? value='null'
                          else: CALL .<get-y> type=A? operator=GET_PROPERTY
                            $this: GET_VAR tmp0_safe_receiver type=A? operator=null
                    WHEN type=kotlin.Int? operator=SAFE_CALL
                      if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR tmp1_safe_receiver type=A? operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST Null type=kotlin.Nothing? value='null'
                      else: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR tmp1_safe_receiver type=A? operator=null
                WHEN type=kotlin.Int? operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp3_elvis_lhs type=kotlin.Int? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: BLOCK type=kotlin.Int? operator=SAFE_CALL
                    VAR val tmp2_safe_receiver: A?
                      GET_VAR a type=A? operator=null
                    WHEN type=kotlin.Int? operator=SAFE_CALL
                      if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR tmp2_safe_receiver type=A? operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST Null type=kotlin.Nothing? value='null'
                      else: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR tmp2_safe_receiver type=A? operator=null
                  else: GET_VAR tmp3_elvis_lhs type=kotlin.Int? operator=null
            WHEN type=kotlin.Int operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp4_elvis_lhs type=kotlin.Int? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CONST Int type=kotlin.Int value='3'
              else: GET_VAR tmp4_elvis_lhs type=kotlin.Int? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a1: A
          CALL .<init> type=A operator=null
            x: CONST Int type=kotlin.Int value='2'
            y: CALL .<init> type=A operator=null
              x: CONST Int type=kotlin.Int value='1'
              y: CONST Null type=kotlin.Nothing? value='null'
        VAR val a2: A
          CALL .<init> type=A operator=null
            x: CONST Int type=kotlin.Int value='2'
            y: CONST Null type=kotlin.Nothing? value='null'
        VAR val a3: kotlin.Nothing? = null
          CONST Null type=kotlin.Nothing? value='null'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1'
          actual: CALL .check type=kotlin.Int operator=null
            a: GET_VAR a1 type=A operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='2'
          actual: CALL .check type=kotlin.Int operator=null
            a: GET_VAR a2 type=A operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='3'
          actual: CALL .check type=kotlin.Int operator=null
            a: GET_VAR a3 type=kotlin.Nothing? operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1'
          actual: CALL .checkLeftAssoc type=kotlin.Int operator=null
            a: GET_VAR a1 type=A operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='2'
          actual: CALL .checkLeftAssoc type=kotlin.Int operator=null
            a: GET_VAR a2 type=A operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='3'
          actual: CALL .checkLeftAssoc type=kotlin.Int operator=null
            a: GET_VAR a3 type=kotlin.Nothing? operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
