MODULE <test-module>
  FILE /suspendFromInlineLambda.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Controller
      FUN public final suspend fun suspendHere(/*0*/ v: kotlin.Int, /*1*/ x: kotlin.coroutines.Continuation<kotlin.Int>): kotlin.Unit
        BLOCK_BODY
          CALL .resume type=kotlin.Unit operator=null
            $this: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.Int> operator=null
            data: CALL .times type=kotlin.Int operator=MUL
              $this: GET_VAR v type=kotlin.Int operator=null
              other: CONST Int type=kotlin.Int value='2'
    FUN public fun builder(/*0*/ coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        CALL .resume type=kotlin.Unit operator=null
          $this: CALL .invoke type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: CALL .<init> type=Controller operator=null
          data: GET_OBJECT Unit type=kotlin.Unit
    FUN public inline fun foo(/*0*/ x: (kotlin.Int) -> kotlin.Unit): kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='1'
                other: CONST Int type=kotlin.Int value='2'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL .invoke type=kotlin.Unit operator=INVOKE
                  $this: GET_VAR x type=(kotlin.Int) -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
                  p1: GET_VAR i type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CONST String type=kotlin.String value=''
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  SET_VAR result type=kotlin.Unit operator=PLUSEQ
                    CALL .plus type=kotlin.String operator=PLUSEQ
                      $this: GET_VAR result type=kotlin.String operator=PLUSEQ
                      other: CONST String type=kotlin.String value='-'
                  CALL .foo type=kotlin.Unit operator=null
                    x: BLOCK type=(kotlin.Int) -> kotlin.Unit operator=LAMBDA
                      FUN local final fun <anonymous>(/*0*/ it: kotlin.Int): kotlin.Unit
                        BLOCK_BODY
                          RETURN type=kotlin.Nothing from=<anonymous>
                            SET_VAR result type=kotlin.Unit operator=PLUSEQ
                              CALL .plus type=kotlin.String operator=PLUSEQ
                                $this: GET_VAR result type=kotlin.String operator=PLUSEQ
                                other: CALL .toString type=kotlin.String operator=null
                                  $this: CALL .suspendHere type=kotlin.Int operator=null
                                    $this: $RECEIVER of: <anonymous> type=Controller
                                    v: GET_VAR it type=kotlin.Int operator=null
                      CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Unit operator=LAMBDA
                  RETURN type=kotlin.Nothing from=<anonymous>
                    SET_VAR result type=kotlin.Unit operator=PLUSEQ
                      CALL .plus type=kotlin.String operator=PLUSEQ
                        $this: GET_VAR result type=kotlin.String operator=PLUSEQ
                        other: CONST String type=kotlin.String value='+'
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR result type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='-24+'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: '
              GET_VAR result type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
