MODULE <test-module>
  FILE /kt12958.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Controller
      PROPERTY public final var result: kotlin.String
        EXPRESSION_BODY
          CONST String type=kotlin.String value='fail'
      FUN public final suspend fun </*0*/ V> suspendHere(/*0*/ v: V, /*1*/ x: kotlin.coroutines.Continuation<V>): kotlin.Unit
        BLOCK_BODY
          CALL .resume type=kotlin.Unit operator=null
            $this: GET_VAR x type=kotlin.coroutines.Continuation<V> operator=null
            data: GET_VAR v type=V operator=null
      FUN public final operator fun handleResult(/*0*/ x: kotlin.String, /*1*/ c: kotlin.coroutines.Continuation<kotlin.Nothing>): kotlin.Unit
        BLOCK_BODY
          CALL .<set-result> type=kotlin.Unit operator=EQ
            $this: THIS public final class Controller type=Controller
            <set-?>: GET_VAR x type=kotlin.String operator=null
    FUN public fun builder(/*0*/ coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.String
      BLOCK_BODY
        VAR val controller: Controller
          CALL .<init> type=Controller operator=null
        CALL .resume type=kotlin.Unit operator=null
          $this: CALL .invoke type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: GET_VAR controller type=Controller operator=null
          data: GET_OBJECT Unit type=kotlin.Unit
        RETURN type=kotlin.Nothing from=builder
          CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
            $this: GET_VAR controller type=Controller operator=null
    FUN public fun foo(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CALL .builder type=kotlin.String operator=null
            c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
              BLOCK type=Controller.() -> kotlin.String operator=LAMBDA
                FUN local final fun Controller.<anonymous>(): kotlin.String
                  BLOCK_BODY
                    VAR val data2: kotlin.ByteArray
                      CALL .suspendHere type=kotlin.ByteArray operator=null
                        $this: $RECEIVER of: <anonymous> type=Controller
                        v: CALL .<init> type=kotlin.ByteArray operator=null
                          size: CONST Int type=kotlin.Int value='2'
                    CALL .suspendHere type=kotlin.String operator=null
                      $this: $RECEIVER of: <anonymous> type=Controller
                      v: CONST String type=kotlin.String value='<ignored>'
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .toString type=kotlin.String operator=null
                        $this: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                          $this: GET_VAR data2 type=kotlin.ByteArray operator=null
                CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.String operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .foo type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='2'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
