MODULE <test-module>
  FILE /varValueConflictsWithTableSameSort.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Controller
      FUN public final suspend fun suspendHere(/*0*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL .resume type=kotlin.Unit operator=null
            $this: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
            data: CONST String type=kotlin.String value='OK'
    FUN public fun builder(/*0*/ coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        CALL .resume type=kotlin.Unit operator=null
          $this: CALL .invoke type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: CALL .<init> type=Controller operator=null
          data: GET_OBJECT Unit type=kotlin.Unit
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CONST String type=kotlin.String value='fail 1'
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Unit
                    try: BLOCK type=kotlin.Unit operator=null
                      VAR var i: kotlin.String
                        CONST String type=kotlin.String value='abc'
                      SET_VAR i type=kotlin.Unit operator=EQ
                        CONST String type=kotlin.String value='123'
                    finally: BLOCK type=kotlin.Unit operator=null
                  VAR var s: kotlin.String
                  WHEN type=kotlin.Unit operator=IF
                    if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: CALL .suspendHere type=kotlin.String operator=null
                        $this: $RECEIVER of: <anonymous> type=Controller
                      arg1: CONST String type=kotlin.String value='OK'
                    then: BLOCK type=kotlin.Unit operator=null
                      SET_VAR s type=kotlin.Unit operator=EQ
                        CONST String type=kotlin.String value='OK'
                    else: BLOCK type=kotlin.Unit operator=null
                      SET_VAR s type=kotlin.Unit operator=EQ
                        CONST String type=kotlin.String value='fail 2'
                  RETURN type=kotlin.Nothing from=<anonymous>
                    SET_VAR result type=kotlin.Unit operator=EQ
                      GET_VAR s type=kotlin.String operator=null
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          GET_VAR result type=kotlin.String operator=null
