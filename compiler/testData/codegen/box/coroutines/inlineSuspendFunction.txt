MODULE <test-module>
  FILE /inlineSuspendFunction.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Controller
      FUN public final fun withValue(/*0*/ v: kotlin.String, /*1*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL .resume type=kotlin.Unit operator=null
            $this: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
            data: GET_VAR v type=kotlin.String operator=null
      FUN public final inline suspend fun suspendInline(/*0*/ v: kotlin.String, /*1*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL .withValue type=kotlin.Unit operator=null
            $this: THIS public final class Controller type=Controller
            v: GET_VAR v type=kotlin.String operator=null
            x: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
      FUN public final inline suspend fun suspendInline(/*0*/ crossinline b: () -> kotlin.String, /*1*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL .suspendInline type=kotlin.Unit operator=null
            $this: THIS public final class Controller type=Controller
            v: CALL .invoke type=kotlin.String operator=INVOKE
              $this: GET_VAR b type=() -> kotlin.String operator=VARIABLE_AS_FUNCTION
            x: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
      FUN public final inline suspend fun </*0*/ reified T : kotlin.Any> suspendInline(/*0*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL .suspendInline type=kotlin.Unit operator=null
            $this: THIS public final class Controller type=Controller
            b: BLOCK type=() -> kotlin.String! operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String!
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-simpleName> type=kotlin.String! operator=GET_PROPERTY
                      $receiver: CALL .<get-java> type=java.lang.Class<T> operator=GET_PROPERTY
                        $receiver: CLASS_REFERENCE T type=kotlin.reflect.KClass<T>
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String! operator=LAMBDA
            x: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
    FUN public fun builder(/*0*/ coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        CALL .resume type=kotlin.Unit operator=null
          $this: CALL .invoke type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: CALL .<init> type=Controller operator=null
          data: GET_OBJECT Unit type=kotlin.Unit
    CLASS CLASS OK
      CONSTRUCTOR public constructor OK()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=OK
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CONST String type=kotlin.String value=''
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  SET_VAR result type=kotlin.Unit operator=EQ
                    CALL .suspendInline type=kotlin.String operator=null
                      $this: $RECEIVER of: <anonymous> type=Controller
                      v: CONST String type=kotlin.String value='56'
                  WHEN type=kotlin.Unit operator=IF
                    if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                        arg0: GET_VAR result type=kotlin.String operator=null
                        arg1: CONST String type=kotlin.String value='56'
                    then: THROW type=kotlin.Nothing
                      CALL .<init> type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='fail 1'
                  SET_VAR result type=kotlin.Unit operator=EQ
                    CALL .suspendInline type=kotlin.String operator=null
                      $this: $RECEIVER of: <anonymous> type=Controller
                      b: BLOCK type=() -> kotlin.String operator=LAMBDA
                        FUN local final fun <anonymous>(): kotlin.String
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from=<anonymous>
                              CONST String type=kotlin.String value='57'
                        CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
                  WHEN type=kotlin.Unit operator=IF
                    if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                        arg0: GET_VAR result type=kotlin.String operator=null
                        arg1: CONST String type=kotlin.String value='57'
                    then: THROW type=kotlin.Nothing
                      CALL .<init> type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='fail 2'
                  RETURN type=kotlin.Nothing from=<anonymous>
                    SET_VAR result type=kotlin.Unit operator=EQ
                      CALL .suspendInline type=kotlin.String operator=null
                        $this: $RECEIVER of: <anonymous> type=Controller
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          GET_VAR result type=kotlin.String operator=null
