MODULE <test-module>
  FILE /lastStementAssignment.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Controller
      PROPERTY public final var wasHandleResultCalled: kotlin.Boolean
        EXPRESSION_BODY
          CONST Boolean type=kotlin.Boolean value='false'
      FUN public final suspend fun suspendHere(/*0*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL .resume type=kotlin.Unit operator=null
            $this: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
            data: CONST String type=kotlin.String value='OK'
      FUN public final operator fun handleResult(/*0*/ x: kotlin.Unit, /*1*/ y: kotlin.coroutines.Continuation<kotlin.Nothing>): kotlin.Unit
        BLOCK_BODY
          CALL .<set-wasHandleResultCalled> type=kotlin.Unit operator=EQ
            $this: THIS public final class Controller type=Controller
            <set-?>: CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun builder(/*0*/ coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        VAR val controller: Controller
          CALL .<init> type=Controller operator=null
        CALL .resume type=kotlin.Unit operator=null
          $this: CALL .invoke type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: GET_VAR controller type=Controller operator=null
          data: GET_OBJECT Unit type=kotlin.Unit
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .<get-wasHandleResultCalled> type=kotlin.Boolean operator=GET_PROPERTY
              $this: GET_VAR controller type=Controller operator=null
          then: THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.RuntimeException operator=null
              p0: CONST String type=kotlin.String value='fail 1'
    PROPERTY public var varWithCustomSetter: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value=''
      PROPERTY_SETTER public fun <set-varWithCustomSetter>(/*0*/ value: kotlin.String): kotlin.Unit
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: GET_VAR field type=kotlin.String operator=null
                arg1: CONST String type=kotlin.String value=''
            then: THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.RuntimeException operator=null
                p0: CONST String type=kotlin.String value='fail 2'
          SET_BACKING_FIELD varWithCustomSetter type=kotlin.Unit operator=EQ
            value: GET_VAR value type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CONST String type=kotlin.String value=''
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  SET_VAR result type=kotlin.Unit operator=PLUSEQ
                    CALL .plus type=kotlin.String operator=PLUSEQ
                      $this: GET_VAR result type=kotlin.String operator=PLUSEQ
                      other: CONST String type=kotlin.String value='O'
                  WHEN type=kotlin.Unit operator=IF
                    if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                        arg0: CALL .suspendHere type=kotlin.String operator=null
                          $this: $RECEIVER of: <anonymous> type=Controller
                        arg1: CONST String type=kotlin.String value='OK'
                    then: THROW type=kotlin.Nothing
                      CALL .<init> type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='fail 3'
                  RETURN type=kotlin.Nothing from=<anonymous>
                    SET_VAR result type=kotlin.Unit operator=PLUSEQ
                      CALL .plus type=kotlin.String operator=PLUSEQ
                        $this: GET_VAR result type=kotlin.String operator=PLUSEQ
                        other: CONST String type=kotlin.String value='K'
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR result type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 4'
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  WHEN type=kotlin.Unit operator=IF
                    if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                        arg0: CALL .suspendHere type=kotlin.String operator=null
                          $this: $RECEIVER of: <anonymous> type=Controller
                        arg1: CONST String type=kotlin.String value='OK'
                    then: THROW type=kotlin.Nothing
                      CALL .<init> type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='fail 5'
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<set-varWithCustomSetter> type=kotlin.Unit operator=EQ
                      value: CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CALL .<get-varWithCustomSetter> type=kotlin.String operator=GET_PROPERTY
