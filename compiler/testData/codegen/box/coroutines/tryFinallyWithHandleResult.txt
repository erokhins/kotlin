MODULE <test-module>
  FILE /tryFinallyWithHandleResult.kt
    PROPERTY public var globalResult: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value=''
    PROPERTY public var wasCalled: kotlin.Boolean
      EXPRESSION_BODY
        CONST Boolean type=kotlin.Boolean value='false'
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Controller
      PROPERTY public final val postponedActions: java.util.ArrayList<() -> kotlin.Unit>
        EXPRESSION_BODY
          CALL .<init> type=java.util.ArrayList<() -> kotlin.Unit> operator=null
      FUN public final suspend fun suspendWithValue(/*0*/ v: kotlin.String, /*1*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL .add type=kotlin.Boolean operator=null
            $this: CALL .<get-postponedActions> type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
              $this: THIS public final class Controller type=Controller
            element: BLOCK type=() -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .resume type=kotlin.Unit operator=null
                      $this: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
                      data: GET_VAR v type=kotlin.String operator=null
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
      FUN public final suspend fun suspendWithException(/*0*/ e: kotlin.Exception /* = java.lang.Exception */, /*1*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL .add type=kotlin.Boolean operator=null
            $this: CALL .<get-postponedActions> type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
              $this: THIS public final class Controller type=Controller
            element: BLOCK type=() -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .resumeWithException type=kotlin.Unit operator=null
                      $this: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
                      exception: GET_VAR e type=kotlin.Exception /* = java.lang.Exception */ operator=null
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
      FUN public final operator fun handleResult(/*0*/ x: kotlin.String, /*1*/ c: kotlin.coroutines.Continuation<kotlin.Nothing>): kotlin.Unit
        BLOCK_BODY
          CALL .<set-globalResult> type=kotlin.Unit operator=EQ
            <set-?>: GET_VAR x type=kotlin.String operator=null
      FUN public final fun run(/*0*/ c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
        BLOCK_BODY
          CALL .resume type=kotlin.Unit operator=null
            $this: CALL .invoke type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
              $this: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
              p1: THIS public final class Controller type=Controller
            data: GET_OBJECT Unit type=kotlin.Unit
          WHILE label=null operator=WHILE_LOOP
            condition: CALL .isNotEmpty type=kotlin.Boolean operator=null
              $receiver: CALL .<get-postponedActions> type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
                $this: THIS public final class Controller type=Controller
            body: BLOCK type=() -> kotlin.Unit operator=null
              CALL .invoke type=kotlin.Unit operator=null
                $this: CALL .get type=() -> kotlin.Unit operator=GET_ARRAY_ELEMENT
                  $this: CALL .<get-postponedActions> type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
                    $this: THIS public final class Controller type=Controller
                  index: CONST Int type=kotlin.Int value='0'
              CALL .removeAt type=() -> kotlin.Unit operator=null
                $this: CALL .<get-postponedActions> type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
                  $this: THIS public final class Controller type=Controller
                p0: CONST Int type=kotlin.Int value='0'
    FUN public fun builder(/*0*/ expectException: kotlin.Boolean = ..., /*1*/ coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      expectException: EXPRESSION_BODY
        CONST Boolean type=kotlin.Boolean value='false'
      BLOCK_BODY
        VAR val controller: Controller
          CALL .<init> type=Controller operator=null
        CALL .<set-globalResult> type=kotlin.Unit operator=EQ
          <set-?>: CONST String type=kotlin.String value='#'
        CALL .<set-wasCalled> type=kotlin.Unit operator=EQ
          <set-?>: CONST Boolean type=kotlin.Boolean value='false'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: GET_VAR expectException type=kotlin.Boolean operator=null
          then: BLOCK type=kotlin.Unit operator=null
            CALL .run type=kotlin.Unit operator=null
              $this: GET_VAR controller type=Controller operator=null
              c: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=null
          else: BLOCK type=kotlin.Unit operator=null
            TRY_CATCH type=kotlin.Unit
              try: BLOCK type=kotlin.Unit operator=null
                CALL .run type=kotlin.Unit operator=null
                  $this: GET_VAR controller type=Controller operator=null
                  c: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=null
                CALL .<set-globalResult> type=kotlin.Unit operator=EQ
                  <set-?>: CONST String type=kotlin.String value='fail: exception was not thrown'
              catch e: BLOCK type=kotlin.Unit operator=null
                CALL .<set-globalResult> type=kotlin.Unit operator=EQ
                  <set-?>: BLOCK type=kotlin.String operator=EXCLEXCL
                    VAR val tmp0_notnull: kotlin.String?
                      CALL .<get-message> type=kotlin.String? operator=GET_PROPERTY
                        $this: GET_VAR e type=kotlin.Exception /* = java.lang.Exception */ operator=null
                    WHEN type=kotlin.String operator=null
                      if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR tmp0_notnull type=kotlin.String? operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                      else: GET_VAR tmp0_notnull type=kotlin.String? operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .<get-wasCalled> type=kotlin.Boolean operator=GET_PROPERTY
          then: BLOCK type=kotlin.Nothing operator=null
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.RuntimeException operator=null
                p0: CONST String type=kotlin.String value='fail wasCalled'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-globalResult> type=kotlin.String operator=GET_PROPERTY
              arg1: CONST String type=kotlin.String value='OK'
          then: BLOCK type=kotlin.Nothing operator=null
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.RuntimeException operator=null
                p0: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='fail '
                  CALL .<get-globalResult> type=kotlin.String operator=GET_PROPERTY
    FUN public fun commonThrow(): kotlin.Unit
      BLOCK_BODY
        THROW type=kotlin.Nothing
          CALL .<init> type=java.lang.RuntimeException operator=null
            p0: CONST String type=kotlin.String value='OK'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.String operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    TRY_CATCH type=kotlin.String
                      try: BLOCK type=kotlin.String operator=null
                        CALL .suspendWithValue type=kotlin.String operator=null
                          $this: $RECEIVER of: <anonymous> type=Controller
                          v: CONST String type=kotlin.String value='OK'
                      finally: BLOCK type=kotlin.Unit operator=null
                        WHEN type=kotlin.Unit operator=IF
                          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                              arg0: CALL .suspendWithValue type=kotlin.String operator=null
                                $this: $RECEIVER of: <anonymous> type=Controller
                                v: CONST String type=kotlin.String value='G'
                              arg1: CONST String type=kotlin.String value='G'
                          then: THROW type=kotlin.Nothing
                            CALL .<init> type=java.lang.RuntimeException operator=null
                              p0: CONST String type=kotlin.String value='fail 1'
                        CALL .<set-wasCalled> type=kotlin.Unit operator=EQ
                          <set-?>: CONST Boolean type=kotlin.Boolean value='true'
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.String operator=LAMBDA
        CALL .builder type=kotlin.Unit operator=null
          expectException: CONST Boolean type=kotlin.Boolean value='true'
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.String operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    TRY_CATCH type=kotlin.String
                      try: BLOCK type=kotlin.String operator=null
                        CALL .suspendWithException type=kotlin.String operator=null
                          $this: $RECEIVER of: <anonymous> type=Controller
                          e: CALL .<init> type=java.lang.RuntimeException operator=null
                            p0: CONST String type=kotlin.String value='OK'
                      finally: BLOCK type=kotlin.Unit operator=null
                        WHEN type=kotlin.Unit operator=IF
                          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                              arg0: CALL .suspendWithValue type=kotlin.String operator=null
                                $this: $RECEIVER of: <anonymous> type=Controller
                                v: CONST String type=kotlin.String value='G'
                              arg1: CONST String type=kotlin.String value='G'
                          then: THROW type=kotlin.Nothing
                            CALL .<init> type=java.lang.RuntimeException operator=null
                              p0: CONST String type=kotlin.String value='fail 2'
                        CALL .<set-wasCalled> type=kotlin.Unit operator=EQ
                          <set-?>: CONST Boolean type=kotlin.Boolean value='true'
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.String operator=LAMBDA
        CALL .builder type=kotlin.Unit operator=null
          expectException: CONST Boolean type=kotlin.Boolean value='true'
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.String operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    TRY_CATCH type=kotlin.String
                      try: BLOCK type=kotlin.String operator=null
                        CALL .suspendWithValue type=kotlin.String operator=null
                          $this: $RECEIVER of: <anonymous> type=Controller
                          v: CONST String type=kotlin.String value='OK'
                        CALL .commonThrow type=kotlin.Unit operator=null
                        CALL .suspendWithValue type=kotlin.String operator=null
                          $this: $RECEIVER of: <anonymous> type=Controller
                          v: CONST String type=kotlin.String value='OK'
                      finally: BLOCK type=kotlin.Unit operator=null
                        WHEN type=kotlin.Unit operator=IF
                          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                              arg0: CALL .suspendWithValue type=kotlin.String operator=null
                                $this: $RECEIVER of: <anonymous> type=Controller
                                v: CONST String type=kotlin.String value='G'
                              arg1: CONST String type=kotlin.String value='G'
                          then: THROW type=kotlin.Nothing
                            CALL .<init> type=java.lang.RuntimeException operator=null
                              p0: CONST String type=kotlin.String value='fail 3'
                        CALL .<set-wasCalled> type=kotlin.Unit operator=EQ
                          <set-?>: CONST Boolean type=kotlin.Boolean value='true'
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.String operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CALL .<get-globalResult> type=kotlin.String operator=GET_PROPERTY
