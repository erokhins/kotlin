MODULE <test-module>
  FILE /sameIconst1ManyVars.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Controller
      FUN public final suspend fun suspendHere(/*0*/ x: kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
        BLOCK_BODY
          CALL .resume type=kotlin.Unit operator=null
            $this: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.Unit> operator=null
            data: GET_OBJECT Unit type=kotlin.Unit
    FUN public fun builder(/*0*/ coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        CALL .resume type=kotlin.Unit operator=null
          $this: CALL .invoke type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: CALL .<init> type=Controller operator=null
          data: GET_OBJECT Unit type=kotlin.Unit
    PROPERTY private var result: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value=''
    FUN public fun setRes(/*0*/ x: kotlin.Byte, /*1*/ y: kotlin.Int): kotlin.Unit
      BLOCK_BODY
        CALL .<set-result> type=kotlin.Unit operator=EQ
          <set-?>: STRING_CONCATENATION type=kotlin.String
            GET_VAR x type=kotlin.Byte operator=null
            CONST String type=kotlin.String value='#'
            GET_VAR y type=kotlin.Int operator=null
    FUN public fun foo(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CONST Int type=kotlin.Int value='1'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  VAR val x: kotlin.Byte = 1.toByte()
                    CONST Byte type=kotlin.Byte value='1'
                  VAR val y: kotlin.Int = 1
                    CALL .toInt type=kotlin.Int operator=null
                      $this: GET_VAR x type=kotlin.Byte operator=null
                  CALL .suspendHere type=kotlin.Unit operator=null
                    $this: $RECEIVER of: <anonymous> type=Controller
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .setRes type=kotlin.Unit operator=null
                      x: GET_VAR x type=kotlin.Byte operator=null
                      y: GET_VAR y type=kotlin.Int operator=null
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
              arg1: CONST String type=kotlin.String value='1#1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
