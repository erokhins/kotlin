MODULE <test-module>
  FILE /usedInArrayStore.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Controller
      FUN public final suspend fun suspendHere(/*0*/ x: kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
        BLOCK_BODY
          CALL .resume type=kotlin.Unit operator=null
            $this: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.Unit> operator=null
            data: GET_OBJECT Unit type=kotlin.Unit
    FUN public fun builder(/*0*/ coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        CALL .resume type=kotlin.Unit operator=null
          $this: CALL .invoke type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: CALL .<init> type=Controller operator=null
          data: GET_OBJECT Unit type=kotlin.Unit
    PROPERTY @kotlin.jvm.JvmField() public var booleanResult: kotlin.BooleanArray
      EXPRESSION_BODY
        CALL .booleanArrayOf type=kotlin.BooleanArray operator=null
    PROPERTY @kotlin.jvm.JvmField() public var charResult: kotlin.CharArray
      EXPRESSION_BODY
        CALL .charArrayOf type=kotlin.CharArray operator=null
    PROPERTY @kotlin.jvm.JvmField() public var byteResult: kotlin.ByteArray
      EXPRESSION_BODY
        CALL .byteArrayOf type=kotlin.ByteArray operator=null
    PROPERTY @kotlin.jvm.JvmField() public var shortResult: kotlin.ShortArray
      EXPRESSION_BODY
        CALL .shortArrayOf type=kotlin.ShortArray operator=null
    PROPERTY @kotlin.jvm.JvmField() public var intResult: kotlin.IntArray
      EXPRESSION_BODY
        CALL .intArrayOf type=kotlin.IntArray operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  VAR val x: kotlin.Boolean = true
                    CONST Boolean type=kotlin.Boolean value='true'
                  CALL .suspendHere type=kotlin.Unit operator=null
                    $this: $RECEIVER of: <anonymous> type=Controller
                  VAR val a: kotlin.BooleanArray
                    CALL .<init> type=kotlin.BooleanArray operator=null
                      size: CONST Int type=kotlin.Int value='1'
                  CALL .set type=kotlin.Unit operator=EQ
                    $this: GET_VAR a type=kotlin.BooleanArray operator=null
                    index: CONST Int type=kotlin.Int value='0'
                    value: GET_VAR x type=kotlin.Boolean operator=null
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<set-booleanResult> type=kotlin.Unit operator=EQ
                      <set-?>: GET_VAR a type=kotlin.BooleanArray operator=null
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .get type=kotlin.Boolean operator=GET_ARRAY_ELEMENT
              $this: CALL .<get-booleanResult> type=kotlin.BooleanArray operator=GET_PROPERTY
              index: CONST Int type=kotlin.Int value='0'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  VAR val x: kotlin.Char = \u0031 ('1')
                    CONST Char type=kotlin.Char value='1'
                  CALL .suspendHere type=kotlin.Unit operator=null
                    $this: $RECEIVER of: <anonymous> type=Controller
                  VAR val a: kotlin.CharArray
                    CALL .<init> type=kotlin.CharArray operator=null
                      size: CONST Int type=kotlin.Int value='1'
                  CALL .set type=kotlin.Unit operator=EQ
                    $this: GET_VAR a type=kotlin.CharArray operator=null
                    index: CONST Int type=kotlin.Int value='0'
                    value: GET_VAR x type=kotlin.Char operator=null
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<set-charResult> type=kotlin.Unit operator=EQ
                      <set-?>: GET_VAR a type=kotlin.CharArray operator=null
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .get type=kotlin.Char operator=GET_ARRAY_ELEMENT
                $this: CALL .<get-charResult> type=kotlin.CharArray operator=GET_PROPERTY
                index: CONST Int type=kotlin.Int value='0'
              arg1: CONST Char type=kotlin.Char value='1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  VAR val x: kotlin.Byte = 1.toByte()
                    CONST Byte type=kotlin.Byte value='1'
                  CALL .suspendHere type=kotlin.Unit operator=null
                    $this: $RECEIVER of: <anonymous> type=Controller
                  VAR val a: kotlin.ByteArray
                    CALL .<init> type=kotlin.ByteArray operator=null
                      size: CONST Int type=kotlin.Int value='1'
                  CALL .set type=kotlin.Unit operator=EQ
                    $this: GET_VAR a type=kotlin.ByteArray operator=null
                    index: CONST Int type=kotlin.Int value='0'
                    value: GET_VAR x type=kotlin.Byte operator=null
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<set-byteResult> type=kotlin.Unit operator=EQ
                      <set-?>: GET_VAR a type=kotlin.ByteArray operator=null
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .get type=kotlin.Byte operator=GET_ARRAY_ELEMENT
                $this: CALL .<get-byteResult> type=kotlin.ByteArray operator=GET_PROPERTY
                index: CONST Int type=kotlin.Int value='0'
              arg1: CALL .toByte type=kotlin.Byte operator=null
                $this: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 3'
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  VAR val x: kotlin.Short = 1.toShort()
                    CONST Short type=kotlin.Short value='1'
                  CALL .suspendHere type=kotlin.Unit operator=null
                    $this: $RECEIVER of: <anonymous> type=Controller
                  VAR val a: kotlin.ShortArray
                    CALL .<init> type=kotlin.ShortArray operator=null
                      size: CONST Int type=kotlin.Int value='1'
                  CALL .set type=kotlin.Unit operator=EQ
                    $this: GET_VAR a type=kotlin.ShortArray operator=null
                    index: CONST Int type=kotlin.Int value='0'
                    value: GET_VAR x type=kotlin.Short operator=null
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<set-shortResult> type=kotlin.Unit operator=EQ
                      <set-?>: GET_VAR a type=kotlin.ShortArray operator=null
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .get type=kotlin.Short operator=GET_ARRAY_ELEMENT
                $this: CALL .<get-shortResult> type=kotlin.ShortArray operator=GET_PROPERTY
                index: CONST Int type=kotlin.Int value='0'
              arg1: CALL .toShort type=kotlin.Short operator=null
                $this: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 4'
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  VAR val x: kotlin.Int = 1
                    CONST Int type=kotlin.Int value='1'
                  CALL .suspendHere type=kotlin.Unit operator=null
                    $this: $RECEIVER of: <anonymous> type=Controller
                  VAR val a: kotlin.IntArray
                    CALL .<init> type=kotlin.IntArray operator=null
                      size: CONST Int type=kotlin.Int value='1'
                  CALL .set type=kotlin.Unit operator=EQ
                    $this: GET_VAR a type=kotlin.IntArray operator=null
                    index: CONST Int type=kotlin.Int value='0'
                    value: GET_VAR x type=kotlin.Int operator=null
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<set-intResult> type=kotlin.Unit operator=EQ
                      <set-?>: GET_VAR a type=kotlin.IntArray operator=null
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .get type=kotlin.Int operator=GET_ARRAY_ELEMENT
                $this: CALL .<get-intResult> type=kotlin.IntArray operator=GET_PROPERTY
                index: CONST Int type=kotlin.Int value='0'
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 5'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
