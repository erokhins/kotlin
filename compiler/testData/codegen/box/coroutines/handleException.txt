MODULE <test-module>
  FILE /handleException.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Controller
      PROPERTY public final var exception: kotlin.Throwable?
        EXPRESSION_BODY
          CONST Null type=kotlin.Nothing? value='null'
      PROPERTY public final val postponedActions: java.util.ArrayList<() -> kotlin.Unit>
        EXPRESSION_BODY
          CALL .<init> type=java.util.ArrayList<() -> kotlin.Unit> operator=null
      FUN public final suspend fun suspendWithValue(/*0*/ v: kotlin.String, /*1*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL .add type=kotlin.Boolean operator=null
            $this: CALL .<get-postponedActions> type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
              $this: THIS public final class Controller type=Controller
            element: BLOCK type=() -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .resume type=kotlin.Unit operator=null
                      $this: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
                      data: GET_VAR v type=kotlin.String operator=null
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
      FUN public final suspend fun suspendWithException(/*0*/ e: kotlin.Exception /* = java.lang.Exception */, /*1*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL .add type=kotlin.Boolean operator=null
            $this: CALL .<get-postponedActions> type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
              $this: THIS public final class Controller type=Controller
            element: BLOCK type=() -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .resumeWithException type=kotlin.Unit operator=null
                      $this: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
                      exception: GET_VAR e type=kotlin.Exception /* = java.lang.Exception */ operator=null
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
      FUN public final operator fun handleException(/*0*/ t: kotlin.Throwable, /*1*/ c: kotlin.coroutines.Continuation<kotlin.Nothing>): kotlin.Unit
        BLOCK_BODY
          CALL .<set-exception> type=kotlin.Unit operator=EQ
            $this: THIS public final class Controller type=Controller
            <set-?>: GET_VAR t type=kotlin.Throwable operator=null
      FUN public final fun run(/*0*/ c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
        BLOCK_BODY
          CALL .resume type=kotlin.Unit operator=null
            $this: CALL .invoke type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
              $this: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
              p1: THIS public final class Controller type=Controller
            data: GET_OBJECT Unit type=kotlin.Unit
          WHILE label=null operator=WHILE_LOOP
            condition: CALL .isNotEmpty type=kotlin.Boolean operator=null
              $receiver: CALL .<get-postponedActions> type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
                $this: THIS public final class Controller type=Controller
            body: BLOCK type=() -> kotlin.Unit operator=null
              CALL .invoke type=kotlin.Unit operator=null
                $this: CALL .get type=() -> kotlin.Unit operator=GET_ARRAY_ELEMENT
                  $this: CALL .<get-postponedActions> type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
                    $this: THIS public final class Controller type=Controller
                  index: CONST Int type=kotlin.Int value='0'
              CALL .removeAt type=() -> kotlin.Unit operator=null
                $this: CALL .<get-postponedActions> type=java.util.ArrayList<() -> kotlin.Unit> operator=GET_PROPERTY
                  $this: THIS public final class Controller type=Controller
                p0: CONST Int type=kotlin.Int value='0'
    FUN public fun builder(/*0*/ coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        VAR val controller: Controller
          CALL .<init> type=Controller operator=null
        CALL .run type=kotlin.Unit operator=null
          $this: GET_VAR controller type=Controller operator=null
          c: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.String? operator=SAFE_CALL
                VAR val tmp0_safe_receiver: kotlin.Throwable?
                  CALL .<get-exception> type=kotlin.Throwable? operator=GET_PROPERTY
                    $this: GET_VAR controller type=Controller operator=null
                WHEN type=kotlin.String? operator=SAFE_CALL
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp0_safe_receiver type=kotlin.Throwable? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Null type=kotlin.Nothing? value='null'
                  else: CALL .<get-message> type=kotlin.String? operator=GET_PROPERTY
                    $this: GET_VAR tmp0_safe_receiver type=kotlin.Throwable? operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: BLOCK type=kotlin.Nothing operator=null
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.RuntimeException operator=null
                p0: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='Unexpected result: '
                  BLOCK type=kotlin.String? operator=SAFE_CALL
                    VAR val tmp1_safe_receiver: kotlin.Throwable?
                      CALL .<get-exception> type=kotlin.Throwable? operator=GET_PROPERTY
                        $this: GET_VAR controller type=Controller operator=null
                    WHEN type=kotlin.String? operator=SAFE_CALL
                      if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR tmp1_safe_receiver type=kotlin.Throwable? operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST Null type=kotlin.Nothing? value='null'
                      else: CALL .<get-message> type=kotlin.String? operator=GET_PROPERTY
                        $this: GET_VAR tmp1_safe_receiver type=kotlin.Throwable? operator=null
    FUN public fun commonThrow(/*0*/ t: kotlin.Throwable): kotlin.Unit
      BLOCK_BODY
        THROW type=kotlin.Nothing
          GET_VAR t type=kotlin.Throwable operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  THROW type=kotlin.Nothing
                    CALL .<init> type=java.lang.RuntimeException operator=null
                      p0: CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .commonThrow type=kotlin.Unit operator=null
                      t: CALL .<init> type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .suspendWithException type=kotlin.String operator=null
                      $this: $RECEIVER of: <anonymous> type=Controller
                      e: CALL .<init> type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    TRY_CATCH type=kotlin.String
                      try: BLOCK type=kotlin.String operator=null
                        CALL .suspendWithException type=kotlin.String operator=null
                          $this: $RECEIVER of: <anonymous> type=Controller
                          e: CALL .<init> type=java.lang.RuntimeException operator=null
                            p0: CONST String type=kotlin.String value='fail 1'
                      catch e: BLOCK type=kotlin.String operator=null
                        CALL .suspendWithException type=kotlin.String operator=null
                          $this: $RECEIVER of: <anonymous> type=Controller
                          e: CALL .<init> type=java.lang.RuntimeException operator=null
                            p0: CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    TRY_CATCH type=kotlin.String
                      try: BLOCK type=kotlin.String operator=null
                        CALL .suspendWithException type=kotlin.String operator=null
                          $this: $RECEIVER of: <anonymous> type=Controller
                          e: CALL .<init> type=java.lang.Exception operator=null
                            p0: CONST String type=kotlin.String value='OK'
                      catch e: BLOCK type=kotlin.Nothing operator=null
                        CALL .suspendWithException type=kotlin.String operator=null
                          $this: $RECEIVER of: <anonymous> type=Controller
                          e: CALL .<init> type=java.lang.RuntimeException operator=null
                            p0: CONST String type=kotlin.String value='fail 3'
                        THROW type=kotlin.Nothing
                          CALL .<init> type=java.lang.RuntimeException operator=null
                            p0: CONST String type=kotlin.String value='fail 4'
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
