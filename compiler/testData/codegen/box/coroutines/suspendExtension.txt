MODULE <test-module>
  FILE /suspendExtension.kt
    CLASS CLASS Controller
      CONSTRUCTOR public constructor Controller()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Controller
      FUN public final suspend fun kotlin.String.suspendHere(/*0*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL .resume type=kotlin.Unit operator=null
            $this: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
            data: $RECEIVER of: suspendHere type=kotlin.String
      FUN public final inline suspend fun kotlin.String.inlineSuspendHere(/*0*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
        BLOCK_BODY
          CALL .suspendHere type=kotlin.Unit operator=null
            $this: THIS @kotlin.coroutines.AllowSuspendExtensions() public final class Controller type=Controller
            $receiver: $RECEIVER of: inlineSuspendHere type=kotlin.String
            x: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
    FUN public suspend fun Controller.suspendExtension(/*0*/ v: kotlin.String, /*1*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
      BLOCK_BODY
        CALL .suspendHere type=kotlin.Unit operator=null
          $this: $RECEIVER of: suspendExtension type=Controller
          $receiver: GET_VAR v type=kotlin.String operator=null
          x: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
    FUN public inline suspend fun Controller.inlineSuspendExtension(/*0*/ v: kotlin.String, /*1*/ x: kotlin.coroutines.Continuation<kotlin.String>): kotlin.Unit
      BLOCK_BODY
        CALL .inlineSuspendHere type=kotlin.Unit operator=null
          $this: $RECEIVER of: inlineSuspendExtension type=Controller
          $receiver: GET_VAR v type=kotlin.String operator=null
          x: GET_VAR x type=kotlin.coroutines.Continuation<kotlin.String> operator=null
    FUN public fun builder(/*0*/ coroutine c: Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>): kotlin.Unit
      BLOCK_BODY
        CALL .resume type=kotlin.Unit operator=null
          $this: CALL .invoke type=kotlin.coroutines.Continuation<kotlin.Unit> operator=INVOKE
            $this: GET_VAR c type=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit> operator=VARIABLE_AS_FUNCTION
            p1: CALL .<init> type=Controller operator=null
          data: GET_OBJECT Unit type=kotlin.Unit
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CONST String type=kotlin.String value=''
        CALL .builder type=kotlin.Unit operator=null
          c: TYPE_OP operator=IMPLICIT_CAST typeOperand=Controller.() -> kotlin.coroutines.Continuation<kotlin.Unit>
            BLOCK type=Controller.() -> kotlin.Unit operator=LAMBDA
              FUN local final fun Controller.<anonymous>(): kotlin.Unit
                BLOCK_BODY
                  WHEN type=kotlin.Unit operator=IF
                    if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                        arg0: CALL .suspendHere type=kotlin.String operator=null
                          $this: $RECEIVER of: <anonymous> type=Controller
                          $receiver: CONST String type=kotlin.String value='56'
                        arg1: CONST String type=kotlin.String value='56'
                    then: THROW type=kotlin.Nothing
                      CALL .<init> type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='fail 1'
                  WHEN type=kotlin.Unit operator=IF
                    if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                        arg0: CALL .inlineSuspendHere type=kotlin.String operator=null
                          $this: $RECEIVER of: <anonymous> type=Controller
                          $receiver: CONST String type=kotlin.String value='28'
                        arg1: CONST String type=kotlin.String value='28'
                    then: THROW type=kotlin.Nothing
                      CALL .<init> type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='fail 2'
                  WHEN type=kotlin.Unit operator=IF
                    if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                        arg0: CALL .suspendExtension type=kotlin.String operator=null
                          $receiver: $RECEIVER of: <anonymous> type=Controller
                          v: CONST String type=kotlin.String value='123'
                        arg1: CONST String type=kotlin.String value='123'
                    then: THROW type=kotlin.Nothing
                      CALL .<init> type=java.lang.RuntimeException operator=null
                        p0: CONST String type=kotlin.String value='fail 3'
                  RETURN type=kotlin.Nothing from=<anonymous>
                    SET_VAR result type=kotlin.Unit operator=EQ
                      CALL .inlineSuspendExtension type=kotlin.String operator=null
                        $receiver: $RECEIVER of: <anonymous> type=Controller
                        v: CONST String type=kotlin.String value='OK'
              CALLABLE_REFERENCE <anonymous> type=Controller.() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          GET_VAR result type=kotlin.String operator=null
