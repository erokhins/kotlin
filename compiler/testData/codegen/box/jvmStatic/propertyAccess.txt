MODULE <test-module>
  FILE /propertyAccess.kt
    PROPERTY public var holder: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value=''
    FUN public fun getA(): A
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=PLUSEQ
          CALL .<set-holder> type=kotlin.Unit operator=PLUSEQ
            <set-?>: CALL .plus type=kotlin.String operator=PLUSEQ
              $this: CALL .<get-holder> type=kotlin.String operator=PLUSEQ
              other: CONST String type=kotlin.String value='getA()'
        RETURN type=kotlin.Nothing from=getA
          GET_OBJECT A type=A
    CLASS OBJECT A
      CONSTRUCTOR private constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY @kotlin.jvm.JvmStatic() public final var a: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='1'
      PROPERTY public final var b: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='1'
        PROPERTY_GETTER @kotlin.jvm.JvmStatic() public final fun <get-b>(): kotlin.Int
      PROPERTY public final var c: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='1'
        PROPERTY_SETTER @kotlin.jvm.JvmStatic() public final fun <set-c>(/*0*/ <set-?>: kotlin.Int): kotlin.Unit
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-a> type=kotlin.Int operator=GET_PROPERTY
                  $this: CALL .getA type=A operator=null
                arg1: CONST Int type=kotlin.Int value='1'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-holder> type=kotlin.String operator=GET_PROPERTY
                arg1: CONST String type=kotlin.String value='getA()'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 1: '
              CALL .<get-holder> type=kotlin.String operator=GET_PROPERTY
        CALL .<set-holder> type=kotlin.Unit operator=EQ
          <set-?>: CONST String type=kotlin.String value=''
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-b> type=kotlin.Int operator=GET_PROPERTY
                  $this: CALL .getA type=A operator=null
                arg1: CONST Int type=kotlin.Int value='1'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-holder> type=kotlin.String operator=GET_PROPERTY
                arg1: CONST String type=kotlin.String value='getA()'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 2: '
              CALL .<get-holder> type=kotlin.String operator=GET_PROPERTY
        CALL .<set-holder> type=kotlin.Unit operator=EQ
          <set-?>: CONST String type=kotlin.String value=''
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-c> type=kotlin.Int operator=GET_PROPERTY
                  $this: CALL .getA type=A operator=null
                arg1: CONST Int type=kotlin.Int value='1'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-holder> type=kotlin.String operator=GET_PROPERTY
                arg1: CONST String type=kotlin.String value='getA()'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 3: '
              CALL .<get-holder> type=kotlin.String operator=GET_PROPERTY
        CALL .<set-holder> type=kotlin.Unit operator=EQ
          <set-?>: CONST String type=kotlin.String value=''
        CALL .<set-a> type=kotlin.Unit operator=EQ
          $this: CALL .getA type=A operator=null
          <set-?>: CONST Int type=kotlin.Int value='2'
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-a> type=kotlin.Int operator=GET_PROPERTY
                  $this: CALL .getA type=A operator=null
                arg1: CONST Int type=kotlin.Int value='2'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-holder> type=kotlin.String operator=GET_PROPERTY
                arg1: CONST String type=kotlin.String value='getA()getA()'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 1: '
              CALL .<get-holder> type=kotlin.String operator=GET_PROPERTY
        CALL .<set-holder> type=kotlin.Unit operator=EQ
          <set-?>: CONST String type=kotlin.String value=''
        CALL .<set-b> type=kotlin.Unit operator=EQ
          $this: CALL .getA type=A operator=null
          <set-?>: CONST Int type=kotlin.Int value='2'
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-b> type=kotlin.Int operator=GET_PROPERTY
                  $this: CALL .getA type=A operator=null
                arg1: CONST Int type=kotlin.Int value='2'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-holder> type=kotlin.String operator=GET_PROPERTY
                arg1: CONST String type=kotlin.String value='getA()getA()'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 2: '
              CALL .<get-holder> type=kotlin.String operator=GET_PROPERTY
        CALL .<set-holder> type=kotlin.Unit operator=EQ
          <set-?>: CONST String type=kotlin.String value=''
        CALL .<set-c> type=kotlin.Unit operator=EQ
          $this: CALL .getA type=A operator=null
          <set-?>: CONST Int type=kotlin.Int value='2'
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-c> type=kotlin.Int operator=GET_PROPERTY
                  $this: CALL .getA type=A operator=null
                arg1: CONST Int type=kotlin.Int value='2'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-holder> type=kotlin.String operator=GET_PROPERTY
                arg1: CONST String type=kotlin.String value='getA()getA()'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 3: '
              CALL .<get-holder> type=kotlin.String operator=GET_PROPERTY
        CALL .<set-holder> type=kotlin.Unit operator=EQ
          <set-?>: CONST String type=kotlin.String value=''
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
