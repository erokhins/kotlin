MODULE <test-module>
  FILE /convention.kt
    CLASS CLASS B
      CONSTRUCTOR public constructor B(/*0*/ s: kotlin.Int = ...)
        s: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='0'
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD s type=kotlin.Unit operator=null
            receiver: THIS public final class B type=B
            value: GET_VAR s type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      PROPERTY public final var s: kotlin.Int
        EXPRESSION_BODY
          GET_VAR s type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS OBJECT A
      CONSTRUCTOR private constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      FUN public final fun test1(/*0*/ v: B): kotlin.Unit
        BLOCK_BODY
          CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
            $this: THIS public object A type=A
            $receiver: GET_VAR v type=B operator=PLUSEQ
            b: CALL .<init> type=B operator=null
              s: CONST Int type=kotlin.Int value='1000'
      FUN @kotlin.jvm.JvmStatic() public final operator fun B.plusAssign(/*0*/ b: B): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=PLUSEQ
            VAR val tmp0_this: B
              $RECEIVER of: plusAssign type=B
            CALL .<set-s> type=kotlin.Unit operator=PLUSEQ
              $this: GET_VAR tmp0_this type=B operator=null
              <set-?>: CALL .plus type=kotlin.Int operator=PLUSEQ
                $this: CALL .<get-s> type=kotlin.Int operator=PLUSEQ
                  $this: GET_VAR tmp0_this type=B operator=null
                other: CALL .<get-s> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR b type=B operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val b1: B
          CALL .<init> type=B operator=null
            s: CONST Int type=kotlin.Int value='11'
        CALL .with type=kotlin.Unit operator=null
          receiver: GET_OBJECT A type=A
          block: BLOCK type=A.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun A.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
                    $this: $RECEIVER of: <anonymous> type=A
                    $receiver: GET_VAR b1 type=B operator=PLUSEQ
                    b: CALL .<init> type=B operator=null
                      s: CONST Int type=kotlin.Int value='1000'
            CALLABLE_REFERENCE <anonymous> type=A.() -> kotlin.Unit operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-s> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR b1 type=B operator=null
              arg1: CONST Int type=kotlin.Int value='1011'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        VAR val b: B
          CALL .<init> type=B operator=null
            s: CONST Int type=kotlin.Int value='11'
        CALL .test1 type=kotlin.Unit operator=null
          $this: GET_OBJECT A type=A
          v: GET_VAR b type=B operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-s> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR b type=B operator=null
              arg1: CONST Int type=kotlin.Int value='1011'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
