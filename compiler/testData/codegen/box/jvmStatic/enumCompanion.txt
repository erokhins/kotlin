MODULE <test-module>
  FILE /enumCompanionObject.kt
    CLASS ENUM_CLASS A
      CONSTRUCTOR private constructor A()
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL Enum super
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      CLASS OBJECT Companion
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Companion
        PROPERTY @kotlin.jvm.JvmField() public final val foo: kotlin.String = "OK"
          EXPRESSION_BODY
            CONST String type=kotlin.String value='OK'
        PROPERTY public const final val constBar: kotlin.String = "OK"
          EXPRESSION_BODY
            CONST String type=kotlin.String value='OK'
        PROPERTY @kotlin.jvm.JvmStatic() public final val bar: kotlin.String = "OK"
          EXPRESSION_BODY
            CONST String type=kotlin.String value='OK'
        FUN @kotlin.jvm.JvmStatic() public final fun baz(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=baz
              CALL .<get-foo> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public companion object Companion type=A.Companion
      FUN public final /*synthesized*/ fun values(): kotlin.Array<A>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): A
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .foo type=kotlin.String! operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail foo'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .constBar type=kotlin.String! operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail bar'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .getBar type=kotlin.String! operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail getBar'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .baz type=kotlin.String! operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail baz'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
