MODULE <test-module>
  FILE /nested2.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val y: kotlin.Int = 12
          CONST Int type=kotlin.Int value='12'
        VAR val op: (kotlin.Int) -> kotlin.String
          BLOCK type=(kotlin.Int) -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(/*0*/ x: kotlin.Int): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .toString type=kotlin.String operator=null
                    $this: CALL .plus type=kotlin.Int operator=PLUS
                      $this: GET_VAR x type=kotlin.Int operator=null
                      other: GET_VAR y type=kotlin.Int operator=null
            CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.String operator=LAMBDA
        VAR val op2: kotlin.Int.(kotlin.Int) -> kotlin.String
          BLOCK type=kotlin.Int.(kotlin.Int) -> kotlin.String operator=LAMBDA
            FUN local final fun kotlin.Int.<anonymous>(/*0*/ it: kotlin.Int): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .invoke type=kotlin.String operator=INVOKE
                    $this: GET_VAR op type=(kotlin.Int) -> kotlin.String operator=VARIABLE_AS_FUNCTION
                    p1: CALL .plus type=kotlin.Int operator=PLUS
                      $this: $RECEIVER of: <anonymous> type=kotlin.Int
                      other: GET_VAR it type=kotlin.Int operator=null
            CALLABLE_REFERENCE <anonymous> type=kotlin.Int.(kotlin.Int) -> kotlin.String operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CONST String type=kotlin.String value='27'
              arg1: CALL .invoke type=kotlin.String operator=INVOKE
                $this: GET_VAR op2 type=kotlin.Int.(kotlin.Int) -> kotlin.String operator=VARIABLE_AS_FUNCTION
                $receiver: CONST Int type=kotlin.Int value='5'
                p2: CONST Int type=kotlin.Int value='10'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
