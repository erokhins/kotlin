MODULE <test-module>
  FILE /kt1776.kt
    CLASS INTERFACE Expr
      FUN public open fun ttFun(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=ttFun
            CONST Int type=kotlin.Int value='12'
    CLASS CLASS Num
      CONSTRUCTOR public constructor Num(/*0*/ value: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD value type=kotlin.Unit operator=null
            receiver: THIS public final class Num : Expr type=Num
            value: GET_VAR value type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Num
      PROPERTY public final val value: kotlin.Int
        EXPRESSION_BODY
          GET_VAR value type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun Expr.sometest(): kotlin.Int
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=INSTANCEOF typeOperand=Num
            $RECEIVER of: sometest type=Expr
          then: BLOCK type=kotlin.Nothing operator=null
            CALL .<get-value> type=kotlin.Int operator=GET_PROPERTY
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=Num
                $RECEIVER of: sometest type=Expr
            RETURN type=kotlin.Nothing from=sometest
              CALL .<get-value> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=Num
                  $RECEIVER of: sometest type=Expr
        RETURN type=kotlin.Nothing from=sometest
          CONST Int type=kotlin.Int value='0'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .sometest type=kotlin.Int operator=null
                $receiver: CALL .<init> type=Num operator=null
                  value: CONST Int type=kotlin.Int value='11'
              arg1: CONST Int type=kotlin.Int value='11'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail '
              CALL .sometest type=kotlin.Int operator=null
                $receiver: CALL .<init> type=Num operator=null
                  value: CONST Int type=kotlin.Int value='11'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
