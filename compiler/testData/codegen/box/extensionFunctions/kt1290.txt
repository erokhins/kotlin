MODULE <test-module>
  FILE /kt1290.kt
    CLASS CLASS Foo
      CONSTRUCTOR public constructor Foo</*0*/ T>(/*0*/ filter: (T) -> kotlin.Boolean)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD filter type=kotlin.Unit operator=null
            receiver: THIS public final class Foo</*0*/ T> type=Foo<T>
            value: GET_VAR filter type=(T) -> kotlin.Boolean operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Foo
      PROPERTY public final val filter: (T) -> kotlin.Boolean
        EXPRESSION_BODY
          GET_VAR filter type=(T) -> kotlin.Boolean operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun bar(/*0*/ tee: T): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=bar
            CALL .invoke type=kotlin.Boolean operator=INVOKE
              $this: CALL .<get-filter> type=(T) -> kotlin.Boolean operator=GET_PROPERTY
                $this: THIS public final class Foo</*0*/ T> type=Foo<T>
              p1: GET_VAR tee type=T operator=null
    FUN public fun foo(): kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CALL .bar type=kotlin.Boolean operator=null
            $this: CALL .<init> type=Foo<kotlin.Int> operator=null
              filter: BLOCK type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ i: kotlin.Int): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .LT0 type=kotlin.Boolean operator=LT
                        arg0: CALL .compareTo type=kotlin.Int operator=LT
                          $this: GET_VAR i type=kotlin.Int operator=null
                          other: CONST Int type=kotlin.Int value='5'
                CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
            tee: CONST Int type=kotlin.Int value='2'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .foo type=kotlin.Boolean operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
