MODULE <test-module>
  FILE /kt3285.kt
    PROPERTY public var sayResult: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value=''
    CLASS CLASS NoiseMaker
      CONSTRUCTOR public constructor NoiseMaker()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=NoiseMaker
      FUN public final fun say(/*0*/ str: kotlin.String): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=PLUSEQ
            CALL .<set-sayResult> type=kotlin.Unit operator=PLUSEQ
              <set-?>: CALL .plus type=kotlin.String operator=PLUSEQ
                $this: CALL .<get-sayResult> type=kotlin.String operator=PLUSEQ
                other: GET_VAR str type=kotlin.String operator=null
    FUN public fun noiseMaker(/*0*/ f: NoiseMaker.() -> kotlin.Unit): kotlin.Unit
      BLOCK_BODY
        VAR val noiseMaker: NoiseMaker
          CALL .<init> type=NoiseMaker operator=null
        CALL .invoke type=kotlin.Unit operator=INVOKE
          $this: GET_VAR f type=NoiseMaker.() -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
          $receiver: GET_VAR noiseMaker type=NoiseMaker operator=null
    CLASS CLASS Pet
      CONSTRUCTOR public constructor Pet()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Pet
      FUN public final fun </*0*/ T> NoiseMaker.playWith(/*0*/ friend: T): kotlin.Unit
        BLOCK_BODY
          CALL .say type=kotlin.Unit operator=null
            $this: $RECEIVER of: playWith type=NoiseMaker
            str: CALL .plus type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='Playing with '
              other: GET_VAR friend type=T operator=null
      FUN public abstract fun play(): kotlin.Unit
    CLASS CLASS Doggy
      CONSTRUCTOR public constructor Doggy()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Pet
          INSTANCE_INITIALIZER_CALL classDescriptor=Doggy
      FUN public open override /*1*/ fun play(): kotlin.Unit
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=play
            CALL .noiseMaker type=kotlin.Unit operator=null
              f: BLOCK type=NoiseMaker.() -> kotlin.Unit operator=LAMBDA
                FUN local final fun NoiseMaker.<anonymous>(): kotlin.Unit
                  BLOCK_BODY
                    CALL .say type=kotlin.Unit operator=null
                      $this: $RECEIVER of: <anonymous> type=NoiseMaker
                      str: CONST String type=kotlin.String value='Time to play! '
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .playWith type=kotlin.Unit operator=null
                        $this: THIS public final class Doggy : Pet type=Doggy
                        $receiver: $RECEIVER of: <anonymous> type=NoiseMaker
                        friend: CONST String type=kotlin.String value='my owner!'
                CALLABLE_REFERENCE <anonymous> type=NoiseMaker.() -> kotlin.Unit operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .play type=kotlin.Unit operator=null
          $this: CALL .<init> type=Doggy operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-sayResult> type=kotlin.String operator=GET_PROPERTY
              arg1: CONST String type=kotlin.String value='Time to play! Playing with my owner!'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: '
              CALL .<get-sayResult> type=kotlin.String operator=GET_PROPERTY
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
