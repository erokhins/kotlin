MODULE <test-module>
  FILE /executionOrder.kt
    PROPERTY public var result: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value=''
    FUN public fun getReceiver(): kotlin.Int
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=PLUSEQ
          CALL .<set-result> type=kotlin.Unit operator=PLUSEQ
            <set-?>: CALL .plus type=kotlin.String operator=PLUSEQ
              $this: CALL .<get-result> type=kotlin.String operator=PLUSEQ
              other: CONST String type=kotlin.String value='getReceiver->'
        RETURN type=kotlin.Nothing from=getReceiver
          CONST Int type=kotlin.Int value='1'
    FUN public fun getFun(/*0*/ b: kotlin.Int.(kotlin.Int) -> kotlin.Unit): kotlin.Int.(kotlin.Int) -> kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=PLUSEQ
          CALL .<set-result> type=kotlin.Unit operator=PLUSEQ
            <set-?>: CALL .plus type=kotlin.String operator=PLUSEQ
              $this: CALL .<get-result> type=kotlin.String operator=PLUSEQ
              other: CONST String type=kotlin.String value='getFun()->'
        RETURN type=kotlin.Nothing from=getFun
          GET_VAR b type=kotlin.Int.(kotlin.Int) -> kotlin.Unit operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .invoke type=kotlin.Unit operator=null
          $this: CALL .getFun type=kotlin.Int.(kotlin.Int) -> kotlin.Unit operator=null
            b: BLOCK type=kotlin.Int.(kotlin.Int) -> kotlin.Unit operator=LAMBDA
              FUN local final fun kotlin.Int.<anonymous>(/*0*/ it: kotlin.Int): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    BLOCK type=kotlin.Unit operator=PLUSEQ
                      CALL .<set-result> type=kotlin.Unit operator=PLUSEQ
                        <set-?>: CALL .plus type=kotlin.String operator=PLUSEQ
                          $this: CALL .<get-result> type=kotlin.String operator=PLUSEQ
                          other: CONST String type=kotlin.String value='End'
              CALLABLE_REFERENCE <anonymous> type=kotlin.Int.(kotlin.Int) -> kotlin.Unit operator=LAMBDA
          $receiver: CALL .getReceiver type=kotlin.Int operator=null
          p2: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
              arg1: CONST String type=kotlin.String value='getFun()->getReceiver->End'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail '
              CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
