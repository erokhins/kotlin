MODULE <test-module>
  FILE /closureReturnsNullableUnit.kt
    FUN public fun isNull(/*0*/ x: kotlin.Unit?): kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=isNull
          CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR x type=kotlin.Unit? operator=null
            arg1: CONST Null type=kotlin.Nothing? value='null'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val closure: () -> kotlin.Unit?
          BLOCK type=() -> kotlin.Nothing? operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Nothing?
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CONST Null type=kotlin.Nothing? value='null'
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Nothing? operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .isNull type=kotlin.Boolean operator=null
              x: CALL .invoke type=kotlin.Unit? operator=INVOKE
                $this: GET_VAR closure type=() -> kotlin.Unit? operator=VARIABLE_AS_FUNCTION
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail 1'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
