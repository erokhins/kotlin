MODULE <test-module>
  FILE /kt4265.kt
    FUN public fun </*0*/ T : kotlin.Any, /*1*/ R> T.let(/*0*/ f: (T) -> R): R
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=let
          CALL .invoke type=R operator=INVOKE
            $this: GET_VAR f type=(T) -> R operator=VARIABLE_AS_FUNCTION
            p1: $RECEIVER of: let type=T
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val o: kotlin.String? = null
          CONST Null type=kotlin.Nothing? value='null'
        VAR var state: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=ELVIS
          VAR val tmp1_elvis_lhs: kotlin.Unit?
            BLOCK type=kotlin.Unit? operator=SAFE_CALL
              VAR val tmp0_safe_receiver: kotlin.String?
                GET_VAR o type=kotlin.String? operator=null
              WHEN type=kotlin.Unit? operator=SAFE_CALL
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp0_safe_receiver type=kotlin.String? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CONST Null type=kotlin.Nothing? value='null'
                else: CALL .let type=kotlin.Unit operator=null
                  $this: GET_VAR tmp0_safe_receiver type=kotlin.String? operator=null
                  f: BLOCK type=(kotlin.String) -> kotlin.Unit operator=LAMBDA
                    FUN local final fun <anonymous>(/*0*/ it: kotlin.String): kotlin.Unit
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          SET_VAR state type=kotlin.Unit operator=EQ
                            CONST Int type=kotlin.Int value='1'
                    CALLABLE_REFERENCE <anonymous> type=(kotlin.String) -> kotlin.Unit operator=LAMBDA
          WHEN type=kotlin.Unit operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp1_elvis_lhs type=kotlin.Unit? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .invoke type=kotlin.Unit operator=null
              $this: BLOCK type=() -> kotlin.Unit operator=LAMBDA
                FUN local final fun <anonymous>(): kotlin.Unit
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      SET_VAR state type=kotlin.Unit operator=EQ
                        CONST Int type=kotlin.Int value='2'
                CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
            else: GET_VAR tmp1_elvis_lhs type=kotlin.Unit? operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR state type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail: '
              GET_VAR state type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
