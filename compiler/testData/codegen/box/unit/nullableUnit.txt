MODULE <test-module>
  FILE /nullableUnit.kt
    FUN public fun isNull(/*0*/ x: kotlin.Unit?): kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=isNull
          CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR x type=kotlin.Unit? operator=null
            arg1: CONST Null type=kotlin.Nothing? value='null'
    FUN public fun </*0*/ T : kotlin.Any> isNullGeneric(/*0*/ x: T?): kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=isNullGeneric
          CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR x type=T? operator=null
            arg1: CONST Null type=kotlin.Nothing? value='null'
    FUN public fun deepIsNull0(/*0*/ x: kotlin.Unit?): kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=deepIsNull0
          CALL .isNull type=kotlin.Boolean operator=null
            x: GET_VAR x type=kotlin.Unit? operator=null
    FUN public fun deepIsNull(/*0*/ x: kotlin.Unit?): kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=deepIsNull
          CALL .deepIsNull0 type=kotlin.Boolean operator=null
            x: GET_VAR x type=kotlin.Unit? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .isNull type=kotlin.Boolean operator=null
              x: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail 1'
        VAR val x: kotlin.Unit? = null
          CONST Null type=kotlin.Nothing? value='null'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .isNull type=kotlin.Boolean operator=null
              x: GET_VAR x type=kotlin.Unit? operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail 2'
        VAR val y: kotlin.Unit? = null
          GET_VAR x type=kotlin.Unit? operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .isNullGeneric type=kotlin.Boolean operator=null
              x: GET_VAR y type=kotlin.Unit? operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail 3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .deepIsNull type=kotlin.Boolean operator=null
              x: BLOCK type=kotlin.Unit? operator=ELVIS
                VAR val tmp0_elvis_lhs: kotlin.Unit?
                  GET_VAR x type=kotlin.Unit? operator=null
                WHEN type=kotlin.Unit? operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp0_elvis_lhs type=kotlin.Unit? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Null type=kotlin.Nothing? value='null'
                  else: GET_VAR tmp0_elvis_lhs type=kotlin.Unit? operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail 4'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
