MODULE <test-module>
  FILE /kt1170.kt
    CLASS CLASS BaseClass
      CONSTRUCTOR public constructor BaseClass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=BaseClass
      PROPERTY public open val kind: kotlin.String = "BaseClass "
        EXPRESSION_BODY
          CONST String type=kotlin.String value='BaseClass '
      FUN public final fun getKindValue(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=getKindValue
            CALL .<get-kind> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public abstract class BaseClass type=BaseClass
    CLASS CLASS Subclass
      CONSTRUCTOR public constructor Subclass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL BaseClass
          INSTANCE_INITIALIZER_CALL classDescriptor=Subclass
      PROPERTY public open override /*1*/ val kind: kotlin.String = "Subclass "
        EXPRESSION_BODY
          CONST String type=kotlin.String value='Subclass '
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val r: kotlin.String
          CALL .plus type=kotlin.String operator=PLUS
            $this: CALL .getKindValue type=kotlin.String operator=null
              $this: CALL .<init> type=Subclass operator=null
            other: CALL .<get-kind> type=kotlin.String operator=GET_PROPERTY
              $this: CALL .<init> type=Subclass operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR r type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='Subclass Subclass '
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
