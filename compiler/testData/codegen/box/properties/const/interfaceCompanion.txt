MODULE <test-module>
  FILE /interfaceCompanion.kt
    CLASS INTERFACE KInt
      CLASS OBJECT Companion
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Companion
        PROPERTY public const final val a: kotlin.String = "a"
          EXPRESSION_BODY
            CONST String type=kotlin.String value='a'
        PROPERTY public const final val b: kotlin.String = "ba"
          EXPRESSION_BODY
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='b'
              CALL .<get-a> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public companion object Companion type=KInt.Companion
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: kotlin.Any!
          CALL .get type=kotlin.Any! operator=null
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
              CALL .getField type=java.lang.reflect.Field! operator=null
                $this: CALL .<get-java> type=java.lang.Class<KInt> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE KInt type=kotlin.reflect.KClass<KInt>
                p0: CONST String type=kotlin.String value='a'
            p0: CONST Null type=kotlin.Nothing? value='null'
        VAR val b: kotlin.Any!
          CALL .get type=kotlin.Any! operator=null
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
              CALL .getField type=java.lang.reflect.Field! operator=null
                $this: CALL .<get-java> type=java.lang.Class<KInt> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE KInt type=kotlin.reflect.KClass<KInt>
                p0: CONST String type=kotlin.String value='b'
            p0: CONST Null type=kotlin.Nothing? value='null'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQEQ
            arg0: CALL .EQEQEQ type=kotlin.Boolean operator=EXCLEQEQ
              arg0: GET_VAR a type=kotlin.Any! operator=null
              arg1: CALL .<get-a> type=kotlin.String operator=GET_PROPERTY
                $this: GET_OBJECT Companion type=KInt.Companion
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1: KInt.a !== KInt.Companion.a'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQEQ
            arg0: CALL .EQEQEQ type=kotlin.Boolean operator=EXCLEQEQ
              arg0: GET_VAR b type=kotlin.Any! operator=null
              arg1: CALL .<get-b> type=kotlin.String operator=GET_PROPERTY
                $this: GET_OBJECT Companion type=KInt.Companion
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2: KInt.b !== KInt.Companion.b'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQEQ
            arg0: CALL .EQEQEQ type=kotlin.Boolean operator=EXCLEQEQ
              arg0: GET_VAR b type=kotlin.Any! operator=null
              arg1: CONST String type=kotlin.String value='ba'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2: 'ba' !== KInt.Companion.b'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
