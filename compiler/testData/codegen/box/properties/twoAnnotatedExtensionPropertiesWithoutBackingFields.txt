MODULE <test-module>
  FILE /twoAnnotatedExtensionPropertiesWithoutBackingFields.kt
    CLASS ANNOTATION_CLASS Anno
      CONSTRUCTOR public constructor Anno()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Anno
    PROPERTY @Anno() public val kotlin.Int.foo: kotlin.Int
      PROPERTY_GETTER public fun kotlin.Int.<get-foo>(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=<get-foo>
            $RECEIVER of: foo type=kotlin.Int
    PROPERTY @Anno() public val kotlin.String.foo: kotlin.Int
      PROPERTY_GETTER public fun kotlin.String.<get-foo>(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=<get-foo>
            CONST Int type=kotlin.Int value='42'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: WHEN type=kotlin.Boolean operator=ANDAND
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: CALL .<get-foo> type=kotlin.Int operator=GET_PROPERTY
                  $receiver: CONST Int type=kotlin.Int value='42'
                arg1: CONST Int type=kotlin.Int value='42'
              then: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: CALL .<get-foo> type=kotlin.Int operator=GET_PROPERTY
                  $receiver: CONST String type=kotlin.String value='OK'
                arg1: CONST Int type=kotlin.Int value='42'
              else: CONST Boolean type=kotlin.Boolean value='false'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='Fail'
