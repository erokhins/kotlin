MODULE <test-module>
  FILE /generalAccess.kt
    PROPERTY public val staticProperty: kotlin.String = "1"
      EXPRESSION_BODY
        CONST String type=kotlin.String value='1'
    PROPERTY public val kotlin.String.staticExt: kotlin.String
      PROPERTY_GETTER public fun kotlin.String.<get-staticExt>(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=<get-staticExt>
            CONST String type=kotlin.String value='1'
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ init: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD init type=kotlin.Unit operator=null
            receiver: THIS public open class A type=As.A
            value: GET_VAR init type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final val init: kotlin.String
        EXPRESSION_BODY
          GET_VAR init type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public open val property: kotlin.String
        EXPRESSION_BODY
          CALL .<get-init> type=kotlin.String operator=GET_PROPERTY
            $this: THIS public open class A type=As.A
      PROPERTY private final val privateProperty: kotlin.String
        EXPRESSION_BODY
          CALL .<get-init> type=kotlin.String operator=GET_PROPERTY
            $this: THIS public open class A type=As.A
      PROPERTY public final val kotlin.String.ext: kotlin.String
        PROPERTY_GETTER public final fun kotlin.String.<get-ext>(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-ext>
              CONST String type=kotlin.String value='1'
      PROPERTY public final val kotlin.Int.myInc: kotlin.Int
        PROPERTY_GETTER public final fun kotlin.Int.<get-myInc>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-myInc>
              CALL .plus type=kotlin.Int operator=PLUS
                $this: $RECEIVER of: myInc type=kotlin.Int
                other: CONST Int type=kotlin.Int value='1'
      FUN public open fun getPrivate(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=getPrivate
            CALL .<get-privateProperty> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public open class A type=As.A
      FUN public open fun getExt(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=getExt
            CALL .<get-ext> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public open class A type=As.A
              $receiver: CONST String type=kotlin.String value='0'
      PROPERTY public final var backingField: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='0'
        PROPERTY_GETTER public final fun <get-backingField>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-backingField>
              CALL .<get-myInc> type=kotlin.Int operator=GET_PROPERTY
                $this: THIS public open class A type=As.A
                $receiver: GET_VAR field type=kotlin.Int operator=null
        PROPERTY_SETTER public final fun <set-backingField>(/*0*/ s: kotlin.Int): kotlin.Unit
          BLOCK_BODY
            SET_BACKING_FIELD backingField type=kotlin.Unit operator=EQ
              value: GET_VAR s type=kotlin.Int operator=null
    CLASS CLASS B
      CONSTRUCTOR public constructor B(/*0*/ init: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL A
            init: CONST String type=kotlin.String value='1'
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      PROPERTY public open override /*1*/ val property: kotlin.String
        EXPRESSION_BODY
          GET_VAR init type=kotlin.String operator=null
      FUN public final fun getOpenProperty(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=getOpenProperty
            CALL .<get-property> superQualifier=A type=kotlin.String operator=GET_PROPERTY
              $this: THIS public open class B : As.A type=As.A
      FUN public final fun getWithBackingFieldProperty(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=getWithBackingFieldProperty
            CALL .<get-property> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public open class B : As.A type=As.B
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: As.A
          CALL .<init> type=As.A operator=null
            init: CONST String type=kotlin.String value='1'
        VAR val b: As.B
          CALL .<init> type=As.B operator=null
            init: CONST String type=kotlin.String value='0'
        CALL .<set-backingField> type=kotlin.Unit operator=EQ
          $this: GET_VAR a type=As.A operator=null
          s: CONST Int type=kotlin.Int value='0'
        VAR val result: kotlin.String
          CALL .plus type=kotlin.String operator=PLUS
            $this: CALL .plus type=kotlin.String operator=PLUS
              $this: CALL .plus type=kotlin.String operator=PLUS
                $this: CALL .plus type=kotlin.String operator=PLUS
                  $this: CALL .plus type=kotlin.String operator=PLUS
                    $this: CALL .plus type=kotlin.String operator=PLUS
                      $this: CALL .plus type=kotlin.String operator=PLUS
                        $this: CALL .plus type=kotlin.String operator=PLUS
                          $this: CALL .plus type=kotlin.String operator=PLUS
                            $this: CALL .<get-property> type=kotlin.String operator=GET_PROPERTY
                              $this: GET_VAR a type=As.A operator=null
                            other: CALL .getPrivate type=kotlin.String operator=null
                              $this: GET_VAR a type=As.A operator=null
                          other: CALL .<get-staticProperty> type=kotlin.String operator=GET_PROPERTY
                        other: CALL .<get-staticExt> type=kotlin.String operator=GET_PROPERTY
                          $receiver: CONST String type=kotlin.String value='0'
                      other: CALL .getExt type=kotlin.String operator=null
                        $this: GET_VAR a type=As.A operator=null
                    other: CALL .<get-backingField> type=kotlin.Int operator=GET_PROPERTY
                      $this: GET_VAR a type=As.A operator=null
                  other: CALL .<get-backingField> type=kotlin.Int operator=GET_PROPERTY
                    $this: GET_VAR a type=As.A operator=null
                other: CALL .getOpenProperty type=kotlin.String operator=null
                  $this: GET_VAR b type=As.B operator=null
              other: CALL .<get-property> type=kotlin.String operator=GET_PROPERTY
                $this: GET_VAR b type=As.B operator=null
            other: CALL .getWithBackingFieldProperty type=kotlin.String operator=null
              $this: GET_VAR b type=As.B operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR result type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='1111111100'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
