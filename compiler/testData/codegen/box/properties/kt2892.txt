MODULE <test-module>
  FILE /kt2892.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL A
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      FUN public final fun foo(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CONST Int type=kotlin.Int value='1'
    CLASS CLASS Test
      CONSTRUCTOR public constructor Test()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Test
      PROPERTY public final val a: A
        EXPRESSION_BODY
          CALL .<init> type=B operator=null
      PROPERTY private final val b: B
        PROPERTY_GETTER private final fun <get-b>(): B
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-b>
              TYPE_OP operator=CAST typeOperand=B
                CALL .<get-a> type=A operator=GET_PROPERTY
                  $this: THIS public final class Test type=Test
      FUN public final fun outer(): kotlin.Int
        BLOCK_BODY
          FUN local final fun inner(): kotlin.Int
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=inner
                CALL .foo type=kotlin.Int operator=null
                  $this: CALL .<get-b> type=B operator=GET_PROPERTY
                    $this: THIS public final class Test type=Test
          RETURN type=kotlin.Nothing from=outer
            CALL .inner type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .outer type=kotlin.Int operator=null
                $this: CALL .<init> type=Test operator=null
              arg1: CONST Int type=kotlin.Int value='1'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
