MODULE <test-module>
  FILE /kt1168.kt
    CLASS CLASS BaseClass
      CONSTRUCTOR public constructor BaseClass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=BaseClass
      PROPERTY protected abstract val kind: kotlin.String
      PROPERTY protected open val kind2: kotlin.String = " kind1"
        EXPRESSION_BODY
          CONST String type=kotlin.String value=' kind1'
      FUN public final fun debug(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=debug
            CALL .plus type=kotlin.String operator=PLUS
              $this: CALL .<get-kind> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public abstract class BaseClass type=BaseClass
              other: CALL .<get-kind2> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public abstract class BaseClass type=BaseClass
    CLASS CLASS Subclass
      CONSTRUCTOR public constructor Subclass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL BaseClass
          INSTANCE_INITIALIZER_CALL classDescriptor=Subclass
      PROPERTY protected open override /*1*/ val kind: kotlin.String = "Physical"
        EXPRESSION_BODY
          CONST String type=kotlin.String value='Physical'
      PROPERTY protected open override /*1*/ val kind2: kotlin.String = " kind2"
        EXPRESSION_BODY
          CONST String type=kotlin.String value=' kind2'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .debug type=kotlin.String operator=null
                $this: CALL .<init> type=Subclass operator=null
              arg1: CONST String type=kotlin.String value='Physical kind2'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
