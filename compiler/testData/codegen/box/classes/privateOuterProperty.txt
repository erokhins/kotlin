MODULE <test-module>
  FILE /privateOuterProperty.kt
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      PROPERTY private final var v: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='0'
      FUN public final fun foo(): kotlin.Int
        BLOCK_BODY
          CALL .invoke type=kotlin.Unit operator=null
            $this: BLOCK type=() -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<set-v> type=kotlin.Unit operator=EQ
                      $this: THIS public final class C type=C
                      <set-?>: CALL .plus type=kotlin.Int operator=PLUS
                        $this: CALL .<get-v> type=kotlin.Int operator=GET_PROPERTY
                          $this: THIS public final class C type=C
                        other: CONST Int type=kotlin.Int value='1'
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
          CALL .run type=kotlin.Unit operator=null
            $this: BLOCK type=C.foo.<no name provided> operator=OBJECT_LITERAL
              CLASS CLASS <no name provided>
                CONSTRUCTOR public constructor <no name provided>()
                  BLOCK_BODY
                    DELEGATING_CONSTRUCTOR_CALL Any
                    INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
                FUN public open override /*1*/ fun run(): kotlin.Unit
                  BLOCK_BODY
                    CALL .<set-v> type=kotlin.Unit operator=EQ
                      $this: THIS public final class C type=C
                      <set-?>: CALL .plus type=kotlin.Int operator=PLUS
                        $this: CALL .<get-v> type=kotlin.Int operator=GET_PROPERTY
                          $this: THIS public final class C type=C
                        other: CONST Int type=kotlin.Int value='1'
              CALL .<init> type=C.foo.<no name provided> operator=OBJECT_LITERAL
          CALL .innerFun type=kotlin.Unit operator=null
            $this: CALL .<init> type=C.Inner operator=null
              $this: THIS public final class C type=C
          RETURN type=kotlin.Nothing from=foo
            CALL .<get-v> type=kotlin.Int operator=GET_PROPERTY
              $this: THIS public final class C type=C
      CLASS CLASS Inner
        CONSTRUCTOR public constructor Inner()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Inner
        FUN public final fun innerFun(): kotlin.Unit
          BLOCK_BODY
            CALL .<set-v> type=kotlin.Unit operator=EQ
              $this: THIS public final class C type=C
              <set-?>: CALL .plus type=kotlin.Int operator=PLUS
                $this: CALL .<get-v> type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS public final class C type=C
                other: CONST Int type=kotlin.Int value='1'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .foo type=kotlin.Int operator=null
                $this: CALL .<init> type=C operator=null
              arg1: CONST Int type=kotlin.Int value='3'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='NOT OK'
