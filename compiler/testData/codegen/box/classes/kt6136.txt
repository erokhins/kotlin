MODULE <test-module>
  FILE /kt6136.kt
    CLASS INTERFACE Id
      PROPERTY public abstract val id: T
    CLASS CLASS Actor
      CONSTRUCTOR public constructor Actor(/*0*/ id: kotlin.Int, /*1*/ firstName: kotlin.String, /*2*/ lastName: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD id type=kotlin.Unit operator=null
            receiver: THIS public final data class Actor : Id<kotlin.Int> type=Actor
            value: GET_VAR id type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD firstName type=kotlin.Unit operator=null
            receiver: THIS public final data class Actor : Id<kotlin.Int> type=Actor
            value: GET_VAR firstName type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD lastName type=kotlin.Unit operator=null
            receiver: THIS public final data class Actor : Id<kotlin.Int> type=Actor
            value: GET_VAR lastName type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Actor
      PROPERTY public open override /*1*/ val id: kotlin.Int
        EXPRESSION_BODY
          GET_VAR id type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val firstName: kotlin.String
        EXPRESSION_BODY
          GET_VAR firstName type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val lastName: kotlin.String
        EXPRESSION_BODY
          GET_VAR lastName type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator /*synthesized*/ fun component1(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CALL .<get-id> type=kotlin.Int operator=GET_PROPERTY
              $this: THIS public final data class Actor : Id<kotlin.Int> type=Actor
      FUN public final operator /*synthesized*/ fun component2(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component2
            CALL .<get-firstName> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public final data class Actor : Id<kotlin.Int> type=Actor
      FUN public final operator /*synthesized*/ fun component3(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component3
            CALL .<get-lastName> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public final data class Actor : Id<kotlin.Int> type=Actor
      FUN public final /*synthesized*/ fun copy(/*0*/ id: kotlin.Int = ..., /*1*/ firstName: kotlin.String = ..., /*2*/ lastName: kotlin.String = ...): Actor
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=copy
            CALL .<init> type=Actor operator=null
              id: GET_VAR id type=kotlin.Int operator=null
              firstName: GET_VAR firstName type=kotlin.String operator=null
              lastName: GET_VAR lastName type=kotlin.String operator=null
      FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Actor('
              CONST String type=kotlin.String value='id='
              CALL .<get-id> type=kotlin.Int operator=GET_PROPERTY
                $this: THIS public final data class Actor : Id<kotlin.Int> type=Actor
              CONST String type=kotlin.String value=', '
              CONST String type=kotlin.String value='firstName='
              CALL .<get-firstName> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public final data class Actor : Id<kotlin.Int> type=Actor
              CONST String type=kotlin.String value=', '
              CONST String type=kotlin.String value='lastName='
              CALL .<get-lastName> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public final data class Actor : Id<kotlin.Int> type=Actor
              CONST String type=kotlin.String value=')'
      FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .hashCode type=kotlin.Int operator=null
              $this: CALL .<get-id> type=kotlin.Int operator=GET_PROPERTY
                $this: THIS public final data class Actor : Id<kotlin.Int> type=Actor
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .plus type=kotlin.Int operator=null
              $this: CALL .times type=kotlin.Int operator=null
                $this: GET_VAR tmp0_result type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='31'
              other: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<get-firstName> type=kotlin.String operator=GET_PROPERTY
                  $this: THIS public final data class Actor : Id<kotlin.Int> type=Actor
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .plus type=kotlin.Int operator=null
              $this: CALL .times type=kotlin.Int operator=null
                $this: GET_VAR tmp0_result type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='31'
              other: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<get-lastName> type=kotlin.String operator=GET_PROPERTY
                  $this: THIS public final data class Actor : Id<kotlin.Int> type=Actor
          RETURN type=kotlin.Nothing from=hashCode
            GET_VAR tmp0_result type=kotlin.Int operator=null
      FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS public final data class Actor : Id<kotlin.Int> type=Actor
              arg1: GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=Actor
              GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: Actor
            TYPE_OP operator=CAST typeOperand=Actor
              GET_VAR other type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-id> type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS public final data class Actor : Id<kotlin.Int> type=Actor
                arg1: CALL .<get-id> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=Actor operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-firstName> type=kotlin.String operator=GET_PROPERTY
                  $this: THIS public final data class Actor : Id<kotlin.Int> type=Actor
                arg1: CALL .<get-firstName> type=kotlin.String operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=Actor operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-lastName> type=kotlin.String operator=GET_PROPERTY
                  $this: THIS public final data class Actor : Id<kotlin.Int> type=Actor
                arg1: CALL .<get-lastName> type=kotlin.String operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=Actor operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from=equals
            CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a1: Actor
          CALL .<init> type=Actor operator=null
            id: CONST Int type=kotlin.Int value='1'
            firstName: CONST String type=kotlin.String value='Jeff'
            lastName: CONST String type=kotlin.String value='Bridges'
        VAR val a1c: Actor
          CALL .copy type=Actor operator=null
            $this: GET_VAR a1 type=Actor operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-id> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a1c type=Actor operator=null
              arg1: CALL .<get-id> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a1 type=Actor operator=null
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Failed: a1.copy().id=='
              CALL .<get-id> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a1c type=Actor operator=null
        VAR val a2: Actor
          CALL .<init> type=Actor operator=null
            id: CONST Int type=kotlin.Int value='2'
            firstName: CONST String type=kotlin.String value='Jeff'
            lastName: CONST String type=kotlin.String value='Bridges'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR a2 type=Actor operator=null
            arg1: GET_VAR a1 type=Actor operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Failed: a2==a1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .hashCode type=kotlin.Int operator=null
              $this: GET_VAR a2 type=Actor operator=null
            arg1: CALL .hashCode type=kotlin.Int operator=null
              $this: GET_VAR a1 type=Actor operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Failed: a2.hashCode()==a1.hashCode()'
        CALL .toString type=kotlin.String operator=null
          $this: GET_VAR a1 type=Actor operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
