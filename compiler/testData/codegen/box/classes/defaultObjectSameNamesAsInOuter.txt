MODULE <test-module>
  FILE /defaultObjectSameNamesAsInOuter.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY private final val p: kotlin.Int
        PROPERTY_GETTER private final fun <get-p>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-p>
              CONST Int type=kotlin.Int value='4'
      CLASS OBJECT B
        CONSTRUCTOR private constructor B()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=B
        PROPERTY public final val p: kotlin.Int
          PROPERTY_GETTER public final fun <get-p>(): kotlin.Int
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=<get-p>
                CONST Int type=kotlin.Int value='6'
      FUN public final fun a(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=a
            CALL .plus type=kotlin.Int operator=PLUS
              $this: CALL .<get-p> type=kotlin.Int operator=GET_PROPERTY
                $this: THIS public final class A type=A
              other: CALL .<get-p> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_OBJECT B type=A.B
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .a type=kotlin.Int operator=null
                $this: CALL .<init> type=A operator=null
              arg1: CONST Int type=kotlin.Int value='10'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
