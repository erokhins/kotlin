MODULE <test-module>
  FILE /kt5347.kt
    FUN public fun test1(/*0*/ str: kotlin.String): kotlin.String
      BLOCK_BODY
        CLASS CLASS A
          CONSTRUCTOR public constructor A(/*0*/ x: kotlin.Int)
            BLOCK_BODY
              DELEGATING_CONSTRUCTOR_CALL Any
              SET_BACKING_FIELD x type=kotlin.Unit operator=null
                receiver: THIS local final data class A type=test1.A
                value: GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
              INSTANCE_INITIALIZER_CALL classDescriptor=A
          PROPERTY public final val x: kotlin.Int
            EXPRESSION_BODY
              GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          FUN public final fun foo(): kotlin.String
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=foo
                GET_VAR str type=kotlin.String operator=null
          FUN public final operator /*synthesized*/ fun component1(): kotlin.Int
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=component1
                CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS local final data class A type=test1.A
          FUN public final /*synthesized*/ fun copy(/*0*/ x: kotlin.Int = ...): test1.A
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=copy
                CALL .<init> type=test1.A operator=null
                  x: GET_VAR x type=kotlin.Int operator=null
          FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=toString
                STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='A('
                  CONST String type=kotlin.String value='x='
                  CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                    $this: THIS local final data class A type=test1.A
                  CONST String type=kotlin.String value=')'
          FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            BLOCK_BODY
              VAR val tmp0_result: kotlin.Int
                CONST Int type=kotlin.Int value='0'
              SET_VAR tmp0_result type=kotlin.Unit operator=EQ
                CALL .hashCode type=kotlin.Int operator=null
                  $this: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                    $this: THIS local final data class A type=test1.A
              RETURN type=kotlin.Nothing from=hashCode
                GET_VAR tmp0_result type=kotlin.Int operator=null
          FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            BLOCK_BODY
              WHEN type=kotlin.Unit operator=null
                if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
                  arg0: THIS local final data class A type=test1.A
                  arg1: GET_VAR other type=kotlin.Any? operator=null
                then: RETURN type=kotlin.Nothing from=equals
                  CONST Boolean type=kotlin.Boolean value='true'
              WHEN type=kotlin.Unit operator=null
                if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=test1.A
                  GET_VAR other type=kotlin.Any? operator=null
                then: RETURN type=kotlin.Nothing from=equals
                  CONST Boolean type=kotlin.Boolean value='false'
              VAR val tmp0_other_with_cast: test1.A
                TYPE_OP operator=CAST typeOperand=test1.A
                  GET_VAR other type=kotlin.Any? operator=null
              WHEN type=kotlin.Unit operator=null
                if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                  arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                    arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                      $this: THIS local final data class A type=test1.A
                    arg1: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                      $this: GET_VAR tmp0_other_with_cast type=test1.A operator=null
                then: RETURN type=kotlin.Nothing from=equals
                  CONST Boolean type=kotlin.Boolean value='false'
              RETURN type=kotlin.Nothing from=equals
                CONST Boolean type=kotlin.Boolean value='true'
        RETURN type=kotlin.Nothing from=test1
          CALL .foo type=kotlin.String operator=null
            $this: CALL .copy type=test1.A operator=null
              $this: CALL .<init> type=test1.A operator=null
                x: CONST Int type=kotlin.Int value='0'
    CLASS CLASS TestClass
      CONSTRUCTOR public constructor TestClass(/*0*/ x: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD x type=kotlin.Unit operator=null
            receiver: THIS public final class TestClass type=TestClass
            value: GET_VAR x type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=TestClass
      PROPERTY public final val x: kotlin.String
        EXPRESSION_BODY
          GET_VAR x type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun foo(): kotlin.String
        BLOCK_BODY
          CLASS CLASS A
            CONSTRUCTOR public constructor A(/*0*/ x: kotlin.Int)
              BLOCK_BODY
                DELEGATING_CONSTRUCTOR_CALL Any
                SET_BACKING_FIELD x type=kotlin.Unit operator=null
                  receiver: THIS local final data class A type=TestClass.foo.A
                  value: GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
                INSTANCE_INITIALIZER_CALL classDescriptor=A
            PROPERTY public final val x: kotlin.Int
              EXPRESSION_BODY
                GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
            FUN public final fun foo(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=foo
                  CALL .<get-x> type=kotlin.String operator=GET_PROPERTY
                    $this: THIS public final class TestClass type=TestClass
            FUN public final operator /*synthesized*/ fun component1(): kotlin.Int
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=component1
                  CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                    $this: THIS local final data class A type=TestClass.foo.A
            FUN public final /*synthesized*/ fun copy(/*0*/ x: kotlin.Int = ...): TestClass.foo.A
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=copy
                  CALL .<init> type=TestClass.foo.A operator=null
                    x: GET_VAR x type=kotlin.Int operator=null
            FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=toString
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='A('
                    CONST String type=kotlin.String value='x='
                    CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                      $this: THIS local final data class A type=TestClass.foo.A
                    CONST String type=kotlin.String value=')'
            FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
              BLOCK_BODY
                VAR val tmp0_result: kotlin.Int
                  CONST Int type=kotlin.Int value='0'
                SET_VAR tmp0_result type=kotlin.Unit operator=EQ
                  CALL .hashCode type=kotlin.Int operator=null
                    $this: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                      $this: THIS local final data class A type=TestClass.foo.A
                RETURN type=kotlin.Nothing from=hashCode
                  GET_VAR tmp0_result type=kotlin.Int operator=null
            FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
              BLOCK_BODY
                WHEN type=kotlin.Unit operator=null
                  if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
                    arg0: THIS local final data class A type=TestClass.foo.A
                    arg1: GET_VAR other type=kotlin.Any? operator=null
                  then: RETURN type=kotlin.Nothing from=equals
                    CONST Boolean type=kotlin.Boolean value='true'
                WHEN type=kotlin.Unit operator=null
                  if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=TestClass.foo.A
                    GET_VAR other type=kotlin.Any? operator=null
                  then: RETURN type=kotlin.Nothing from=equals
                    CONST Boolean type=kotlin.Boolean value='false'
                VAR val tmp0_other_with_cast: TestClass.foo.A
                  TYPE_OP operator=CAST typeOperand=TestClass.foo.A
                    GET_VAR other type=kotlin.Any? operator=null
                WHEN type=kotlin.Unit operator=null
                  if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                    arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                        $this: THIS local final data class A type=TestClass.foo.A
                      arg1: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR tmp0_other_with_cast type=TestClass.foo.A operator=null
                  then: RETURN type=kotlin.Nothing from=equals
                    CONST Boolean type=kotlin.Boolean value='false'
                RETURN type=kotlin.Nothing from=equals
                  CONST Boolean type=kotlin.Boolean value='true'
          RETURN type=kotlin.Nothing from=foo
            CALL .foo type=kotlin.String operator=null
              $this: CALL .copy type=TestClass.foo.A operator=null
                $this: CALL .<init> type=TestClass.foo.A operator=null
                  x: CONST Int type=kotlin.Int value='0'
    FUN public fun test2(/*0*/ str: kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=test2
          CALL .foo type=kotlin.String operator=null
            $this: CALL .<init> type=TestClass operator=null
              x: GET_VAR str type=kotlin.String operator=null
    FUN public fun test3(/*0*/ str: kotlin.String): kotlin.String
      BLOCK_BODY
        VAR var xx: kotlin.String
          CONST String type=kotlin.String value=''
        CLASS CLASS A
          CONSTRUCTOR public constructor A(/*0*/ x: kotlin.Int)
            BLOCK_BODY
              DELEGATING_CONSTRUCTOR_CALL Any
              SET_BACKING_FIELD x type=kotlin.Unit operator=null
                receiver: THIS local final data class A type=test3.A
                value: GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
              INSTANCE_INITIALIZER_CALL classDescriptor=A
          PROPERTY public final val x: kotlin.Int
            EXPRESSION_BODY
              GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          FUN public final fun foo(): kotlin.String
            BLOCK_BODY
              SET_VAR xx type=kotlin.Unit operator=EQ
                GET_VAR str type=kotlin.String operator=null
              RETURN type=kotlin.Nothing from=foo
                GET_VAR xx type=kotlin.String operator=null
          FUN public final operator /*synthesized*/ fun component1(): kotlin.Int
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=component1
                CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS local final data class A type=test3.A
          FUN public final /*synthesized*/ fun copy(/*0*/ x: kotlin.Int = ...): test3.A
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=copy
                CALL .<init> type=test3.A operator=null
                  x: GET_VAR x type=kotlin.Int operator=null
          FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=toString
                STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='A('
                  CONST String type=kotlin.String value='x='
                  CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                    $this: THIS local final data class A type=test3.A
                  CONST String type=kotlin.String value=')'
          FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            BLOCK_BODY
              VAR val tmp0_result: kotlin.Int
                CONST Int type=kotlin.Int value='0'
              SET_VAR tmp0_result type=kotlin.Unit operator=EQ
                CALL .hashCode type=kotlin.Int operator=null
                  $this: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                    $this: THIS local final data class A type=test3.A
              RETURN type=kotlin.Nothing from=hashCode
                GET_VAR tmp0_result type=kotlin.Int operator=null
          FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            BLOCK_BODY
              WHEN type=kotlin.Unit operator=null
                if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
                  arg0: THIS local final data class A type=test3.A
                  arg1: GET_VAR other type=kotlin.Any? operator=null
                then: RETURN type=kotlin.Nothing from=equals
                  CONST Boolean type=kotlin.Boolean value='true'
              WHEN type=kotlin.Unit operator=null
                if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=test3.A
                  GET_VAR other type=kotlin.Any? operator=null
                then: RETURN type=kotlin.Nothing from=equals
                  CONST Boolean type=kotlin.Boolean value='false'
              VAR val tmp0_other_with_cast: test3.A
                TYPE_OP operator=CAST typeOperand=test3.A
                  GET_VAR other type=kotlin.Any? operator=null
              WHEN type=kotlin.Unit operator=null
                if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                  arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                    arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                      $this: THIS local final data class A type=test3.A
                    arg1: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                      $this: GET_VAR tmp0_other_with_cast type=test3.A operator=null
                then: RETURN type=kotlin.Nothing from=equals
                  CONST Boolean type=kotlin.Boolean value='false'
              RETURN type=kotlin.Nothing from=equals
                CONST Boolean type=kotlin.Boolean value='true'
        RETURN type=kotlin.Nothing from=test3
          CALL .foo type=kotlin.String operator=null
            $this: CALL .copy type=test3.A operator=null
              $this: CALL .<init> type=test3.A operator=null
                x: CONST Int type=kotlin.Int value='0'
    FUN public fun test4(/*0*/ str: kotlin.String): kotlin.String
      BLOCK_BODY
        VAR var xx: kotlin.String
          CONST String type=kotlin.String value=''
        FUN local final fun bar(/*0*/ s: kotlin.String): kotlin.String
          BLOCK_BODY
            SET_VAR xx type=kotlin.Unit operator=EQ
              GET_VAR s type=kotlin.String operator=null
            RETURN type=kotlin.Nothing from=bar
              GET_VAR xx type=kotlin.String operator=null
        CLASS CLASS A
          CONSTRUCTOR public constructor A(/*0*/ x: kotlin.Int)
            BLOCK_BODY
              DELEGATING_CONSTRUCTOR_CALL Any
              SET_BACKING_FIELD x type=kotlin.Unit operator=null
                receiver: THIS local final data class A type=test4.A
                value: GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
              INSTANCE_INITIALIZER_CALL classDescriptor=A
          PROPERTY public final val x: kotlin.Int
            EXPRESSION_BODY
              GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          FUN public final fun foo(): kotlin.String
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=foo
                CALL .bar type=kotlin.String operator=null
                  s: GET_VAR str type=kotlin.String operator=null
          FUN public final operator /*synthesized*/ fun component1(): kotlin.Int
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=component1
                CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS local final data class A type=test4.A
          FUN public final /*synthesized*/ fun copy(/*0*/ x: kotlin.Int = ...): test4.A
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=copy
                CALL .<init> type=test4.A operator=null
                  x: GET_VAR x type=kotlin.Int operator=null
          FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=toString
                STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='A('
                  CONST String type=kotlin.String value='x='
                  CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                    $this: THIS local final data class A type=test4.A
                  CONST String type=kotlin.String value=')'
          FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            BLOCK_BODY
              VAR val tmp0_result: kotlin.Int
                CONST Int type=kotlin.Int value='0'
              SET_VAR tmp0_result type=kotlin.Unit operator=EQ
                CALL .hashCode type=kotlin.Int operator=null
                  $this: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                    $this: THIS local final data class A type=test4.A
              RETURN type=kotlin.Nothing from=hashCode
                GET_VAR tmp0_result type=kotlin.Int operator=null
          FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            BLOCK_BODY
              WHEN type=kotlin.Unit operator=null
                if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
                  arg0: THIS local final data class A type=test4.A
                  arg1: GET_VAR other type=kotlin.Any? operator=null
                then: RETURN type=kotlin.Nothing from=equals
                  CONST Boolean type=kotlin.Boolean value='true'
              WHEN type=kotlin.Unit operator=null
                if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=test4.A
                  GET_VAR other type=kotlin.Any? operator=null
                then: RETURN type=kotlin.Nothing from=equals
                  CONST Boolean type=kotlin.Boolean value='false'
              VAR val tmp0_other_with_cast: test4.A
                TYPE_OP operator=CAST typeOperand=test4.A
                  GET_VAR other type=kotlin.Any? operator=null
              WHEN type=kotlin.Unit operator=null
                if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                  arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                    arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                      $this: THIS local final data class A type=test4.A
                    arg1: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                      $this: GET_VAR tmp0_other_with_cast type=test4.A operator=null
                then: RETURN type=kotlin.Nothing from=equals
                  CONST Boolean type=kotlin.Boolean value='false'
              RETURN type=kotlin.Nothing from=equals
                CONST Boolean type=kotlin.Boolean value='true'
        RETURN type=kotlin.Nothing from=test4
          CALL .foo type=kotlin.String operator=null
            $this: CALL .copy type=test4.A operator=null
              $this: CALL .<init> type=test4.A operator=null
                x: CONST Int type=kotlin.Int value='0'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=WHEN
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .test1 type=kotlin.String operator=null
                  str: CONST String type=kotlin.String value='test1'
                arg1: CONST String type=kotlin.String value='test1'
            then: CONST String type=kotlin.String value='Failed #1 (parameter capture)'
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .test2 type=kotlin.String operator=null
                  str: CONST String type=kotlin.String value='test2'
                arg1: CONST String type=kotlin.String value='test2'
            then: CONST String type=kotlin.String value='Failed #2 ('this' capture)'
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .test3 type=kotlin.String operator=null
                  str: CONST String type=kotlin.String value='test3'
                arg1: CONST String type=kotlin.String value='test3'
            then: CONST String type=kotlin.String value='Failed #3 ('var' capture)'
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .test4 type=kotlin.String operator=null
                  str: CONST String type=kotlin.String value='test4'
                arg1: CONST String type=kotlin.String value='test4'
            then: CONST String type=kotlin.String value='Failed #4 (local function capture)'
            else: CONST String type=kotlin.String value='OK'
