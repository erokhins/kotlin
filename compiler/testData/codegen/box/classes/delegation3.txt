MODULE <test-module>
  FILE /delegation3.kt
    CLASS INTERFACE One
      FUN public abstract fun foo(): kotlin.Int
      FUN public open fun faz(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=faz
            CONST Int type=kotlin.Int value='10'
    CLASS INTERFACE Two
      FUN public abstract fun foo(): kotlin.Int
      FUN public open fun quux(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=quux
            CONST Int type=kotlin.Int value='100'
    CLASS CLASS OneImpl
      CONSTRUCTOR public constructor OneImpl()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=OneImpl
      FUN public open override /*1*/ fun foo(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CONST Int type=kotlin.Int value='1'
    CLASS CLASS TwoImpl
      CONSTRUCTOR public constructor TwoImpl()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=TwoImpl
      FUN public open override /*1*/ fun foo(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CONST Int type=kotlin.Int value='2'
    CLASS CLASS Test2
      CONSTRUCTOR public constructor Test2(/*0*/ a: One, /*1*/ b: Two)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Test2
      PROPERTY val `Test2$Two$delegate`: Two
        EXPRESSION_BODY
          GET_VAR b type=Two operator=null
      FUN public open override /*1*/ /*delegation*/ fun quux(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=quux
            CALL .quux type=kotlin.Int operator=null
              $this: GET_VAR Test2$Two$delegate type=Two operator=null
      PROPERTY val `Test2$One$delegate`: One
        EXPRESSION_BODY
          GET_VAR a type=One operator=null
      FUN public open override /*1*/ /*delegation*/ fun faz(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=faz
            CALL .faz type=kotlin.Int operator=null
              $this: GET_VAR Test2$One$delegate type=One operator=null
      FUN public open override /*2*/ fun foo(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CONST Int type=kotlin.Int value='0'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var t2: Test2
          CALL .<init> type=Test2 operator=null
            a: CALL .<init> type=OneImpl operator=null
            b: CALL .<init> type=TwoImpl operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .foo type=kotlin.Int operator=null
                $this: GET_VAR t2 type=Test2 operator=null
              arg1: CONST Int type=kotlin.Int value='0'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail #1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .faz type=kotlin.Int operator=null
                $this: GET_VAR t2 type=Test2 operator=null
              arg1: CONST Int type=kotlin.Int value='10'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail #2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .quux type=kotlin.Int operator=null
                $this: GET_VAR t2 type=Test2 operator=null
              arg1: CONST Int type=kotlin.Int value='100'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail #3'
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=One
            GET_VAR t2 type=Test2 operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail #4'
        WHEN type=kotlin.Unit operator=IF
          if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=Two
            GET_VAR t2 type=Test2 operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail #5'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
