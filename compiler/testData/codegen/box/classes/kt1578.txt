MODULE <test-module>
  FILE /kt1578.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var i: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        CALL .invoke type=kotlin.Int operator=null
          $this: BLOCK type=() -> kotlin.Int operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Int
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  BLOCK type=kotlin.Int operator=POSTFIX_INCR
                    VAR val tmp0: kotlin.Int
                      GET_VAR i type=kotlin.Int operator=POSTFIX_INCR
                    SET_VAR i type=kotlin.Unit operator=POSTFIX_INCR
                      CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                        $this: GET_VAR tmp0 type=kotlin.Int operator=null
                    GET_VAR tmp0 type=kotlin.Int operator=null
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Int operator=LAMBDA
        BLOCK type=kotlin.Int operator=POSTFIX_INCR
          VAR val tmp0: kotlin.Int
            GET_VAR i type=kotlin.Int operator=POSTFIX_INCR
          SET_VAR i type=kotlin.Unit operator=POSTFIX_INCR
            CALL .inc type=kotlin.Int operator=POSTFIX_INCR
              $this: GET_VAR tmp0 type=kotlin.Int operator=null
          GET_VAR tmp0 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR i type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='2'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
