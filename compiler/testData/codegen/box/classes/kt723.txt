MODULE <test-module>
  FILE /kt723.kt
    FUN public operator fun kotlin.Int?.inc(): kotlin.Int
      BLOCK_BODY
        WHEN type=kotlin.Nothing operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: $RECEIVER of: inc type=kotlin.Int?
              arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=inc
            CALL .inc type=kotlin.Int operator=null
              $this: $RECEIVER of: inc type=kotlin.Int?
          else: THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.NullPointerException operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var i: kotlin.Int?
          CONST Int type=kotlin.Int value='10'
        VAR val j: kotlin.Int?
          BLOCK type=kotlin.Int? operator=POSTFIX_INCR
            VAR val tmp0: kotlin.Int?
              GET_VAR i type=kotlin.Int? operator=POSTFIX_INCR
            SET_VAR i type=kotlin.Unit operator=POSTFIX_INCR
              CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                $receiver: GET_VAR tmp0 type=kotlin.Int? operator=null
            GET_VAR tmp0 type=kotlin.Int? operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: WHEN type=kotlin.Boolean operator=ANDAND
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR j type=kotlin.Int? operator=null
                arg1: CONST Int type=kotlin.Int value='10'
              then: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: CONST Int type=kotlin.Int value='11'
                arg1: GET_VAR i type=kotlin.Int? operator=null
              else: CONST Boolean type=kotlin.Boolean value='false'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
