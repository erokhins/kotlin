MODULE <test-module>
  FILE /properSuperLinking.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ s: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD s type=kotlin.Unit operator=null
            receiver: THIS public open class A type=A
            value: GET_VAR s type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final val s: kotlin.String
        EXPRESSION_BODY
          GET_VAR s type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val z: kotlin.String
        EXPRESSION_BODY
          CALL .<get-s> type=kotlin.String operator=GET_PROPERTY
            $this: THIS public open class A type=A
      FUN public final fun test(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=test
            CALL .<get-s> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public open class A type=A
      CLASS CLASS B
        CONSTRUCTOR public constructor B(/*0*/ s: kotlin.String)
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL A
              s: GET_VAR s type=kotlin.String operator=null
            INSTANCE_INITIALIZER_CALL classDescriptor=B
        FUN public final fun testB(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=testB
              CALL .plus type=kotlin.String operator=PLUS
                $this: CALL .<get-z> type=kotlin.String operator=GET_PROPERTY
                  $this: THIS public open inner class B : A type=A.B
                other: CALL .test type=kotlin.String operator=null
                  $this: THIS public open inner class B : A type=A.B
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val res: kotlin.String
          CALL .testB type=kotlin.String operator=null
            $this: CALL .<init> type=A.B operator=null
              $this: CALL .<init> type=A operator=null
                s: CONST String type=kotlin.String value='Fail'
              s: CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR res type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='OKOK'
            then: CONST String type=kotlin.String value='OK'
            else: GET_VAR res type=kotlin.String operator=null
