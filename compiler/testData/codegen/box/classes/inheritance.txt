MODULE <test-module>
  FILE /inheritance.kt
    CLASS CLASS X
      CONSTRUCTOR public constructor X(/*0*/ x: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD x type=kotlin.Unit operator=null
            receiver: THIS public open class X type=X
            value: GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=X
      PROPERTY public final val x: kotlin.Int
        EXPRESSION_BODY
          GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS INTERFACE Y
      PROPERTY public abstract val y: kotlin.Int
    CLASS CLASS YImpl
      CONSTRUCTOR public constructor YImpl(/*0*/ y: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD y type=kotlin.Unit operator=null
            receiver: THIS public final class YImpl : Y type=YImpl
            value: GET_VAR y type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=YImpl
      PROPERTY public open override /*1*/ val y: kotlin.Int
        EXPRESSION_BODY
          GET_VAR y type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS CLASS Point
      CONSTRUCTOR public constructor Point(/*0*/ x: kotlin.Int, /*1*/ yy: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL X
            x: GET_VAR x type=kotlin.Int operator=null
          INSTANCE_INITIALIZER_CALL classDescriptor=Point
      PROPERTY public open override /*1*/ val y: kotlin.Int
        EXPRESSION_BODY
          GET_VAR yy type=kotlin.Int operator=null
    CLASS INTERFACE Abstract
    CLASS CLASS P1
      CONSTRUCTOR public constructor P1(/*0*/ x: kotlin.Int, /*1*/ yy: Y)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL X
            x: GET_VAR x type=kotlin.Int operator=null
          INSTANCE_INITIALIZER_CALL classDescriptor=P1
      PROPERTY val `P1$Y$delegate`: Y
        EXPRESSION_BODY
          GET_VAR yy type=Y operator=null
      PROPERTY public open override /*1*/ /*delegation*/ val y: kotlin.Int
        PROPERTY_GETTER public open override /*1*/ /*delegation*/ fun <get-y>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-y>
              CALL .<get-y> type=kotlin.Int operator=null
                $this: GET_VAR P1$Y$delegate type=Y operator=null
    CLASS CLASS P2
      CONSTRUCTOR public constructor P2(/*0*/ x: kotlin.Int, /*1*/ yy: Y)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL X
            x: GET_VAR x type=kotlin.Int operator=null
          INSTANCE_INITIALIZER_CALL classDescriptor=P2
      PROPERTY val `P2$Y$delegate`: Y
        EXPRESSION_BODY
          GET_VAR yy type=Y operator=null
      PROPERTY public open override /*1*/ /*delegation*/ val y: kotlin.Int
        PROPERTY_GETTER public open override /*1*/ /*delegation*/ fun <get-y>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-y>
              CALL .<get-y> type=kotlin.Int operator=null
                $this: GET_VAR P2$Y$delegate type=Y operator=null
    CLASS CLASS P3
      CONSTRUCTOR public constructor P3(/*0*/ x: kotlin.Int, /*1*/ yy: Y)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL X
            x: GET_VAR x type=kotlin.Int operator=null
          INSTANCE_INITIALIZER_CALL classDescriptor=P3
      PROPERTY val `P3$Y$delegate`: Y
        EXPRESSION_BODY
          GET_VAR yy type=Y operator=null
      PROPERTY public open override /*1*/ /*delegation*/ val y: kotlin.Int
        PROPERTY_GETTER public open override /*1*/ /*delegation*/ fun <get-y>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-y>
              CALL .<get-y> type=kotlin.Int operator=null
                $this: GET_VAR P3$Y$delegate type=Y operator=null
    CLASS CLASS P4
      CONSTRUCTOR public constructor P4(/*0*/ x: kotlin.Int, /*1*/ yy: Y)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL X
            x: GET_VAR x type=kotlin.Int operator=null
          INSTANCE_INITIALIZER_CALL classDescriptor=P4
      PROPERTY val `P4$Y$delegate`: Y
        EXPRESSION_BODY
          GET_VAR yy type=Y operator=null
      PROPERTY public open override /*1*/ /*delegation*/ val y: kotlin.Int
        PROPERTY_GETTER public open override /*1*/ /*delegation*/ fun <get-y>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-y>
              CALL .<get-y> type=kotlin.Int operator=null
                $this: GET_VAR P4$Y$delegate type=Y operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .<init> type=X operator=null
                  x: CONST Int type=kotlin.Int value='239'
              arg1: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='FAIL #1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-y> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .<init> type=YImpl operator=null
                  y: CONST Int type=kotlin.Int value='239'
              arg1: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='FAIL #2'
        VAR val p: Point
          CALL .<init> type=Point operator=null
            x: CONST Int type=kotlin.Int value='240'
            yy: CONST Int type=kotlin.Int value='-1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .plus type=kotlin.Int operator=PLUS
                $this: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR p type=Point operator=null
                other: CALL .<get-y> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR p type=Point operator=null
              arg1: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='FAIL #3'
        VAR val y: YImpl
          CALL .<init> type=YImpl operator=null
            y: CONST Int type=kotlin.Int value='-1'
        VAR val p1: P1
          CALL .<init> type=P1 operator=null
            x: CONST Int type=kotlin.Int value='240'
            yy: GET_VAR y type=YImpl operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .plus type=kotlin.Int operator=PLUS
                $this: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR p1 type=P1 operator=null
                other: CALL .<get-y> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR p1 type=P1 operator=null
              arg1: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='FAIL #4'
        VAR val p2: P2
          CALL .<init> type=P2 operator=null
            x: CONST Int type=kotlin.Int value='240'
            yy: GET_VAR y type=YImpl operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .plus type=kotlin.Int operator=PLUS
                $this: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR p2 type=P2 operator=null
                other: CALL .<get-y> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR p2 type=P2 operator=null
              arg1: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='FAIL #5'
        VAR val p3: P3
          CALL .<init> type=P3 operator=null
            x: CONST Int type=kotlin.Int value='240'
            yy: GET_VAR y type=YImpl operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .plus type=kotlin.Int operator=PLUS
                $this: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR p3 type=P3 operator=null
                other: CALL .<get-y> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR p3 type=P3 operator=null
              arg1: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='FAIL #6'
        VAR val p4: P4
          CALL .<init> type=P4 operator=null
            x: CONST Int type=kotlin.Int value='240'
            yy: GET_VAR y type=YImpl operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .plus type=kotlin.Int operator=PLUS
                $this: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR p4 type=P4 operator=null
                other: CALL .<get-y> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR p4 type=P4 operator=null
              arg1: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='FAIL #7'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
