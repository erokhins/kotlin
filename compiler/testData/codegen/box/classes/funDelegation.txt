MODULE <test-module>
  FILE /funDelegation.kt
    CLASS CLASS Base
      CONSTRUCTOR public constructor Base()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Base
      FUN public final fun n(/*0*/ n: kotlin.Int): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=n
            CALL .plus type=kotlin.Int operator=PLUS
              $this: GET_VAR n type=kotlin.Int operator=null
              other: CONST Int type=kotlin.Int value='1'
    CLASS INTERFACE Abstract
    CLASS CLASS Derived1
      CONSTRUCTOR public constructor Derived1()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Base
          INSTANCE_INITIALIZER_CALL classDescriptor=Derived1
    CLASS CLASS Derived2
      CONSTRUCTOR public constructor Derived2()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Base
          INSTANCE_INITIALIZER_CALL classDescriptor=Derived2
    FUN public fun test(/*0*/ s: Base): kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=test
          CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .n type=kotlin.Int operator=null
              $this: GET_VAR s type=Base operator=null
              n: CONST Int type=kotlin.Int value='238'
            arg1: CONST Int type=kotlin.Int value='239'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .test type=kotlin.Boolean operator=null
              s: CALL .<init> type=Base operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail #1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .test type=kotlin.Boolean operator=null
              s: CALL .<init> type=Derived1 operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail #2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .test type=kotlin.Boolean operator=null
              s: CALL .<init> type=Derived2 operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail #3'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
