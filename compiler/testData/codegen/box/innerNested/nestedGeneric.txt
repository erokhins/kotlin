MODULE <test-module>
  FILE /nestedGeneric.kt
    CLASS CLASS Outer
      CONSTRUCTOR public constructor Outer()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Outer
      CLASS CLASS Nested
        CONSTRUCTOR public constructor Nested</*0*/ T>(/*0*/ t: T)
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            SET_BACKING_FIELD t type=kotlin.Unit operator=null
              receiver: THIS public final class Nested</*0*/ T> type=Outer.Nested<T>
              value: GET_VAR t type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
            INSTANCE_INITIALIZER_CALL classDescriptor=Nested
        PROPERTY public final val t: T
          EXPRESSION_BODY
            GET_VAR t type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
        FUN public final fun box(): T
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=box
              CALL .<get-t> type=T operator=GET_PROPERTY
                $this: THIS public final class Nested</*0*/ T> type=Outer.Nested<T>
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .box type=kotlin.String operator=null
                $this: CALL .<init> type=Outer.Nested<kotlin.String> operator=null
                  t: CONST String type=kotlin.String value='OK'
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail'
        VAR val x: Outer.Nested<kotlin.String>
          CALL .<init> type=Outer.Nested<kotlin.String> operator=null
            t: CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from=box
          CALL .box type=kotlin.String operator=null
            $this: GET_VAR x type=Outer.Nested<kotlin.String> operator=null
