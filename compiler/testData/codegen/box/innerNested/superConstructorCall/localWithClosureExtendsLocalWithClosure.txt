MODULE <test-module>
  FILE /localWithClosureExtendsLocalWithClosure.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val three: kotlin.Int = 3
          CONST Int type=kotlin.Int value='3'
        CLASS CLASS Local
          CONSTRUCTOR public constructor Local(/*0*/ one: kotlin.Int)
            BLOCK_BODY
              DELEGATING_CONSTRUCTOR_CALL Any
              SET_BACKING_FIELD one type=kotlin.Unit operator=null
                receiver: THIS local open class Local type=box.Local
                value: GET_VAR one type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
              INSTANCE_INITIALIZER_CALL classDescriptor=Local
          PROPERTY public final val one: kotlin.Int
            EXPRESSION_BODY
              GET_VAR one type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          FUN public open fun value(): kotlin.String
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=value
                STRING_CONCATENATION type=kotlin.String
                  GET_VAR three type=kotlin.Int operator=null
                  CALL .<get-one> type=kotlin.Int operator=GET_PROPERTY
                    $this: THIS local open class Local type=box.Local
        VAR val four: kotlin.Int = 4
          CONST Int type=kotlin.Int value='4'
        CLASS CLASS Derived
          CONSTRUCTOR public constructor Derived(/*0*/ two: kotlin.Int)
            BLOCK_BODY
              DELEGATING_CONSTRUCTOR_CALL Local
                one: CONST Int type=kotlin.Int value='1'
              SET_BACKING_FIELD two type=kotlin.Unit operator=null
                receiver: THIS local final class Derived : box.Local type=box.Derived
                value: GET_VAR two type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
              INSTANCE_INITIALIZER_CALL classDescriptor=Derived
          PROPERTY public final val two: kotlin.Int
            EXPRESSION_BODY
              GET_VAR two type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          FUN public open override /*1*/ fun value(): kotlin.String
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=value
                CALL .plus type=kotlin.String operator=PLUS
                  $this: CALL .value superQualifier=Local type=kotlin.String operator=null
                    $this: THIS local final class Derived : box.Local type=box.Local
                  other: STRING_CONCATENATION type=kotlin.String
                    GET_VAR four type=kotlin.Int operator=null
                    CALL .<get-two> type=kotlin.Int operator=GET_PROPERTY
                      $this: THIS local final class Derived : box.Local type=box.Derived
        VAR val result: kotlin.String
          CALL .value type=kotlin.String operator=null
            $this: CALL .<init> type=box.Derived operator=null
              two: CONST Int type=kotlin.Int value='2'
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR result type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='3142'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail: '
              GET_VAR result type=kotlin.String operator=null
