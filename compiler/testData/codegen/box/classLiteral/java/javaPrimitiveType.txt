MODULE <test-module>
  FILE /javaPrimitiveType.kt
    FUN public fun check(/*0*/ clazz: java.lang.Class<*>?, /*1*/ expected: kotlin.String): kotlin.Unit
      BLOCK_BODY
        CALL .assert type=kotlin.Unit operator=null
          value: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .<get-canonicalName> type=kotlin.String! operator=GET_PROPERTY
              $receiver: BLOCK type=java.lang.Class<*> operator=EXCLEXCL
                VAR val tmp0_notnull: java.lang.Class<*>?
                  GET_VAR clazz type=java.lang.Class<*>? operator=null
                WHEN type=java.lang.Class<*> operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp0_notnull type=java.lang.Class<*>? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                  else: GET_VAR tmp0_notnull type=java.lang.Class<*>? operator=null
            arg1: GET_VAR expected type=kotlin.String operator=null
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='clazz name: '
                    CALL .<get-canonicalName> type=kotlin.String! operator=GET_PROPERTY
                      $receiver: GET_VAR clazz type=java.lang.Class<*>? operator=null
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
    FUN public fun check(/*0*/ kClass: kotlin.reflect.KClass<*>, /*1*/ expected: kotlin.String): kotlin.Unit
      BLOCK_BODY
        CALL .check type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<out kotlin.Any>? operator=GET_PROPERTY
            $receiver: GET_VAR kClass type=kotlin.reflect.KClass<*> operator=null
          expected: GET_VAR expected type=kotlin.String operator=null
    FUN public fun checkNull(/*0*/ clazz: java.lang.Class<*>?): kotlin.Unit
      BLOCK_BODY
        CALL .assert type=kotlin.Unit operator=null
          value: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR clazz type=java.lang.Class<*>? operator=null
            arg1: CONST Null type=kotlin.Nothing? value='null'
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='clazz should be null: '
                    CALL .<get-canonicalName> type=kotlin.String! operator=GET_PROPERTY
                      $receiver: BLOCK type=java.lang.Class<*> operator=EXCLEXCL
                        VAR val tmp0_notnull: java.lang.Class<*>?
                          GET_VAR clazz type=java.lang.Class<*>? operator=null
                        WHEN type=java.lang.Class<*> operator=null
                          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR tmp0_notnull type=java.lang.Class<*>? operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                          else: GET_VAR tmp0_notnull type=java.lang.Class<*>? operator=null
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
    FUN public fun checkNull(/*0*/ kClass: kotlin.reflect.KClass<*>): kotlin.Unit
      BLOCK_BODY
        CALL .checkNull type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<out kotlin.Any>? operator=GET_PROPERTY
            $receiver: GET_VAR kClass type=kotlin.reflect.KClass<*> operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .check type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<kotlin.Boolean>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Boolean type=kotlin.reflect.KClass<kotlin.Boolean>
          expected: CONST String type=kotlin.String value='boolean'
        CALL .check type=kotlin.Unit operator=null
          kClass: CLASS_REFERENCE Boolean type=kotlin.reflect.KClass<kotlin.Boolean>
          expected: CONST String type=kotlin.String value='boolean'
        CALL .check type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<kotlin.Char>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Char type=kotlin.reflect.KClass<kotlin.Char>
          expected: CONST String type=kotlin.String value='char'
        CALL .check type=kotlin.Unit operator=null
          kClass: CLASS_REFERENCE Char type=kotlin.reflect.KClass<kotlin.Char>
          expected: CONST String type=kotlin.String value='char'
        CALL .check type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<kotlin.Byte>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Byte type=kotlin.reflect.KClass<kotlin.Byte>
          expected: CONST String type=kotlin.String value='byte'
        CALL .check type=kotlin.Unit operator=null
          kClass: CLASS_REFERENCE Byte type=kotlin.reflect.KClass<kotlin.Byte>
          expected: CONST String type=kotlin.String value='byte'
        CALL .check type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<kotlin.Short>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Short type=kotlin.reflect.KClass<kotlin.Short>
          expected: CONST String type=kotlin.String value='short'
        CALL .check type=kotlin.Unit operator=null
          kClass: CLASS_REFERENCE Short type=kotlin.reflect.KClass<kotlin.Short>
          expected: CONST String type=kotlin.String value='short'
        CALL .check type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<kotlin.Int>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Int type=kotlin.reflect.KClass<kotlin.Int>
          expected: CONST String type=kotlin.String value='int'
        CALL .check type=kotlin.Unit operator=null
          kClass: CLASS_REFERENCE Int type=kotlin.reflect.KClass<kotlin.Int>
          expected: CONST String type=kotlin.String value='int'
        CALL .check type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<kotlin.Float>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Float type=kotlin.reflect.KClass<kotlin.Float>
          expected: CONST String type=kotlin.String value='float'
        CALL .check type=kotlin.Unit operator=null
          kClass: CLASS_REFERENCE Float type=kotlin.reflect.KClass<kotlin.Float>
          expected: CONST String type=kotlin.String value='float'
        CALL .check type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<kotlin.Long>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Long type=kotlin.reflect.KClass<kotlin.Long>
          expected: CONST String type=kotlin.String value='long'
        CALL .check type=kotlin.Unit operator=null
          kClass: CLASS_REFERENCE Long type=kotlin.reflect.KClass<kotlin.Long>
          expected: CONST String type=kotlin.String value='long'
        CALL .check type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<kotlin.Double>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Double type=kotlin.reflect.KClass<kotlin.Double>
          expected: CONST String type=kotlin.String value='double'
        CALL .check type=kotlin.Unit operator=null
          kClass: CLASS_REFERENCE Double type=kotlin.reflect.KClass<kotlin.Double>
          expected: CONST String type=kotlin.String value='double'
        CALL .checkNull type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<kotlin.String>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE String type=kotlin.reflect.KClass<kotlin.String>
        CALL .checkNull type=kotlin.Unit operator=null
          kClass: CLASS_REFERENCE String type=kotlin.reflect.KClass<kotlin.String>
        CALL .checkNull type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<kotlin.Nothing>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Nothing type=kotlin.reflect.KClass<kotlin.Nothing>
        CALL .checkNull type=kotlin.Unit operator=null
          kClass: CLASS_REFERENCE Nothing type=kotlin.reflect.KClass<kotlin.Nothing>
        CALL .checkNull type=kotlin.Unit operator=null
          clazz: CALL .<get-javaPrimitiveType> type=java.lang.Class<java.lang.Void>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Void type=kotlin.reflect.KClass<java.lang.Void>
        CALL .checkNull type=kotlin.Unit operator=null
          kClass: CLASS_REFERENCE Void type=kotlin.reflect.KClass<java.lang.Void>
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
