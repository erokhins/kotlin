MODULE <test-module>
  FILE /defaultParameterValues.kt
    CLASS ANNOTATION_CLASS Ann
      CONSTRUCTOR public constructor Ann(/*0*/ i: kotlin.Int = ..., /*1*/ s: kotlin.String = ..., /*2*/ a: Ann2 = ..., /*3*/ e: MyEnum = ..., /*4*/ c: kotlin.reflect.KClass<*> = ..., /*5*/ ia: kotlin.IntArray = ..., /*6*/ sa: kotlin.Array<kotlin.String> = ...)
        i: EXPRESSION_BODY
          CONST Int type=kotlin.Int value='1'
        s: EXPRESSION_BODY
          CONST String type=kotlin.String value='a'
        a: EXPRESSION_BODY
          CALL .<init> type=Ann2 operator=null
        e: EXPRESSION_BODY
          GET_ENUM_VALUE A type=MyEnum
        c: EXPRESSION_BODY
          CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
        ia: EXPRESSION_BODY
          CALL .intArrayOf type=kotlin.IntArray operator=null
            elements: VARARG type=IntArray varargElementType=Int
              CONST Int type=kotlin.Int value='1'
              CONST Int type=kotlin.Int value='2'
        sa: EXPRESSION_BODY
          CALL .arrayOf type=kotlin.Array<kotlin.String> operator=null
            elements: VARARG type=Array<out String> varargElementType=String
              CONST String type=kotlin.String value='a'
              CONST String type=kotlin.String value='b'
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD i type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR i type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD s type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR s type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD a type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR a type=Ann2 operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD e type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR e type=MyEnum operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD c type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR c type=kotlin.reflect.KClass<*> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD ia type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR ia type=kotlin.IntArray operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD sa type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR sa type=kotlin.Array<kotlin.String> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Ann
      PROPERTY public final val i: kotlin.Int
        EXPRESSION_BODY
          GET_VAR i type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val s: kotlin.String
        EXPRESSION_BODY
          GET_VAR s type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val a: Ann2
        EXPRESSION_BODY
          GET_VAR a type=Ann2 operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val e: MyEnum
        EXPRESSION_BODY
          GET_VAR e type=MyEnum operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val c: kotlin.reflect.KClass<*>
        EXPRESSION_BODY
          GET_VAR c type=kotlin.reflect.KClass<*> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val ia: kotlin.IntArray
        EXPRESSION_BODY
          GET_VAR ia type=kotlin.IntArray operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val sa: kotlin.Array<kotlin.String>
        EXPRESSION_BODY
          GET_VAR sa type=kotlin.Array<kotlin.String> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val ann: Ann!
          CALL .getAnnotation type=Ann! operator=null
            $this: CALL .<get-java> type=java.lang.Class<MyClass> operator=GET_PROPERTY
              $receiver: CLASS_REFERENCE MyClass type=kotlin.reflect.KClass<MyClass>
            p0: CALL .<get-java> type=java.lang.Class<Ann> operator=GET_PROPERTY
              $receiver: CLASS_REFERENCE Ann type=kotlin.reflect.KClass<Ann>
        WHEN type=kotlin.Unit operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR ann type=Ann! operator=null
            arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: cannot find Ann on MyClass}'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter i should be 1, but was '
              CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-s> type=kotlin.String operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
              arg1: CONST String type=kotlin.String value='a'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter s should be '
              CONST String type=kotlin.String value='"'
              CONST String type=kotlin.String value='a'
              CONST String type=kotlin.String value='"'
              CONST String type=kotlin.String value=', but was '
              CALL .<get-s> type=kotlin.String operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        VAR val annSimpleName: kotlin.String!
          CALL .getSimpleName type=kotlin.String! operator=null
            $this: CALL .<get-java> type=java.lang.Class<out Ann2> operator=GET_PROPERTY
              $receiver: CALL .<get-annotationClass> type=kotlin.reflect.KClass<out Ann2> operator=GET_PROPERTY
                $receiver: CALL .<get-a> type=Ann2 operator=GET_PROPERTY
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                    GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR annSimpleName type=kotlin.String! operator=null
              arg1: CONST String type=kotlin.String value='Ann2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter a should be of class Ann2, but was '
              GET_VAR annSimpleName type=kotlin.String! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-e> type=MyEnum operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
              arg1: GET_ENUM_VALUE A type=MyEnum
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter e should be MyEnum.A, but was '
              CALL .<get-e> type=MyEnum operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-java> type=java.lang.Class<out kotlin.Any> operator=GET_PROPERTY
                $receiver: CALL .<get-c> type=kotlin.reflect.KClass<*> operator=GET_PROPERTY
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                    GET_VAR ann type=Ann! operator=null
              arg1: CALL .<get-java> type=java.lang.Class<A> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter c should be of class A, but was '
              CALL .<get-c> type=kotlin.reflect.KClass<*> operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .get type=kotlin.Int operator=GET_ARRAY_ELEMENT
                  $this: CALL .<get-ia> type=kotlin.IntArray operator=GET_PROPERTY
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                      GET_VAR ann type=Ann! operator=null
                  index: CONST Int type=kotlin.Int value='0'
                arg1: CONST Int type=kotlin.Int value='1'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .get type=kotlin.Int operator=GET_ARRAY_ELEMENT
                  $this: CALL .<get-ia> type=kotlin.IntArray operator=GET_PROPERTY
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                      GET_VAR ann type=Ann! operator=null
                  index: CONST Int type=kotlin.Int value='1'
                arg1: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter ia should be [1, 2], but was '
              CALL .<get-ia> type=kotlin.IntArray operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .get type=kotlin.String operator=GET_ARRAY_ELEMENT
                  $this: CALL .<get-sa> type=kotlin.Array<kotlin.String> operator=GET_PROPERTY
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                      GET_VAR ann type=Ann! operator=null
                  index: CONST Int type=kotlin.Int value='0'
                arg1: CONST String type=kotlin.String value='a'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .get type=kotlin.String operator=GET_ARRAY_ELEMENT
                  $this: CALL .<get-sa> type=kotlin.Array<kotlin.String> operator=GET_PROPERTY
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                      GET_VAR ann type=Ann! operator=null
                  index: CONST Int type=kotlin.Int value='1'
                arg1: CONST String type=kotlin.String value='b'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter ia should be ['
              CONST String type=kotlin.String value='"'
              CONST String type=kotlin.String value='a'
              CONST String type=kotlin.String value='"'
              CONST String type=kotlin.String value=', '
              CONST String type=kotlin.String value='"'
              CONST String type=kotlin.String value='b'
              CONST String type=kotlin.String value='"'
              CONST String type=kotlin.String value='], but was '
              CALL .<get-sa> type=kotlin.Array<kotlin.String> operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
    CLASS ANNOTATION_CLASS Ann2
      CONSTRUCTOR public constructor Ann2()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Ann2
    CLASS ENUM_CLASS MyEnum
      CONSTRUCTOR private constructor MyEnum()
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL Enum super
          INSTANCE_INITIALIZER_CALL classDescriptor=MyEnum
      ENUM_ENTRY enum entry A
        init: ENUM_CONSTRUCTOR_CALL MyEnum A
      FUN public final /*synthesized*/ fun values(): kotlin.Array<MyEnum>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): MyEnum
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
    CLASS CLASS MyClass
      CONSTRUCTOR public constructor MyClass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=MyClass
