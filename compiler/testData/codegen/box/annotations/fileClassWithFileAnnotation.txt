MODULE <test-module>
  FILE /fileClassWithFileAnnotation.kt
    CLASS ANNOTATION_CLASS StringHolder
      CONSTRUCTOR public constructor StringHolder(/*0*/ value: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD value type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Target(allowedTargets = {AnnotationTarget.FILE}) @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class StringHolder : kotlin.Annotation type=StringHolder
            value: GET_VAR value type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=StringHolder
      PROPERTY public final val value: kotlin.String
        EXPRESSION_BODY
          GET_VAR value type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          BLOCK type=kotlin.String operator=ELVIS
            VAR val tmp1_elvis_lhs: kotlin.String?
              BLOCK type=kotlin.String? operator=SAFE_CALL
                VAR val tmp0_safe_receiver: StringHolder!
                  CALL .getAnnotation type=StringHolder! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
                      CALL .forName type=java.lang.Class<*>! operator=null
                        p0: CONST String type=kotlin.String value='FileClass'
                    p0: CALL .<get-java> type=java.lang.Class<StringHolder> operator=GET_PROPERTY
                      $receiver: CLASS_REFERENCE StringHolder type=kotlin.reflect.KClass<StringHolder>
                WHEN type=kotlin.String? operator=SAFE_CALL
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp0_safe_receiver type=StringHolder! operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Null type=kotlin.Nothing? value='null'
                  else: CALL .<get-value> type=kotlin.String operator=GET_PROPERTY
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=StringHolder
                      GET_VAR tmp0_safe_receiver type=StringHolder! operator=null
            WHEN type=kotlin.String operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp1_elvis_lhs type=kotlin.String? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CONST String type=kotlin.String value='null'
              else: GET_VAR tmp1_elvis_lhs type=kotlin.String? operator=null
