MODULE <test-module>
  FILE /resolveWithLowPriorityAnnotation.kt
    FUN @kotlin.Suppress(names = {"INVISIBLE_MEMBER", "INVISIBLE_REFERENCE"}) @kotlin.internal.LowPriorityInOverloadResolution() public fun foo(/*0*/ i: kotlin.Int): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CONST Int type=kotlin.Int value='1'
    FUN public fun foo(/*0*/ a: kotlin.Any): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CONST Int type=kotlin.Int value='2'
    FUN @kotlin.Suppress(names = {"INVISIBLE_MEMBER", "INVISIBLE_REFERENCE"}) @kotlin.internal.LowPriorityInOverloadResolution() public fun bar(/*0*/ a: kotlin.String?): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=bar
          CONST Int type=kotlin.Int value='3'
    FUN public fun bar(/*0*/ a: kotlin.Any): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=bar
          CONST Int type=kotlin.Int value='4'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .foo type=kotlin.Int operator=null
                a: CONST Int type=kotlin.Int value='1'
              arg1: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .bar type=kotlin.Int operator=null
                a: CONST Null type=kotlin.Nothing? value='null'
              arg1: CONST Int type=kotlin.Int value='3'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail2'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
