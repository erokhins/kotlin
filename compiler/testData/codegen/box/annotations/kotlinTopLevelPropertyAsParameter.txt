MODULE <test-module>
  FILE /kotlinTopLevelPropertyAsParameter.kt
    CLASS CLASS MyClass
      CONSTRUCTOR public constructor MyClass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=MyClass
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val ann: Ann!
          CALL .getAnnotation type=Ann! operator=null
            $this: CALL .<get-java> type=java.lang.Class<MyClass> operator=GET_PROPERTY
              $receiver: CLASS_REFERENCE MyClass type=kotlin.reflect.KClass<MyClass>
            p0: CALL .<get-java> type=java.lang.Class<Ann> operator=GET_PROPERTY
              $receiver: CLASS_REFERENCE Ann type=kotlin.reflect.KClass<Ann>
        WHEN type=kotlin.Unit operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR ann type=Ann! operator=null
            arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: cannot find Ann on MyClass}'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
              arg1: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter i should be 2, but was '
              CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-s> type=kotlin.Short operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
              arg1: CALL .toShort type=kotlin.Short operator=null
                $this: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter i should be 2, but was '
              CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-f> type=kotlin.Float operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
              arg1: CALL .toFloat type=kotlin.Float operator=null
                $this: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter i should be 2, but was '
              CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-d> type=kotlin.Double operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
              arg1: CALL .toDouble type=kotlin.Double operator=null
                $this: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter i should be 2, but was '
              CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-l> type=kotlin.Long operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
              arg1: CALL .toLong type=kotlin.Long operator=null
                $this: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter i should be 2, but was '
              CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-b> type=kotlin.Byte operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
              arg1: CALL .toByte type=kotlin.Byte operator=null
                $this: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter i should be 2, but was '
              CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .<get-bool> type=kotlin.Boolean operator=GET_PROPERTY
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                GET_VAR ann type=Ann! operator=null
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter i should be true, but was '
              CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-c> type=kotlin.Char operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
              arg1: CONST Char type=kotlin.Char value='c'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter i should be c, but was '
              CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-str> type=kotlin.String operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
              arg1: CONST String type=kotlin.String value='str'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: annotation parameter i should be str, but was '
              CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                  GET_VAR ann type=Ann! operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
    CLASS ANNOTATION_CLASS Ann
      CONSTRUCTOR public constructor Ann(/*0*/ i: kotlin.Int, /*1*/ s: kotlin.Short, /*2*/ f: kotlin.Float, /*3*/ d: kotlin.Double, /*4*/ l: kotlin.Long, /*5*/ b: kotlin.Byte, /*6*/ bool: kotlin.Boolean, /*7*/ c: kotlin.Char, /*8*/ str: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD i type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR i type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD s type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR s type=kotlin.Short operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD f type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR f type=kotlin.Float operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD d type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR d type=kotlin.Double operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD l type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR l type=kotlin.Long operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD b type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR b type=kotlin.Byte operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD bool type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR bool type=kotlin.Boolean operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD c type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR c type=kotlin.Char operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD str type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR str type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Ann
      PROPERTY public final val i: kotlin.Int
        EXPRESSION_BODY
          GET_VAR i type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val s: kotlin.Short
        EXPRESSION_BODY
          GET_VAR s type=kotlin.Short operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val f: kotlin.Float
        EXPRESSION_BODY
          GET_VAR f type=kotlin.Float operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val d: kotlin.Double
        EXPRESSION_BODY
          GET_VAR d type=kotlin.Double operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val l: kotlin.Long
        EXPRESSION_BODY
          GET_VAR l type=kotlin.Long operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val b: kotlin.Byte
        EXPRESSION_BODY
          GET_VAR b type=kotlin.Byte operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val bool: kotlin.Boolean
        EXPRESSION_BODY
          GET_VAR bool type=kotlin.Boolean operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val c: kotlin.Char
        EXPRESSION_BODY
          GET_VAR c type=kotlin.Char operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val str: kotlin.String
        EXPRESSION_BODY
          GET_VAR str type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    PROPERTY public const val i: kotlin.Int = 2
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='2'
    PROPERTY public const val s: kotlin.Short = 2.toShort()
      EXPRESSION_BODY
        CONST Short type=kotlin.Short value='2'
    PROPERTY public const val f: kotlin.Float = 2.0.toFloat()
      EXPRESSION_BODY
        CALL .toFloat type=kotlin.Float operator=null
          $this: CONST Double type=kotlin.Double value='2.0'
    PROPERTY public const val d: kotlin.Double = 2.0.toDouble()
      EXPRESSION_BODY
        CONST Double type=kotlin.Double value='2.0'
    PROPERTY public const val l: kotlin.Long = 2.toLong()
      EXPRESSION_BODY
        CONST Long type=kotlin.Long value='2'
    PROPERTY public const val b: kotlin.Byte = 2.toByte()
      EXPRESSION_BODY
        CONST Byte type=kotlin.Byte value='2'
    PROPERTY public const val bool: kotlin.Boolean = true
      EXPRESSION_BODY
        CONST Boolean type=kotlin.Boolean value='true'
    PROPERTY public const val c: kotlin.Char = \u0063 ('c')
      EXPRESSION_BODY
        CONST Char type=kotlin.Char value='c'
    PROPERTY public const val str: kotlin.String = "str"
      EXPRESSION_BODY
        CONST String type=kotlin.String value='str'
