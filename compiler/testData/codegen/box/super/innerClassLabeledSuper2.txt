MODULE <test-module>
  FILE /innerClassLabeledSuper2.kt
    CLASS INTERFACE BK
      FUN public abstract fun foo(): kotlin.String
      FUN public abstract fun bar(): kotlin.String
    CLASS INTERFACE KTrait
      FUN public open override /*1*/ fun foo(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CALL .bar type=kotlin.String operator=null
              $this: THIS public interface KTrait : BK type=KTrait
    CLASS CLASS K
      CONSTRUCTOR public constructor K()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=K
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL K
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      FUN public open override /*1*/ fun foo(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CONST String type=kotlin.String value='A.foo'
      FUN public open override /*1*/ fun bar(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=bar
            CONST String type=kotlin.String value='A.bar'
      CLASS CLASS B
        CONSTRUCTOR public constructor B()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL K
            INSTANCE_INITIALIZER_CALL classDescriptor=B
        FUN public open override /*1*/ fun foo(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=foo
              CONST String type=kotlin.String value='B.foo'
        FUN public open override /*1*/ fun bar(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=bar
              CONST String type=kotlin.String value='B.bar'
        FUN public final fun test1(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=test1
              CALL .foo superQualifier=K type=kotlin.String operator=null
                $this: THIS public final class A : K type=K
        FUN public final fun test2(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=test2
              CALL .foo superQualifier=K type=kotlin.String operator=null
                $this: THIS public final inner class B : K type=K
        FUN public final fun test3(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=test3
              CALL .foo superQualifier=K type=kotlin.String operator=null
                $this: THIS public final inner class B : K type=K
        FUN public final fun test4(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=test4
              CALL .foo superQualifier=K type=kotlin.String operator=null
                $this: THIS public final class A : K type=K
        FUN public final fun test5(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=test5
              CALL .foo superQualifier=K type=kotlin.String operator=null
                $this: THIS public final inner class B : K type=K
        FUN public final fun test6(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=test6
              CALL .foo superQualifier=K type=kotlin.String operator=null
                $this: THIS public final inner class B : K type=K
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val b: A.B
          CALL .<init> type=A.B operator=null
            $this: CALL .<init> type=A operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test1 type=kotlin.String operator=null
                $this: GET_VAR b type=A.B operator=null
              arg1: CONST String type=kotlin.String value='A.bar'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='test1 '
              CALL .test1 type=kotlin.String operator=null
                $this: GET_VAR b type=A.B operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test2 type=kotlin.String operator=null
                $this: GET_VAR b type=A.B operator=null
              arg1: CONST String type=kotlin.String value='B.bar'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='test2 '
              CALL .test2 type=kotlin.String operator=null
                $this: GET_VAR b type=A.B operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test3 type=kotlin.String operator=null
                $this: GET_VAR b type=A.B operator=null
              arg1: CONST String type=kotlin.String value='B.bar'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='test3 '
              CALL .test3 type=kotlin.String operator=null
                $this: GET_VAR b type=A.B operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test4 type=kotlin.String operator=null
                $this: GET_VAR b type=A.B operator=null
              arg1: CONST String type=kotlin.String value='A.bar'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='test4 '
              CALL .test4 type=kotlin.String operator=null
                $this: GET_VAR b type=A.B operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test5 type=kotlin.String operator=null
                $this: GET_VAR b type=A.B operator=null
              arg1: CONST String type=kotlin.String value='B.bar'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='test5 '
              CALL .test5 type=kotlin.String operator=null
                $this: GET_VAR b type=A.B operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test6 type=kotlin.String operator=null
                $this: GET_VAR b type=A.B operator=null
              arg1: CONST String type=kotlin.String value='B.bar'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='test6 '
              CALL .test6 type=kotlin.String operator=null
                $this: GET_VAR b type=A.B operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
