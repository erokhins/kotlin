MODULE <test-module>
  FILE /kt4173_2.kt
    CLASS CLASS X
      CONSTRUCTOR public constructor X(/*0*/ s: () -> kotlin.Unit)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD s type=kotlin.Unit operator=null
            receiver: THIS public open class X type=X
            value: GET_VAR s type=() -> kotlin.Unit operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=X
      PROPERTY public final var s: () -> kotlin.Unit
        EXPRESSION_BODY
          GET_VAR s type=() -> kotlin.Unit operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS CLASS C
      CONSTRUCTOR public constructor C(/*0*/ f: X)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD f type=kotlin.Unit operator=null
            receiver: THIS public open class C type=C
            value: GET_VAR f type=X operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      PROPERTY public final val f: X
        EXPRESSION_BODY
          GET_VAR f type=X operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun test(): kotlin.Unit
        BLOCK_BODY
          CALL .invoke type=kotlin.Unit operator=INVOKE
            $this: CALL .<get-s> type=() -> kotlin.Unit operator=GET_PROPERTY
              $this: CALL .<get-f> type=X operator=GET_PROPERTY
                $this: THIS public open class C type=C
    CLASS CLASS B
      CONSTRUCTOR public constructor B(/*0*/ x: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD x type=kotlin.Unit operator=null
            receiver: THIS public final class B type=B
            value: GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      PROPERTY public final var x: kotlin.Int
        EXPRESSION_BODY
          GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun foo(): kotlin.Unit
        BLOCK_BODY
          CALL .test type=kotlin.Unit operator=null
            $this: BLOCK type=B.foo.<no name provided> operator=OBJECT_LITERAL
              CLASS CLASS <no name provided>
                CONSTRUCTOR public constructor <no name provided>()
                  BLOCK_BODY
                    DELEGATING_CONSTRUCTOR_CALL C
                      f: BLOCK type=B.foo.<no name provided>.<init>.<no name provided> operator=OBJECT_LITERAL
                        CLASS CLASS <no name provided>
                          CONSTRUCTOR public constructor <no name provided>()
                            BLOCK_BODY
                              DELEGATING_CONSTRUCTOR_CALL X
                                s: BLOCK type=() -> kotlin.Unit operator=LAMBDA
                                  FUN local final fun <anonymous>(): kotlin.Unit
                                    BLOCK_BODY
                                      RETURN type=kotlin.Nothing from=<anonymous>
                                        CALL .<set-x> type=kotlin.Unit operator=EQ
                                          $this: THIS public final class B type=B
                                          <set-?>: CONST Int type=kotlin.Int value='3'
                                  CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
                              INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
                        CALL .<init> type=B.foo.<no name provided>.<init>.<no name provided> operator=OBJECT_LITERAL
                    INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
              CALL .<init> type=B.foo.<no name provided> operator=OBJECT_LITERAL
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val b: B
          CALL .<init> type=B operator=null
            x: CONST Int type=kotlin.Int value='1'
        CALL .foo type=kotlin.Unit operator=null
          $this: GET_VAR b type=B operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR b type=B operator=null
                arg1: CONST Int type=kotlin.Int value='3'
            then: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: b.x = '
              CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR b type=B operator=null
            else: CONST String type=kotlin.String value='OK'
