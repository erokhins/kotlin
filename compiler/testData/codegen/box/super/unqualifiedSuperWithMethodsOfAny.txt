MODULE <test-module>
  FILE /unqualifiedSuperWithMethodsOfAny.kt
    CLASS INTERFACE ISomething
    CLASS CLASS ClassWithToString
      CONSTRUCTOR public constructor ClassWithToString()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=ClassWithToString
      FUN public open override /*1*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            CONST String type=kotlin.String value='C'
    CLASS INTERFACE IWithToString
      FUN public abstract override /*1*/ fun toString(): kotlin.String
    CLASS CLASS C1
      CONSTRUCTOR public constructor C1()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL ClassWithToString
          INSTANCE_INITIALIZER_CALL classDescriptor=C1
      FUN public open override /*2*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            CALL .toString superQualifier=ClassWithToString type=kotlin.String operator=null
              $this: THIS public final class C1 : ClassWithToString, ISomething type=ClassWithToString
    CLASS CLASS C2
      CONSTRUCTOR public constructor C2()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL ClassWithToString
          INSTANCE_INITIALIZER_CALL classDescriptor=C2
      FUN public open override /*3*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            CALL .toString superQualifier=ClassWithToString type=kotlin.String operator=null
              $this: THIS public final class C2 : ClassWithToString, IWithToString, ISomething type=ClassWithToString
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=WHEN
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .toString type=kotlin.String operator=null
                  $this: CALL .<init> type=C1 operator=null
                arg1: CONST String type=kotlin.String value='C'
            then: CONST String type=kotlin.String value='Failed #1'
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .toString type=kotlin.String operator=null
                  $this: CALL .<init> type=C2 operator=null
                arg1: CONST String type=kotlin.String value='C'
            then: CONST String type=kotlin.String value='Failed #2'
            else: CONST String type=kotlin.String value='OK'
