MODULE <test-module>
  FILE /innerClassQualifiedPropertyAccess.kt
    CLASS INTERFACE T
      PROPERTY public open val baz: kotlin.String
        PROPERTY_GETTER public open fun <get-baz>(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-baz>
              CONST String type=kotlin.String value='T.baz'
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public open val bar: kotlin.String
        PROPERTY_GETTER public open fun <get-bar>(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-bar>
              CONST String type=kotlin.String value='OK'
      PROPERTY public open val boo: kotlin.String
        PROPERTY_GETTER public open fun <get-boo>(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-boo>
              CONST String type=kotlin.String value='OK'
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL A
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      PROPERTY public open override /*1*/ val bar: kotlin.String
        PROPERTY_GETTER public open override /*1*/ fun <get-bar>(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-bar>
              CONST String type=kotlin.String value='B'
      PROPERTY public open override /*1*/ val baz: kotlin.String
        PROPERTY_GETTER public open override /*1*/ fun <get-baz>(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-baz>
              CONST String type=kotlin.String value='B.baz'
      CLASS CLASS E
        CONSTRUCTOR public constructor E()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=E
        PROPERTY public final val bar: kotlin.String
          PROPERTY_GETTER public final fun <get-bar>(): kotlin.String
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=<get-bar>
                CALL .plus type=kotlin.String operator=PLUS
                  $this: CALL .plus type=kotlin.String operator=PLUS
                    $this: CALL .<get-bar> superQualifier=A type=kotlin.String operator=GET_PROPERTY
                      $this: THIS public open class B : A, T type=A
                    other: CALL .<get-bar> superQualifier=A type=kotlin.String operator=GET_PROPERTY
                      $this: THIS public open class B : A, T type=A
                  other: CALL .<get-baz> superQualifier=T type=kotlin.String operator=GET_PROPERTY
                    $this: THIS public open class B : A, T type=T
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL B
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      PROPERTY public open override /*1*/ val bar: kotlin.String
        PROPERTY_GETTER public open override /*1*/ fun <get-bar>(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-bar>
              CONST String type=kotlin.String value='C'
      PROPERTY public open override /*1*/ val boo: kotlin.String
        PROPERTY_GETTER public open override /*1*/ fun <get-boo>(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-boo>
              CONST String type=kotlin.String value='C'
      CLASS CLASS D
        CONSTRUCTOR public constructor D()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=D
        PROPERTY public final val bar: kotlin.String
          PROPERTY_GETTER public final fun <get-bar>(): kotlin.String
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=<get-bar>
                CALL .plus type=kotlin.String operator=PLUS
                  $this: CALL .<get-bar> superQualifier=B type=kotlin.String operator=GET_PROPERTY
                    $this: THIS public final class C : B type=B
                  other: CALL .<get-boo> superQualifier=B type=kotlin.String operator=GET_PROPERTY
                    $this: THIS public final class C : B type=B
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var r: kotlin.String
          CONST String type=kotlin.String value=''
        SET_VAR r type=kotlin.Unit operator=EQ
          CALL .<get-bar> type=kotlin.String operator=GET_PROPERTY
            $this: CALL .<init> type=B.E operator=null
              $this: CALL .<init> type=B operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR r type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='OKOKT.baz'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 1; r = '
              GET_VAR r type=kotlin.String operator=null
        SET_VAR r type=kotlin.Unit operator=EQ
          CALL .<get-bar> type=kotlin.String operator=GET_PROPERTY
            $this: CALL .<init> type=C.D operator=null
              $this: CALL .<init> type=C operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR r type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='BOK'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 2; r = '
              GET_VAR r type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
