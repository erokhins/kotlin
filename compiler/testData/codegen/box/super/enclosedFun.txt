MODULE <test-module>
  FILE /enclosedFun.kt
    CLASS INTERFACE BK
      FUN public open fun x(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=x
            CONST Int type=kotlin.Int value='50'
    CLASS INTERFACE K
      FUN public open override /*1*/ fun x(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=x
            CALL .times type=kotlin.Int operator=MUL
              $this: CALL .x superQualifier=BK type=kotlin.Int operator=null
                $this: THIS public interface K : BK type=BK
              other: CONST Int type=kotlin.Int value='2'
    CLASS CLASS M
      CONSTRUCTOR public constructor M()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=M
      FUN public open fun x(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=x
            CONST Int type=kotlin.Int value='10'
    CLASS CLASS N
      CONSTRUCTOR public constructor N()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL M
          INSTANCE_INITIALIZER_CALL classDescriptor=N
      FUN public open override /*2*/ fun x(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=x
            CONST Int type=kotlin.Int value='20'
      CLASS CLASS C
        CONSTRUCTOR public constructor C()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=C
        FUN public final fun test1(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=test1
              CALL .x type=kotlin.Int operator=null
                $this: THIS public open inner class C : K type=N.C
        FUN public final fun test2(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=test2
              CALL .x superQualifier=M type=kotlin.Int operator=null
                $this: THIS public open class N : M, K type=M
        FUN public final fun test3(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=test3
              CALL .x superQualifier=K type=kotlin.Int operator=null
                $this: THIS public open class N : M, K type=K
        FUN public final fun test4(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=test4
              CALL .x superQualifier=K type=kotlin.Int operator=null
                $this: THIS public open inner class C : K type=K
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test1 type=kotlin.Int operator=null
                $this: CALL .<init> type=N.C operator=null
                  $this: CALL .<init> type=N operator=null
              arg1: CONST Int type=kotlin.Int value='100'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='test1 fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test2 type=kotlin.Int operator=null
                $this: CALL .<init> type=N.C operator=null
                  $this: CALL .<init> type=N operator=null
              arg1: CONST Int type=kotlin.Int value='10'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='test2 fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test3 type=kotlin.Int operator=null
                $this: CALL .<init> type=N.C operator=null
                  $this: CALL .<init> type=N operator=null
              arg1: CONST Int type=kotlin.Int value='100'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='test3 fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test4 type=kotlin.Int operator=null
                $this: CALL .<init> type=N.C operator=null
                  $this: CALL .<init> type=N operator=null
              arg1: CONST Int type=kotlin.Int value='100'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='test4 fail'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
