MODULE <test-module>
  FILE /ValCapturedInFunctionLiteral.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      FUN public final operator fun component1(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CONST Int type=kotlin.Int value='1'
      FUN public final operator fun component2(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component2
            CONST Int type=kotlin.Int value='2'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=DESTRUCTURING_DECLARATION
          VAR val tmp0_container: A
            CALL .<init> type=A operator=null
          VAR val a: kotlin.Int
            CALL .component1 type=kotlin.Int operator=COMPONENT_N(index=1)
              $this: GET_VAR tmp0_container type=A operator=null
          VAR val b: kotlin.Int
            CALL .component2 type=kotlin.Int operator=COMPONENT_N(index=2)
              $this: GET_VAR tmp0_container type=A operator=null
        VAR val run: () -> kotlin.Int
          BLOCK type=() -> kotlin.Int operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Int
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  GET_VAR a type=kotlin.Int operator=null
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Int operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: WHEN type=kotlin.Boolean operator=ANDAND
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: CALL .invoke type=kotlin.Int operator=INVOKE
                  $this: GET_VAR run type=() -> kotlin.Int operator=VARIABLE_AS_FUNCTION
                arg1: CONST Int type=kotlin.Int value='1'
              then: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR b type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='2'
              else: CONST Boolean type=kotlin.Boolean value='false'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
