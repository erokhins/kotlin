MODULE <test-module>
  FILE /MultiDeclFor.kt
    CLASS CLASS C
      CONSTRUCTOR public constructor C(/*0*/ i: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD i type=kotlin.Unit operator=null
            receiver: THIS public final class C type=C
            value: GET_VAR i type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      PROPERTY public final val i: kotlin.Int
        EXPRESSION_BODY
          GET_VAR i type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator fun component1(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CALL .plus type=kotlin.Int operator=PLUS
              $this: CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: THIS public final class C type=C
              other: CONST Int type=kotlin.Int value='1'
      FUN public final operator fun component2(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component2
            CALL .plus type=kotlin.Int operator=PLUS
              $this: CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
                $this: THIS public final class C type=C
              other: CONST Int type=kotlin.Int value='2'
    FUN public fun doTest(/*0*/ l: java.util.ArrayList<C>): kotlin.String
      BLOCK_BODY
        VAR var s: kotlin.String
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.MutableIterator<C>
            CALL .iterator type=kotlin.collections.MutableIterator<C> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR l type=java.util.ArrayList<C> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<C> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val tmp1_loop_parameter: C
                CALL .next type=C operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<C> operator=null
              VAR val a: kotlin.Int
                CALL .component1 type=kotlin.Int operator=COMPONENT_N(index=1)
                  $this: GET_VAR tmp1_loop_parameter type=C operator=null
              VAR val b: kotlin.Int
                CALL .component2 type=kotlin.Int operator=COMPONENT_N(index=2)
                  $this: GET_VAR tmp1_loop_parameter type=C operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR s type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR s type=kotlin.String operator=PLUSEQ
                    other: STRING_CONCATENATION type=kotlin.String
                      GET_VAR a type=kotlin.Int operator=null
                      CONST String type=kotlin.String value=':'
                      GET_VAR b type=kotlin.Int operator=null
                      CONST String type=kotlin.String value=';'
        RETURN type=kotlin.Nothing from=doTest
          GET_VAR s type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val l: java.util.ArrayList<C>
          CALL .<init> type=java.util.ArrayList<C> operator=null
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR l type=java.util.ArrayList<C> operator=null
          element: CALL .<init> type=C operator=null
            i: CONST Int type=kotlin.Int value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR l type=java.util.ArrayList<C> operator=null
          element: CALL .<init> type=C operator=null
            i: CONST Int type=kotlin.Int value='1'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR l type=java.util.ArrayList<C> operator=null
          element: CALL .<init> type=C operator=null
            i: CONST Int type=kotlin.Int value='2'
        VAR val s: kotlin.String
          CALL .doTest type=kotlin.String operator=null
            l: GET_VAR l type=java.util.ArrayList<C> operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR s type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='1:2;2:3;3:4;'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: '
              GET_VAR s type=kotlin.String operator=null
