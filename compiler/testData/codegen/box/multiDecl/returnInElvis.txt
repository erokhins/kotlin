MODULE <test-module>
  FILE /returnInElvis.kt
    CLASS CLASS Z
      CONSTRUCTOR public constructor Z(/*0*/ p: kotlin.String, /*1*/ k: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD p type=kotlin.Unit operator=null
            receiver: THIS public final data class Z type=Z
            value: GET_VAR p type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD k type=kotlin.Unit operator=null
            receiver: THIS public final data class Z type=Z
            value: GET_VAR k type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Z
      PROPERTY public final val p: kotlin.String
        EXPRESSION_BODY
          GET_VAR p type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val k: kotlin.String
        EXPRESSION_BODY
          GET_VAR k type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator /*synthesized*/ fun component1(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CALL .<get-p> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public final data class Z type=Z
      FUN public final operator /*synthesized*/ fun component2(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component2
            CALL .<get-k> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public final data class Z type=Z
      FUN public final /*synthesized*/ fun copy(/*0*/ p: kotlin.String = ..., /*1*/ k: kotlin.String = ...): Z
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=copy
            CALL .<init> type=Z operator=null
              p: GET_VAR p type=kotlin.String operator=null
              k: GET_VAR k type=kotlin.String operator=null
      FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Z('
              CONST String type=kotlin.String value='p='
              CALL .<get-p> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public final data class Z type=Z
              CONST String type=kotlin.String value=', '
              CONST String type=kotlin.String value='k='
              CALL .<get-k> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public final data class Z type=Z
              CONST String type=kotlin.String value=')'
      FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .hashCode type=kotlin.Int operator=null
              $this: CALL .<get-p> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public final data class Z type=Z
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .plus type=kotlin.Int operator=null
              $this: CALL .times type=kotlin.Int operator=null
                $this: GET_VAR tmp0_result type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='31'
              other: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<get-k> type=kotlin.String operator=GET_PROPERTY
                  $this: THIS public final data class Z type=Z
          RETURN type=kotlin.Nothing from=hashCode
            GET_VAR tmp0_result type=kotlin.Int operator=null
      FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS public final data class Z type=Z
              arg1: GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=Z
              GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: Z
            TYPE_OP operator=CAST typeOperand=Z
              GET_VAR other type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-p> type=kotlin.String operator=GET_PROPERTY
                  $this: THIS public final data class Z type=Z
                arg1: CALL .<get-p> type=kotlin.String operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=Z operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-k> type=kotlin.String operator=GET_PROPERTY
                  $this: THIS public final data class Z type=Z
                arg1: CALL .<get-k> type=kotlin.String operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=Z operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from=equals
            CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun create(/*0*/ p: kotlin.Boolean): Z?
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=create
          WHEN type=Z? operator=IF
            if: GET_VAR p type=kotlin.Boolean operator=null
            then: BLOCK type=Z operator=null
              CALL .<init> type=Z operator=null
                p: CONST String type=kotlin.String value='O'
                k: CONST String type=kotlin.String value='K'
            else: BLOCK type=kotlin.Nothing? operator=null
              CONST Null type=kotlin.Nothing? value='null'
    FUN public fun test(/*0*/ p: kotlin.Boolean): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=DESTRUCTURING_DECLARATION
          VAR val tmp1_container: Z
            BLOCK type=Z operator=ELVIS
              VAR val tmp0_elvis_lhs: Z?
                CALL .create type=Z? operator=null
                  p: GET_VAR p type=kotlin.Boolean operator=null
              WHEN type=Z operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp0_elvis_lhs type=Z? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: RETURN type=kotlin.Nothing from=test
                  CONST String type=kotlin.String value='null'
                else: GET_VAR tmp0_elvis_lhs type=Z? operator=null
          VAR val a: kotlin.String
            CALL .component1 type=kotlin.String operator=COMPONENT_N(index=1)
              $this: GET_VAR tmp1_container type=Z operator=null
          VAR val b: kotlin.String
            CALL .component2 type=kotlin.String operator=COMPONENT_N(index=2)
              $this: GET_VAR tmp1_container type=Z operator=null
        RETURN type=kotlin.Nothing from=test
          CALL .plus type=kotlin.String operator=PLUS
            $this: GET_VAR a type=kotlin.String operator=null
            other: GET_VAR b type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test type=kotlin.String operator=null
                p: CONST Boolean type=kotlin.Boolean value='false'
              arg1: CONST String type=kotlin.String value='null'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 1: '
              CALL .test type=kotlin.String operator=null
                p: CONST Boolean type=kotlin.Boolean value='false'
        RETURN type=kotlin.Nothing from=box
          CALL .test type=kotlin.String operator=null
            p: CONST Boolean type=kotlin.Boolean value='true'
