MODULE <test-module>
  FILE /primitiveMerge.kt
    FUN public fun bar(): kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=bar
          CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun foobar1(/*0*/ x: kotlin.Boolean, /*1*/ y: kotlin.String, /*2*/ z: kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foobar1
          CALL .plus type=kotlin.String operator=PLUS
            $this: CALL .plus type=kotlin.String operator=PLUS
              $this: CALL .toString type=kotlin.String operator=null
                $this: GET_VAR x type=kotlin.Boolean operator=null
              other: GET_VAR y type=kotlin.String operator=null
            other: GET_VAR z type=kotlin.String operator=null
    FUN public fun foobar2(/*0*/ x: kotlin.Any, /*1*/ y: kotlin.String, /*2*/ z: kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foobar2
          CALL .plus type=kotlin.String operator=PLUS
            $this: CALL .plus type=kotlin.String operator=PLUS
              $this: CALL .toString type=kotlin.String operator=null
                $this: GET_VAR x type=kotlin.Any operator=null
              other: GET_VAR y type=kotlin.String operator=null
            other: GET_VAR z type=kotlin.String operator=null
    FUN public inline fun foo(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CONST String type=kotlin.String value='-'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val result1: kotlin.String
          CALL .foobar1 type=kotlin.String operator=null
            x: WHEN type=kotlin.Boolean operator=IF
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: CONST Int type=kotlin.Int value='1'
                arg1: CONST Int type=kotlin.Int value='1'
              then: CONST Boolean type=kotlin.Boolean value='true'
              else: CALL .bar type=kotlin.Boolean operator=null
            y: CALL .foo type=kotlin.String operator=null
            z: CONST String type=kotlin.String value='OK'
        VAR val result2: kotlin.String
          CALL .foobar2 type=kotlin.String operator=null
            x: WHEN type=java.io.Serializable operator=IF
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: CONST Int type=kotlin.Int value='1'
                arg1: CONST Int type=kotlin.Int value='1'
              then: CONST String type=kotlin.String value='true'
              else: CALL .arrayOf type=kotlin.Array<kotlin.String> operator=null
                elements: VARARG type=Array<out String> varargElementType=String
                  CONST String type=kotlin.String value='false'
            y: CALL .foo type=kotlin.String operator=null
            z: CONST String type=kotlin.String value='OK'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='true-OK'
          actual: GET_VAR result1 type=kotlin.String operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='true-OK'
          actual: GET_VAR result2 type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
