MODULE <test-module>
  FILE /callNullable.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a1: kotlin.Byte? = -1.toByte()
          TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Byte?
            CALL .unaryMinus type=kotlin.Int operator=null
              $this: CONST Int type=kotlin.Int value='1'
        VAR val a2: kotlin.Short? = -1.toShort()
          TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Short?
            CALL .unaryMinus type=kotlin.Int operator=null
              $this: CONST Int type=kotlin.Int value='1'
        VAR val a3: kotlin.Int? = -1
          CALL .unaryMinus type=kotlin.Int operator=null
            $this: CONST Int type=kotlin.Int value='1'
        VAR val a4: kotlin.Long? = -1.toLong()
          TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Long?
            CALL .unaryMinus type=kotlin.Int operator=null
              $this: CONST Int type=kotlin.Int value='1'
        VAR val a5: kotlin.Double? = -1.0.toDouble()
          CALL .unaryMinus type=kotlin.Double operator=null
            $this: CONST Double type=kotlin.Double value='1.0'
        VAR val a6: kotlin.Float? = -1.0.toFloat()
          CALL .unaryMinus type=kotlin.Float operator=null
            $this: CONST Float type=kotlin.Float value='1.0'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.Byte operator=EXCLEXCL
                VAR val tmp0_notnull: kotlin.Byte?
                  GET_VAR a1 type=kotlin.Byte? operator=null
                WHEN type=kotlin.Byte operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp0_notnull type=kotlin.Byte? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                  else: GET_VAR tmp0_notnull type=kotlin.Byte? operator=null
              arg1: CALL .toByte type=kotlin.Byte operator=null
                $this: CONST Int type=kotlin.Int value='-1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.Short operator=EXCLEXCL
                VAR val tmp1_notnull: kotlin.Short?
                  GET_VAR a2 type=kotlin.Short? operator=null
                WHEN type=kotlin.Short operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp1_notnull type=kotlin.Short? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                  else: GET_VAR tmp1_notnull type=kotlin.Short? operator=null
              arg1: CALL .toShort type=kotlin.Short operator=null
                $this: CONST Int type=kotlin.Int value='-1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.Int operator=EXCLEXCL
                VAR val tmp2_notnull: kotlin.Int?
                  GET_VAR a3 type=kotlin.Int? operator=null
                WHEN type=kotlin.Int operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp2_notnull type=kotlin.Int? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                  else: GET_VAR tmp2_notnull type=kotlin.Int? operator=null
              arg1: CONST Int type=kotlin.Int value='-1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.Long operator=EXCLEXCL
                VAR val tmp3_notnull: kotlin.Long?
                  GET_VAR a4 type=kotlin.Long? operator=null
                WHEN type=kotlin.Long operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp3_notnull type=kotlin.Long? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                  else: GET_VAR tmp3_notnull type=kotlin.Long? operator=null
              arg1: CONST Long type=kotlin.Long value='-1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 4'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.Double operator=EXCLEXCL
                VAR val tmp4_notnull: kotlin.Double?
                  GET_VAR a5 type=kotlin.Double? operator=null
                WHEN type=kotlin.Double operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp4_notnull type=kotlin.Double? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                  else: GET_VAR tmp4_notnull type=kotlin.Double? operator=null
              arg1: CONST Double type=kotlin.Double value='-1.0'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 5'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.Float operator=EXCLEXCL
                VAR val tmp5_notnull: kotlin.Float?
                  GET_VAR a6 type=kotlin.Float? operator=null
                WHEN type=kotlin.Float operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp5_notnull type=kotlin.Float? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                  else: GET_VAR tmp5_notnull type=kotlin.Float? operator=null
              arg1: CONST Float type=kotlin.Float value='-1.0'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 6'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
