MODULE <test-module>
  FILE /simpleCallWithParams.kt
    FUN public fun testProperLineNumberAfterInline(): kotlin.String
      BLOCK_BODY
        VAR var exceptionCount: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        TRY_CATCH type=kotlin.Any
          try: BLOCK type=kotlin.Unit operator=null
            CALL .checkEquals type=kotlin.Unit operator=null
              p1: CALL .test type=kotlin.String operator=null
              p2: CONST String type=kotlin.String value='12'
          catch e: BLOCK type=kotlin.Int operator=null
            VAR val entry: java.lang.StackTraceElement!
              CALL .get type=java.lang.StackTraceElement! operator=null
                $this: BLOCK type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=EXCLEXCL
                  VAR val tmp0_notnull: kotlin.Array<(out) java.lang.StackTraceElement!>!
                    CALL .getStackTrace type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                      $this: TYPE_OP operator=CAST typeOperand=java.lang.Throwable
                        GET_VAR e type=kotlin.AssertionError /* = java.lang.AssertionError */ operator=null
                  WHEN type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=null
                    if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: GET_VAR tmp0_notnull type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                      arg1: CONST Null type=kotlin.Nothing? value='null'
                    then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                    else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.StackTraceElement!>
                      GET_VAR tmp0_notnull type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                index: CONST Int type=kotlin.Int value='1'
            VAR val actual: kotlin.String
              STRING_CONCATENATION type=kotlin.String
                CALL .getFileName type=kotlin.String! operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR entry type=java.lang.StackTraceElement! operator=null
                CONST String type=kotlin.String value=':'
                CALL .getLineNumber type=kotlin.Int operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR entry type=java.lang.StackTraceElement! operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                  arg0: CONST String type=kotlin.String value='simpleCallWithParams.kt:7'
                  arg1: GET_VAR actual type=kotlin.String operator=null
              then: BLOCK type=kotlin.Nothing operator=null
                RETURN type=kotlin.Nothing from=testProperLineNumberAfterInline
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='fail 1: '
                    GET_VAR actual type=kotlin.String operator=null
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp1: kotlin.Int
                GET_VAR exceptionCount type=kotlin.Int operator=POSTFIX_INCR
              SET_VAR exceptionCount type=kotlin.Unit operator=POSTFIX_INCR
                CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR tmp1 type=kotlin.Int operator=null
              GET_VAR tmp1 type=kotlin.Int operator=null
        TRY_CATCH type=kotlin.Any
          try: BLOCK type=kotlin.Unit operator=null
            CALL .checkEquals type=kotlin.Unit operator=null
              p1: CONST String type=kotlin.String value='12'
              p2: CALL .test type=kotlin.String operator=null
          catch e: BLOCK type=kotlin.Int operator=null
            VAR val entry: java.lang.StackTraceElement!
              CALL .get type=java.lang.StackTraceElement! operator=GET_ARRAY_ELEMENT
                $this: BLOCK type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=EXCLEXCL
                  VAR val tmp2_notnull: kotlin.Array<(out) java.lang.StackTraceElement!>!
                    CALL .<get-stackTrace> type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=GET_PROPERTY
                      $receiver: GET_VAR e type=kotlin.AssertionError /* = java.lang.AssertionError */ operator=null
                  WHEN type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=null
                    if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: GET_VAR tmp2_notnull type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                      arg1: CONST Null type=kotlin.Nothing? value='null'
                    then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                    else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.StackTraceElement!>
                      GET_VAR tmp2_notnull type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                index: CONST Int type=kotlin.Int value='1'
            VAR val actual: kotlin.String
              STRING_CONCATENATION type=kotlin.String
                CALL .getFileName type=kotlin.String! operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR entry type=java.lang.StackTraceElement! operator=null
                CONST String type=kotlin.String value=':'
                CALL .getLineNumber type=kotlin.Int operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR entry type=java.lang.StackTraceElement! operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                  arg0: CONST String type=kotlin.String value='simpleCallWithParams.kt:20'
                  arg1: GET_VAR actual type=kotlin.String operator=null
              then: BLOCK type=kotlin.Nothing operator=null
                RETURN type=kotlin.Nothing from=testProperLineNumberAfterInline
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='fail 2: '
                    GET_VAR actual type=kotlin.String operator=null
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp3: kotlin.Int
                GET_VAR exceptionCount type=kotlin.Int operator=POSTFIX_INCR
              SET_VAR exceptionCount type=kotlin.Unit operator=POSTFIX_INCR
                CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR tmp3 type=kotlin.Int operator=null
              GET_VAR tmp3 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=testProperLineNumberAfterInline
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR exceptionCount type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='2'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
    FUN public fun testProperLineForOtherParameters(): kotlin.String
      BLOCK_BODY
        VAR var exceptionCount: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        TRY_CATCH type=kotlin.Any
          try: BLOCK type=kotlin.Unit operator=null
            CALL .checkEquals type=kotlin.Unit operator=null
              p1: CALL .test type=kotlin.String operator=null
              p2: CALL .fail type=kotlin.String operator=null
          catch e: BLOCK type=kotlin.Int operator=null
            VAR val entry: java.lang.StackTraceElement!
              CALL .get type=java.lang.StackTraceElement! operator=GET_ARRAY_ELEMENT
                $this: BLOCK type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=EXCLEXCL
                  VAR val tmp0_notnull: kotlin.Array<(out) java.lang.StackTraceElement!>!
                    CALL .<get-stackTrace> type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=GET_PROPERTY
                      $receiver: GET_VAR e type=kotlin.AssertionError /* = java.lang.AssertionError */ operator=null
                  WHEN type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=null
                    if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: GET_VAR tmp0_notnull type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                      arg1: CONST Null type=kotlin.Nothing? value='null'
                    then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                    else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.StackTraceElement!>
                      GET_VAR tmp0_notnull type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                index: CONST Int type=kotlin.Int value='1'
            VAR val actual: kotlin.String
              STRING_CONCATENATION type=kotlin.String
                CALL .getFileName type=kotlin.String! operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR entry type=java.lang.StackTraceElement! operator=null
                CONST String type=kotlin.String value=':'
                CALL .getLineNumber type=kotlin.Int operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR entry type=java.lang.StackTraceElement! operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                  arg0: CONST String type=kotlin.String value='simpleCallWithParams.kt:38'
                  arg1: GET_VAR actual type=kotlin.String operator=null
              then: BLOCK type=kotlin.Nothing operator=null
                RETURN type=kotlin.Nothing from=testProperLineForOtherParameters
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='fail 3: '
                    GET_VAR actual type=kotlin.String operator=null
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp1: kotlin.Int
                GET_VAR exceptionCount type=kotlin.Int operator=POSTFIX_INCR
              SET_VAR exceptionCount type=kotlin.Unit operator=POSTFIX_INCR
                CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR tmp1 type=kotlin.Int operator=null
              GET_VAR tmp1 type=kotlin.Int operator=null
        TRY_CATCH type=kotlin.Any
          try: BLOCK type=kotlin.Unit operator=null
            CALL .checkEquals type=kotlin.Unit operator=null
              p1: CALL .fail type=kotlin.String operator=null
              p2: CALL .test type=kotlin.String operator=null
          catch e: BLOCK type=kotlin.Int operator=null
            VAR val entry: java.lang.StackTraceElement!
              CALL .get type=java.lang.StackTraceElement! operator=GET_ARRAY_ELEMENT
                $this: BLOCK type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=EXCLEXCL
                  VAR val tmp2_notnull: kotlin.Array<(out) java.lang.StackTraceElement!>!
                    CALL .<get-stackTrace> type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=GET_PROPERTY
                      $receiver: GET_VAR e type=kotlin.AssertionError /* = java.lang.AssertionError */ operator=null
                  WHEN type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=null
                    if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: GET_VAR tmp2_notnull type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                      arg1: CONST Null type=kotlin.Nothing? value='null'
                    then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                    else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.StackTraceElement!>
                      GET_VAR tmp2_notnull type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                index: CONST Int type=kotlin.Int value='1'
            VAR val actual: kotlin.String
              STRING_CONCATENATION type=kotlin.String
                CALL .getFileName type=kotlin.String! operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR entry type=java.lang.StackTraceElement! operator=null
                CONST String type=kotlin.String value=':'
                CALL .getLineNumber type=kotlin.Int operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR entry type=java.lang.StackTraceElement! operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                  arg0: CONST String type=kotlin.String value='simpleCallWithParams.kt:52'
                  arg1: GET_VAR actual type=kotlin.String operator=null
              then: BLOCK type=kotlin.Nothing operator=null
                RETURN type=kotlin.Nothing from=testProperLineForOtherParameters
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='fail 4: '
                    GET_VAR actual type=kotlin.String operator=null
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp3: kotlin.Int
                GET_VAR exceptionCount type=kotlin.Int operator=POSTFIX_INCR
              SET_VAR exceptionCount type=kotlin.Unit operator=POSTFIX_INCR
                CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR tmp3 type=kotlin.Int operator=null
              GET_VAR tmp3 type=kotlin.Int operator=null
        TRY_CATCH type=kotlin.Any
          try: BLOCK type=kotlin.Unit operator=null
            CALL .checkEquals type=kotlin.Unit operator=null
              p1: CALL .fail type=kotlin.String operator=null
              p2: CALL .test type=kotlin.String operator=null
          catch e: BLOCK type=kotlin.Int operator=null
            VAR val entry: java.lang.StackTraceElement!
              CALL .get type=java.lang.StackTraceElement! operator=GET_ARRAY_ELEMENT
                $this: BLOCK type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=EXCLEXCL
                  VAR val tmp4_notnull: kotlin.Array<(out) java.lang.StackTraceElement!>!
                    CALL .<get-stackTrace> type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=GET_PROPERTY
                      $receiver: GET_VAR e type=kotlin.AssertionError /* = java.lang.AssertionError */ operator=null
                  WHEN type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=null
                    if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: GET_VAR tmp4_notnull type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                      arg1: CONST Null type=kotlin.Nothing? value='null'
                    then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                    else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.StackTraceElement!>
                      GET_VAR tmp4_notnull type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                index: CONST Int type=kotlin.Int value='1'
            VAR val actual: kotlin.String
              STRING_CONCATENATION type=kotlin.String
                CALL .getFileName type=kotlin.String! operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR entry type=java.lang.StackTraceElement! operator=null
                CONST String type=kotlin.String value=':'
                CALL .getLineNumber type=kotlin.Int operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR entry type=java.lang.StackTraceElement! operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                  arg0: CONST String type=kotlin.String value='simpleCallWithParams.kt:65'
                  arg1: GET_VAR actual type=kotlin.String operator=null
              then: BLOCK type=kotlin.Nothing operator=null
                RETURN type=kotlin.Nothing from=testProperLineForOtherParameters
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='fail 5: '
                    GET_VAR actual type=kotlin.String operator=null
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp5: kotlin.Int
                GET_VAR exceptionCount type=kotlin.Int operator=POSTFIX_INCR
              SET_VAR exceptionCount type=kotlin.Unit operator=POSTFIX_INCR
                CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR tmp5 type=kotlin.Int operator=null
              GET_VAR tmp5 type=kotlin.Int operator=null
        TRY_CATCH type=kotlin.Any
          try: BLOCK type=kotlin.Unit operator=null
            CALL .checkEquals type=kotlin.Unit operator=null
              p1: CALL .fail type=kotlin.String operator=null
              p2: CALL .test type=kotlin.String operator=null
          catch e: BLOCK type=kotlin.Int operator=null
            VAR val entry: java.lang.StackTraceElement!
              CALL .get type=java.lang.StackTraceElement! operator=GET_ARRAY_ELEMENT
                $this: BLOCK type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=EXCLEXCL
                  VAR val tmp6_notnull: kotlin.Array<(out) java.lang.StackTraceElement!>!
                    CALL .<get-stackTrace> type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=GET_PROPERTY
                      $receiver: GET_VAR e type=kotlin.AssertionError /* = java.lang.AssertionError */ operator=null
                  WHEN type=kotlin.Array<(out) java.lang.StackTraceElement!> operator=null
                    if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: GET_VAR tmp6_notnull type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                      arg1: CONST Null type=kotlin.Nothing? value='null'
                    then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                    else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.StackTraceElement!>
                      GET_VAR tmp6_notnull type=kotlin.Array<(out) java.lang.StackTraceElement!>! operator=null
                index: CONST Int type=kotlin.Int value='1'
            VAR val actual: kotlin.String
              STRING_CONCATENATION type=kotlin.String
                CALL .getFileName type=kotlin.String! operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR entry type=java.lang.StackTraceElement! operator=null
                CONST String type=kotlin.String value=':'
                CALL .getLineNumber type=kotlin.Int operator=null
                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.StackTraceElement
                    GET_VAR entry type=java.lang.StackTraceElement! operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                  arg0: CONST String type=kotlin.String value='simpleCallWithParams.kt:77'
                  arg1: GET_VAR actual type=kotlin.String operator=null
              then: BLOCK type=kotlin.Nothing operator=null
                RETURN type=kotlin.Nothing from=testProperLineForOtherParameters
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='fail 6: '
                    GET_VAR actual type=kotlin.String operator=null
            BLOCK type=kotlin.Int operator=POSTFIX_INCR
              VAR val tmp7: kotlin.Int
                GET_VAR exceptionCount type=kotlin.Int operator=POSTFIX_INCR
              SET_VAR exceptionCount type=kotlin.Unit operator=POSTFIX_INCR
                CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                  $this: GET_VAR tmp7 type=kotlin.Int operator=null
              GET_VAR tmp7 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=testProperLineForOtherParameters
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR exceptionCount type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='4'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val res: kotlin.String
          CALL .testProperLineNumberAfterInline type=kotlin.String operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR res type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            GET_VAR res type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CALL .testProperLineForOtherParameters type=kotlin.String operator=null
    FUN public fun checkEquals(/*0*/ p1: kotlin.String, /*1*/ p2: kotlin.String): kotlin.Unit
      BLOCK_BODY
        THROW type=kotlin.Nothing
          CALL .<init> type=java.lang.AssertionError operator=null
            p0: CONST String type=kotlin.String value='fail'
    FUN public inline fun test(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=test
          CONST String type=kotlin.String value='123'
    FUN public fun fail(): kotlin.String
      BLOCK_BODY
        THROW type=kotlin.Nothing
          CALL .<init> type=java.lang.AssertionError operator=null
            p0: CONST String type=kotlin.String value='fail'
