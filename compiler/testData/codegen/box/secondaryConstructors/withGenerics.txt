MODULE <test-module>
  FILE /WithGenerics.kt
    CLASS CLASS A
      PROPERTY public final val prop: kotlin.String
      CONSTRUCTOR public constructor A</*0*/ T>(/*0*/ x: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
          SET_BACKING_FIELD prop type=kotlin.Unit operator=null
            receiver: THIS public open class A</*0*/ T> type=A<T>
            value: GET_VAR x type=kotlin.String operator=null
      CONSTRUCTOR public constructor A</*0*/ T>(/*0*/ x: T)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
          SET_BACKING_FIELD prop type=kotlin.Unit operator=null
            receiver: THIS public open class A</*0*/ T> type=A<T>
            value: CALL .toString type=kotlin.String operator=null
              $receiver: GET_VAR x type=T operator=null
      FUN public open override /*1*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            CALL .<get-prop> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public open class A</*0*/ T> type=A<T>
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a1: kotlin.String!
          CALL .foo1 type=kotlin.String! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR a1 type=kotlin.String! operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail1: '
              GET_VAR a1 type=kotlin.String! operator=null
        VAR val a2: kotlin.String!
          CALL .foo2 type=kotlin.String! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR a2 type=kotlin.String! operator=null
              arg1: CONST String type=kotlin.String value='123'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail2: '
              GET_VAR a2 type=kotlin.String! operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
