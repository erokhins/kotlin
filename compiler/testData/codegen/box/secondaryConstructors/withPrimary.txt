MODULE <test-module>
  FILE /WithPrimary.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ x: kotlin.String = ..., /*1*/ y: kotlin.String = ...)
        x: EXPRESSION_BODY
          CONST String type=kotlin.String value='def_x'
        y: EXPRESSION_BODY
          CONST String type=kotlin.String value='1'
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD x type=kotlin.Unit operator=null
            receiver: THIS public final class A type=A
            value: GET_VAR x type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD y type=kotlin.Unit operator=null
            receiver: THIS public final class A type=A
            value: GET_VAR y type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final val x: kotlin.String
        EXPRESSION_BODY
          GET_VAR x type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val y: kotlin.String
        EXPRESSION_BODY
          GET_VAR y type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      CONSTRUCTOR public constructor A(/*0*/ x: kotlin.String, /*1*/ y: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL A
            x: GET_VAR x type=kotlin.String operator=null
            y: CALL .toString type=kotlin.String operator=null
              $this: GET_VAR y type=kotlin.Int operator=null
      CONSTRUCTOR public constructor A(/*0*/ x: kotlin.Double)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL A
            x: CALL .toString type=kotlin.String operator=null
              $this: GET_VAR x type=kotlin.Double operator=null
            y: CONST String type=kotlin.String value='def_y'
      FUN public open override /*1*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            STRING_CONCATENATION type=kotlin.String
              CALL .<get-x> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public final class A type=A
              CONST String type=kotlin.String value='#'
              CALL .<get-y> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public final class A type=A
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val test1: kotlin.String
          CALL .toString type=kotlin.String operator=null
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=A
              CALL .test1 type=A! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR test1 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='123#abc'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail1: '
              GET_VAR test1 type=kotlin.String operator=null
        VAR val test2: kotlin.String
          CALL .toString type=kotlin.String operator=null
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=A
              CALL .test2 type=A! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR test2 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='def_x#1'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail2: '
              GET_VAR test2 type=kotlin.String operator=null
        VAR val test3: kotlin.String
          CALL .toString type=kotlin.String operator=null
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=A
              CALL .test3 type=A! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR test3 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='123#456'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail3: '
              GET_VAR test3 type=kotlin.String operator=null
        VAR val test4: kotlin.String
          CALL .toString type=kotlin.String operator=null
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=A
              CALL .test4 type=A! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR test4 type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='1.0#def_y'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail4: '
              GET_VAR test4 type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
