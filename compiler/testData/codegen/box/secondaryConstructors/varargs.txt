MODULE <test-module>
  FILE /varargs.kt
    FUN public fun join(/*0*/ x: kotlin.Array<out kotlin.String>): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.String>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.String> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR x type=kotlin.Array<out kotlin.String> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.String
                CALL .next type=kotlin.String operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR result type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR result type=kotlin.String operator=PLUSEQ
                    other: GET_VAR i type=kotlin.String operator=null
                SET_VAR result type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR result type=kotlin.String operator=PLUSEQ
                    other: CONST String type=kotlin.String value='#'
        RETURN type=kotlin.Nothing from=join
          GET_VAR result type=kotlin.String operator=null
    CLASS CLASS B
      PROPERTY public final val parentProp: kotlin.String
      CONSTRUCTOR public constructor B(/*0*/ vararg x: kotlin.String /*kotlin.Array<out kotlin.String>*/)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=B
          SET_BACKING_FIELD parentProp type=kotlin.Unit operator=null
            receiver: THIS public open class B type=B
            value: CALL .join type=kotlin.String operator=null
              x: GET_VAR x type=kotlin.Array<out kotlin.String> operator=null
    CLASS CLASS A
      PROPERTY public final val prop: kotlin.String
      CONSTRUCTOR public constructor A(/*0*/ vararg x: kotlin.String /*kotlin.Array<out kotlin.String>*/)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL B
            x: VARARG type=Array<out String> varargElementType=String
              CONST String type=kotlin.String value='0'
              SPREAD_ELEMENT
                GET_VAR x type=kotlin.Array<out kotlin.String> operator=null
              CONST String type=kotlin.String value='4'
          INSTANCE_INITIALIZER_CALL classDescriptor=A
          SET_BACKING_FIELD prop type=kotlin.Unit operator=null
            receiver: THIS public final class A : B type=A
            value: CALL .join type=kotlin.String operator=null
              x: GET_VAR x type=kotlin.Array<out kotlin.String> operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a1: A
          CALL .<init> type=A operator=null
            x: VARARG type=Array<out String> varargElementType=String
              CONST String type=kotlin.String value='1'
              CONST String type=kotlin.String value='2'
              CONST String type=kotlin.String value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-prop> type=kotlin.String operator=GET_PROPERTY
                $this: GET_VAR a1 type=A operator=null
              arg1: CONST String type=kotlin.String value='1#2#3#'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail1: '
              CALL .<get-prop> type=kotlin.String operator=GET_PROPERTY
                $this: GET_VAR a1 type=A operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-parentProp> type=kotlin.String operator=GET_PROPERTY
                $this: GET_VAR a1 type=A operator=null
              arg1: CONST String type=kotlin.String value='0#1#2#3#4#'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail2: '
              CALL .<get-parentProp> type=kotlin.String operator=GET_PROPERTY
                $this: GET_VAR a1 type=A operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
