MODULE <test-module>
  FILE /flist.kt
    CLASS CLASS FList
      CONSTRUCTOR public constructor FList</*0*/ T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=FList
      PROPERTY public abstract val head: T
      PROPERTY public abstract val tail: FList<T>
      PROPERTY public abstract val empty: kotlin.Boolean
      CLASS OBJECT Companion
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Companion
        PROPERTY public final val emptyFList: FList<kotlin.Any>
          EXPRESSION_BODY
            BLOCK type=FList.Companion.emptyFList.<no name provided> operator=OBJECT_LITERAL
              CLASS CLASS <no name provided>
                CONSTRUCTOR public constructor <no name provided>()
                  BLOCK_BODY
                    DELEGATING_CONSTRUCTOR_CALL FList
                    INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
                PROPERTY public open override /*1*/ val head: kotlin.Any
                  PROPERTY_GETTER public open override /*1*/ fun <get-head>(): kotlin.Any
                    BLOCK_BODY
                      THROW type=kotlin.Nothing
                        CALL .<init> type=java.lang.UnsupportedOperationException operator=null
                PROPERTY public open override /*1*/ val tail: FList<kotlin.Any>
                  PROPERTY_GETTER public open override /*1*/ fun <get-tail>(): FList<kotlin.Any>
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<get-tail>
                        THIS local final class <no name provided> : FList<kotlin.Any> type=FList.Companion.emptyFList.<no name provided>
                PROPERTY public open override /*1*/ val empty: kotlin.Boolean
                  PROPERTY_GETTER public open override /*1*/ fun <get-empty>(): kotlin.Boolean
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<get-empty>
                        CONST Boolean type=kotlin.Boolean value='true'
              CALL .<init> type=FList.Companion.emptyFList.<no name provided> operator=OBJECT_LITERAL
      FUN public final operator fun plus(/*0*/ head: T): FList<T>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=plus
            BLOCK type=FList.plus.<no name provided><T> operator=OBJECT_LITERAL
              CLASS CLASS <no name provided>
                CONSTRUCTOR public constructor <no name provided>()
                  BLOCK_BODY
                    DELEGATING_CONSTRUCTOR_CALL FList
                    INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
                PROPERTY public open override /*1*/ val head: T
                  PROPERTY_GETTER public open override /*1*/ fun <get-head>(): T
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<get-head>
                        GET_VAR head type=T operator=null
                PROPERTY public open override /*1*/ val empty: kotlin.Boolean
                  PROPERTY_GETTER public open override /*1*/ fun <get-empty>(): kotlin.Boolean
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<get-empty>
                        CONST Boolean type=kotlin.Boolean value='false'
                PROPERTY public open override /*1*/ val tail: FList<T>
                  PROPERTY_GETTER public open override /*1*/ fun <get-tail>(): FList<T>
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<get-tail>
                        THIS public abstract class FList</*0*/ T> type=FList<T>
              CALL .<init> type=FList.plus.<no name provided><T> operator=OBJECT_LITERAL
    FUN public fun </*0*/ T> emptyFList(): FList<T>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=emptyFList
          TYPE_OP operator=CAST typeOperand=FList<T>
            CALL .<get-emptyFList> type=FList<kotlin.Any> operator=GET_PROPERTY
              $this: GET_OBJECT Companion type=FList.Companion
    FUN public fun </*0*/ T> FList<T>.reverse(/*0*/ where: FList<T> = ...): FList<T>
      where: EXPRESSION_BODY
        CALL .emptyFList type=FList<T> operator=null
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=reverse
          WHEN type=FList<T> operator=IF
            if: CALL .<get-empty> type=kotlin.Boolean operator=GET_PROPERTY
              $this: $RECEIVER of: reverse type=FList<T>
            then: GET_VAR where type=FList<T> operator=null
            else: CALL .reverse type=FList<T> operator=null
              $receiver: CALL .<get-tail> type=FList<T> operator=GET_PROPERTY
                $this: $RECEIVER of: reverse type=FList<T>
              where: CALL .plus type=FList<T> operator=PLUS
                $this: GET_VAR where type=FList<T> operator=null
                head: CALL .<get-head> type=T operator=GET_PROPERTY
                  $this: $RECEIVER of: reverse type=FList<T>
    FUN public operator fun </*0*/ T> FList<T>.iterator(): kotlin.collections.Iterator<T>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=iterator
          BLOCK type=iterator.<no name provided><T> operator=OBJECT_LITERAL
            CLASS CLASS <no name provided>
              CONSTRUCTOR public constructor <no name provided>()
                BLOCK_BODY
                  DELEGATING_CONSTRUCTOR_CALL Any
                  INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
              PROPERTY private final var cur: FList<T>
                EXPRESSION_BODY
                  $RECEIVER of: iterator type=FList<T>
              FUN public open override /*1*/ fun next(): T
                BLOCK_BODY
                  VAR val res: T
                    CALL .<get-head> type=T operator=GET_PROPERTY
                      $this: CALL .<get-cur> type=FList<T> operator=GET_PROPERTY
                        $this: THIS local final class <no name provided> : kotlin.collections.Iterator<T> type=iterator.<no name provided><T>
                  CALL .<set-cur> type=kotlin.Unit operator=EQ
                    $this: THIS local final class <no name provided> : kotlin.collections.Iterator<T> type=iterator.<no name provided><T>
                    <set-?>: CALL .<get-tail> type=FList<T> operator=GET_PROPERTY
                      $this: CALL .<get-cur> type=FList<T> operator=GET_PROPERTY
                        $this: THIS local final class <no name provided> : kotlin.collections.Iterator<T> type=iterator.<no name provided><T>
                  RETURN type=kotlin.Nothing from=next
                    GET_VAR res type=T operator=null
              FUN public open override /*1*/ fun hasNext(): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=hasNext
                    CALL .not type=kotlin.Boolean operator=EXCL
                      $this: CALL .<get-empty> type=kotlin.Boolean operator=GET_PROPERTY
                        $this: CALL .<get-cur> type=FList<T> operator=GET_PROPERTY
                          $this: THIS local final class <no name provided> : kotlin.collections.Iterator<T> type=iterator.<no name provided><T>
            CALL .<init> type=iterator.<no name provided><T> operator=OBJECT_LITERAL
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var r: kotlin.String
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.String>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.String> operator=FOR_LOOP_ITERATOR
              $receiver: CALL .reverse type=FList<kotlin.String> operator=null
                $receiver: CALL .plus type=FList<kotlin.String> operator=PLUS
                  $this: CALL .plus type=FList<kotlin.String> operator=PLUS
                    $this: CALL .emptyFList type=FList<kotlin.String> operator=null
                    head: CONST String type=kotlin.String value='O'
                  head: CONST String type=kotlin.String value='K'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val s: kotlin.String
                CALL .next type=kotlin.String operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR r type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR r type=kotlin.String operator=PLUSEQ
                    other: GET_VAR s type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          GET_VAR r type=kotlin.String operator=null
