MODULE <test-module>
  FILE /useImportedMember.kt
    CLASS INTERFACE I
      FUN public open fun </*0*/ T> T.fromInterface(): T
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=fromInterface
            $RECEIVER of: fromInterface type=T
      FUN public open fun genericFromSuper(/*0*/ g: G): G
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=genericFromSuper
            GET_VAR g type=G operator=null
    CLASS CLASS BaseClass
      CONSTRUCTOR public constructor BaseClass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=BaseClass
      PROPERTY public final val </*0*/ T> T.fromClass: T
        PROPERTY_GETTER public final fun T.<get-fromClass>(): T
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-fromClass>
              $RECEIVER of: fromClass type=T
    CLASS OBJECT C
      CONSTRUCTOR private constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL BaseClass
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      FUN public final fun f(/*0*/ s: kotlin.Int): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=f
            CONST Int type=kotlin.Int value='1'
      FUN public final fun f(/*0*/ s: kotlin.String): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=f
            CONST Int type=kotlin.Int value='2'
      FUN public final fun kotlin.Boolean.f(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=f
            CONST Int type=kotlin.Int value='3'
      PROPERTY public final var p: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='4'
      PROPERTY public final val kotlin.Int.ext: kotlin.Int
        PROPERTY_GETTER public final fun kotlin.Int.<get-ext>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-ext>
              CONST Int type=kotlin.Int value='6'
      FUN public final fun </*0*/ T> g1(/*0*/ t: T): T
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=g1
            GET_VAR t type=T operator=null
      PROPERTY public final val </*0*/ T> T.g2: T
        PROPERTY_GETTER public final fun T.<get-g2>(): T
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-g2>
              $RECEIVER of: g2 type=T
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .f type=kotlin.Int operator=null
                s: CONST Int type=kotlin.Int value='1'
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .f type=kotlin.Int operator=null
                s: CONST String type=kotlin.String value='s'
              arg1: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .f type=kotlin.Int operator=null
                $receiver: CONST Boolean type=kotlin.Boolean value='true'
              arg1: CONST Int type=kotlin.Int value='3'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-p> type=kotlin.Int operator=GET_PROPERTY
              arg1: CONST Int type=kotlin.Int value='4'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='4'
        CALL .<set-p> type=kotlin.Unit operator=EQ
          <set-?>: CONST Int type=kotlin.Int value='5'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-p> type=kotlin.Int operator=GET_PROPERTY
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='5'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-ext> type=kotlin.Int operator=GET_PROPERTY
                $receiver: CONST Int type=kotlin.Int value='5'
              arg1: CONST Int type=kotlin.Int value='6'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='6'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .g1 type=kotlin.String operator=null
                t: CONST String type=kotlin.String value='7'
              arg1: CONST String type=kotlin.String value='7'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='7'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-g2> type=kotlin.String operator=GET_PROPERTY
                $receiver: CONST String type=kotlin.String value='8'
              arg1: CONST String type=kotlin.String value='8'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='8'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .fromInterface type=kotlin.Int operator=null
                $receiver: CONST Int type=kotlin.Int value='9'
              arg1: CONST Int type=kotlin.Int value='9'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='9'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-fromClass> type=kotlin.String operator=GET_PROPERTY
                $receiver: CONST String type=kotlin.String value='10'
              arg1: CONST String type=kotlin.String value='10'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='10'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .genericFromSuper type=kotlin.String operator=null
                g: CONST String type=kotlin.String value='11'
              arg1: CONST String type=kotlin.String value='11'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='11'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
