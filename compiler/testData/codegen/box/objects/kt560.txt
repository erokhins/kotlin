MODULE <test-module>
  FILE /kt560.kt
    CLASS CLASS AllEvenNum
      CONSTRUCTOR public constructor AllEvenNum()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=AllEvenNum
      CLASS OBJECT Companion
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Companion
        FUN public open fun main(/*0*/ args: kotlin.Array<kotlin.String?>?): kotlin.Unit
          BLOCK_BODY
            VAR var i: kotlin.Int
              CONST Int type=kotlin.Int value='1'
            WHILE label=null operator=WHILE_LOOP
              condition: CALL .LTEQ0 type=kotlin.Boolean operator=LTEQ
                arg0: CALL .compareTo type=kotlin.Int operator=LTEQ
                  $this: GET_VAR i type=kotlin.Int operator=null
                  other: CONST Int type=kotlin.Int value='100'
              body: BLOCK type=kotlin.Unit operator=null
                BLOCK type=() -> kotlin.Unit operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.Unit
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                        WHEN type=kotlin.Unit operator=IF
                          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                            arg0: CALL .mod type=kotlin.Int operator=PERC
                              $this: GET_VAR i type=kotlin.Int operator=null
                              other: CONST Int type=kotlin.Int value='2'
                            arg1: CONST Int type=kotlin.Int value='0'
                          then: BLOCK type=kotlin.Unit? operator=null
                            BLOCK type=kotlin.Unit? operator=SAFE_CALL
                              VAR val tmp0_safe_receiver: java.io.PrintStream!
                                GET_BACKING_FIELD out type=java.io.PrintStream! operator=GET_PROPERTY
                              WHEN type=kotlin.Unit? operator=SAFE_CALL
                                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                                  arg0: GET_VAR tmp0_safe_receiver type=java.io.PrintStream! operator=null
                                  arg1: CONST Null type=kotlin.Nothing? value='null'
                                then: CONST Null type=kotlin.Nothing? value='null'
                                else: CALL .print type=kotlin.Unit operator=null
                                  $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.io.PrintStream
                                    GET_VAR tmp0_safe_receiver type=java.io.PrintStream! operator=null
                                  p0: CALL .plus type=kotlin.String operator=PLUS
                                    $this: CALL .toString type=kotlin.String operator=null
                                      $this: GET_VAR i type=kotlin.Int operator=null
                                    other: CONST String type=kotlin.String value=','
                  CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
                SET_VAR i type=kotlin.Unit operator=EQ
                  CALL .plus type=kotlin.Int operator=PLUS
                    $this: GET_VAR i type=kotlin.Int operator=null
                    other: CONST Int type=kotlin.Int value='1'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .main type=kotlin.Unit operator=null
          $this: GET_OBJECT Companion type=while_bug_1.AllEvenNum.Companion
          args: CALL .arrayOfNulls type=kotlin.Array<kotlin.String?> operator=null
            size: CONST Int type=kotlin.Int value='0'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
