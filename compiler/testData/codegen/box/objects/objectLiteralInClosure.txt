MODULE <test-module>
  FILE /objectLiteralInClosure.kt
    CLASS CLASS C
      CONSTRUCTOR public constructor C(/*0*/ y: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD y type=kotlin.Unit operator=null
            receiver: THIS private final class C type=p.C
            value: GET_VAR y type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      PROPERTY public final val y: kotlin.Int
        EXPRESSION_BODY
          GET_VAR y type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val initChild: () -> p.C.initChild.<anonymous>.<no name provided>
        EXPRESSION_BODY
          BLOCK type=() -> p.C.initChild.<anonymous>.<no name provided> operator=LAMBDA
            FUN local final fun <anonymous>(): p.C.initChild.<anonymous>.<no name provided>
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  BLOCK type=p.C.initChild.<anonymous>.<no name provided> operator=OBJECT_LITERAL
                    CLASS CLASS <no name provided>
                      CONSTRUCTOR public constructor <no name provided>()
                        BLOCK_BODY
                          DELEGATING_CONSTRUCTOR_CALL Any
                          INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
                      FUN public open override /*1*/ fun toString(): kotlin.String
                        BLOCK_BODY
                          RETURN type=kotlin.Nothing from=toString
                            CALL .plus type=kotlin.String operator=PLUS
                              $this: CONST String type=kotlin.String value='child'
                              other: CALL .<get-y> type=kotlin.Int operator=GET_PROPERTY
                                $this: THIS private final class C type=p.C
                    CALL .<init> type=p.C.initChild.<anonymous>.<no name provided> operator=OBJECT_LITERAL
            CALLABLE_REFERENCE <anonymous> type=() -> p.C.initChild.<anonymous>.<no name provided> operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val c: () -> p.C.initChild.<anonymous>.<no name provided>
          CALL .<get-initChild> type=() -> p.C.initChild.<anonymous>.<no name provided> operator=GET_PROPERTY
            $this: CALL .<init> type=p.C operator=null
              y: CONST Int type=kotlin.Int value='3'
        VAR val x: kotlin.String
          CALL .toString type=kotlin.String operator=null
            $this: CALL .invoke type=p.C.initChild.<anonymous>.<no name provided> operator=INVOKE
              $this: GET_VAR c type=() -> p.C.initChild.<anonymous>.<no name provided> operator=VARIABLE_AS_FUNCTION
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR x type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='child3'
            then: CONST String type=kotlin.String value='OK'
            else: GET_VAR x type=kotlin.String operator=null
