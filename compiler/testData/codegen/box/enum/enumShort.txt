MODULE <test-module>
  FILE /enumShort.kt
    CLASS ENUM_CLASS Color
      CONSTRUCTOR private constructor Color(/*0*/ rgb: kotlin.Int)
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL Enum super
          SET_BACKING_FIELD rgb type=kotlin.Unit operator=null
            receiver: THIS public final enum class Color : kotlin.Enum<Color> type=Color
            value: GET_VAR rgb type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Color
      PROPERTY public final val rgb: kotlin.Int
        EXPRESSION_BODY
          GET_VAR rgb type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      ENUM_ENTRY enum entry RED
        init: ENUM_CONSTRUCTOR_CALL Color RED
          rgb: CONST Int type=kotlin.Int value='16711680'
      ENUM_ENTRY enum entry GREEN
        init: ENUM_CONSTRUCTOR_CALL Color GREEN
          rgb: CONST Int type=kotlin.Int value='65280'
      ENUM_ENTRY enum entry BLUE
        init: ENUM_CONSTRUCTOR_CALL Color BLUE
          rgb: CONST Int type=kotlin.Int value='255'
      FUN public final /*synthesized*/ fun values(): kotlin.Array<Color>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): Color
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    FUN public fun foo(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CALL .plus type=kotlin.Int operator=PLUS
            $this: CALL .plus type=kotlin.Int operator=PLUS
              $this: CALL .<get-rgb> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_ENUM_VALUE RED type=Color
              other: CALL .<get-rgb> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_ENUM_VALUE GREEN type=Color
            other: CALL .<get-rgb> type=kotlin.Int operator=GET_PROPERTY
              $this: GET_ENUM_VALUE BLUE type=Color
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .foo type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='16777215'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail: '
              CALL .foo type=kotlin.Int operator=null
