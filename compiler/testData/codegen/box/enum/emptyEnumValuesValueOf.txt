MODULE <test-module>
  FILE /emptyEnumValuesValueOf.kt
    CLASS ENUM_CLASS Empty
      CONSTRUCTOR private constructor Empty()
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL Enum super
          INSTANCE_INITIALIZER_CALL classDescriptor=Empty
      FUN public final /*synthesized*/ fun values(): kotlin.Array<Empty>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): Empty
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .values type=kotlin.Array<Empty> operator=null
              arg1: CONST Int type=kotlin.Int value='0'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail: '
              CALL .values type=kotlin.Array<Empty> operator=null
        TRY_CATCH type=kotlin.Nothing
          try: BLOCK type=kotlin.Nothing operator=null
            VAR val found: Empty
              CALL .valueOf type=Empty operator=null
                value: CONST String type=kotlin.String value='nonExistentEntry'
            RETURN type=kotlin.Nothing from=box
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Fail: '
                GET_VAR found type=Empty operator=null
          catch e: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='OK'
