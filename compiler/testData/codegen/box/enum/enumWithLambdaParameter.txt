MODULE <test-module>
  FILE /enumWithLambdaParameter.kt
    CLASS ENUM_CLASS Sign
      CONSTRUCTOR private constructor Sign(/*0*/ str: kotlin.String, /*1*/ func: (kotlin.Int, kotlin.Int) -> kotlin.Int)
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL Enum super
          SET_BACKING_FIELD str type=kotlin.Unit operator=null
            receiver: THIS public final enum class Sign : kotlin.Enum<Sign> type=Sign
            value: GET_VAR str type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD func type=kotlin.Unit operator=null
            receiver: THIS public final enum class Sign : kotlin.Enum<Sign> type=Sign
            value: GET_VAR func type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Sign
      PROPERTY public final val str: kotlin.String
        EXPRESSION_BODY
          GET_VAR str type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val func: (kotlin.Int, kotlin.Int) -> kotlin.Int
        EXPRESSION_BODY
          GET_VAR func type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      ENUM_ENTRY enum entry plus
        init: ENUM_CONSTRUCTOR_CALL Sign plus
          str: CONST String type=kotlin.String value='+'
          func: BLOCK type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=LAMBDA
            FUN local final fun <anonymous>(/*0*/ x: kotlin.Int, /*1*/ y: kotlin.Int): kotlin.Int
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .plus type=kotlin.Int operator=PLUS
                    $this: GET_VAR x type=kotlin.Int operator=null
                    other: GET_VAR y type=kotlin.Int operator=null
            CALLABLE_REFERENCE <anonymous> type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=LAMBDA
      ENUM_ENTRY enum entry mult
        init: ENUM_CONSTRUCTOR_CALL mult mult
        class: CLASS ENUM_ENTRY mult
          CONSTRUCTOR private constructor mult()
            BLOCK_BODY
              ENUM_CONSTRUCTOR_CALL Sign super
                str: CONST String type=kotlin.String value='*'
                func: BLOCK type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=LAMBDA
                  FUN local final fun <anonymous>(/*0*/ x: kotlin.Int, /*1*/ y: kotlin.Int): kotlin.Int
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CALL .times type=kotlin.Int operator=MUL
                          $this: GET_VAR x type=kotlin.Int operator=null
                          other: GET_VAR y type=kotlin.Int operator=null
                  CALLABLE_REFERENCE <anonymous> type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=LAMBDA
              INSTANCE_INITIALIZER_CALL classDescriptor=mult
          FUN public open override /*1*/ fun toString(): kotlin.String
            BLOCK_BODY
              RETURN type=kotlin.Nothing from=toString
                TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.String
                  CALL .invoke type=kotlin.Int operator=INVOKE
                    $this: CALL .<get-func> type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=GET_PROPERTY
                      $this: THIS enum entry mult type=Sign.mult
                    p1: CONST Int type=kotlin.Int value='4'
                    p2: CONST Int type=kotlin.Int value='5'
      FUN public final /*synthesized*/ fun values(): kotlin.Array<Sign>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): Sign
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val sum: kotlin.Int
          CALL .invoke type=kotlin.Int operator=INVOKE
            $this: CALL .<get-func> type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=GET_PROPERTY
              $this: GET_ENUM_VALUE plus type=Sign
            p1: CONST Int type=kotlin.Int value='2'
            p2: CONST Int type=kotlin.Int value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR sum type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 1: '
              GET_VAR sum type=kotlin.Int operator=null
        VAR val product: kotlin.String
          CALL .toString type=kotlin.String operator=null
            $this: GET_ENUM_VALUE mult type=Sign
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR product type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='20'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 2: '
              GET_VAR product type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
