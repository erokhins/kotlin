MODULE <test-module>
  FILE /kt3430.kt
    FUN public fun f(/*0*/ b: kotlin.Int.(kotlin.Int) -> kotlin.Int): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=f
          BLOCK type=kotlin.Int? operator=SAFE_CALL
            VAR val tmp0_safe_receiver: kotlin.Int
              CONST Int type=kotlin.Int value='1'
            WHEN type=kotlin.Int? operator=SAFE_CALL
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_safe_receiver type=kotlin.Int operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CONST Null type=kotlin.Nothing? value='null'
              else: CALL .invoke type=kotlin.Int operator=INVOKE
                $this: GET_VAR b type=kotlin.Int.(kotlin.Int) -> kotlin.Int operator=VARIABLE_AS_FUNCTION
                $receiver: GET_VAR tmp0_safe_receiver type=kotlin.Int operator=null
                p2: CONST Int type=kotlin.Int value='1'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val x: kotlin.Int
          CALL .f type=kotlin.Int operator=null
            b: BLOCK type=kotlin.Int.(kotlin.Int) -> kotlin.Int operator=LAMBDA
              FUN local final fun kotlin.Int.<anonymous>(/*0*/ it: kotlin.Int): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .plus type=kotlin.Int operator=PLUS
                      $this: $RECEIVER of: <anonymous> type=kotlin.Int
                      other: GET_VAR it type=kotlin.Int operator=null
              CALLABLE_REFERENCE <anonymous> type=kotlin.Int.(kotlin.Int) -> kotlin.Int operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
