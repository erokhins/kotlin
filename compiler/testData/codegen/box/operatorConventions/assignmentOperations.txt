MODULE <test-module>
  FILE /assignmentOperations.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final var x: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='0'
    FUN public operator fun A.plusAssign(/*0*/ y: kotlin.Int): kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=PLUSEQ
          VAR val tmp0_this: A
            $RECEIVER of: plusAssign type=A
          CALL .<set-x> type=kotlin.Unit operator=PLUSEQ
            $this: GET_VAR tmp0_this type=A operator=null
            <set-?>: CALL .plus type=kotlin.Int operator=PLUSEQ
              $this: CALL .<get-x> type=kotlin.Int operator=PLUSEQ
                $this: GET_VAR tmp0_this type=A operator=null
              other: GET_VAR y type=kotlin.Int operator=null
    FUN public operator fun A.minusAssign(/*0*/ y: kotlin.Int): kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=MINUSEQ
          VAR val tmp0_this: A
            $RECEIVER of: minusAssign type=A
          CALL .<set-x> type=kotlin.Unit operator=MINUSEQ
            $this: GET_VAR tmp0_this type=A operator=null
            <set-?>: CALL .minus type=kotlin.Int operator=MINUSEQ
              $this: CALL .<get-x> type=kotlin.Int operator=MINUSEQ
                $this: GET_VAR tmp0_this type=A operator=null
              other: GET_VAR y type=kotlin.Int operator=null
    FUN public operator fun A.timesAssign(/*0*/ y: kotlin.Int): kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=MULTEQ
          VAR val tmp0_this: A
            $RECEIVER of: timesAssign type=A
          CALL .<set-x> type=kotlin.Unit operator=MULTEQ
            $this: GET_VAR tmp0_this type=A operator=null
            <set-?>: CALL .times type=kotlin.Int operator=MULTEQ
              $this: CALL .<get-x> type=kotlin.Int operator=MULTEQ
                $this: GET_VAR tmp0_this type=A operator=null
              other: GET_VAR y type=kotlin.Int operator=null
    FUN public operator fun A.divAssign(/*0*/ y: kotlin.Int): kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=DIVEQ
          VAR val tmp0_this: A
            $RECEIVER of: divAssign type=A
          CALL .<set-x> type=kotlin.Unit operator=DIVEQ
            $this: GET_VAR tmp0_this type=A operator=null
            <set-?>: CALL .div type=kotlin.Int operator=DIVEQ
              $this: CALL .<get-x> type=kotlin.Int operator=DIVEQ
                $this: GET_VAR tmp0_this type=A operator=null
              other: GET_VAR y type=kotlin.Int operator=null
    FUN public operator fun A.modAssign(/*0*/ y: kotlin.Int): kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=PERCEQ
          VAR val tmp0_this: A
            $RECEIVER of: modAssign type=A
          CALL .<set-x> type=kotlin.Unit operator=PERCEQ
            $this: GET_VAR tmp0_this type=A operator=null
            <set-?>: CALL .mod type=kotlin.Int operator=PERCEQ
              $this: CALL .<get-x> type=kotlin.Int operator=PERCEQ
                $this: GET_VAR tmp0_this type=A operator=null
              other: GET_VAR y type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val original: A
          CALL .<init> type=A operator=null
        VAR val a: A
          GET_VAR original type=A operator=null
        CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
          $receiver: GET_VAR a type=A operator=PLUSEQ
          y: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQEQ
            arg0: CALL .EQEQEQ type=kotlin.Boolean operator=EXCLEQEQ
              arg0: GET_VAR a type=A operator=null
              arg1: GET_VAR original type=A operator=null
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 1: '
              GET_VAR a type=A operator=null
              CONST String type=kotlin.String value=' !== '
              GET_VAR original type=A operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a type=A operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 2: '
              CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a type=A operator=null
              CONST String type=kotlin.String value=' != 1'
        CALL .minusAssign type=kotlin.Unit operator=MINUSEQ
          $receiver: GET_VAR a type=A operator=MINUSEQ
          y: CONST Int type=kotlin.Int value='2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQEQ
            arg0: CALL .EQEQEQ type=kotlin.Boolean operator=EXCLEQEQ
              arg0: GET_VAR a type=A operator=null
              arg1: GET_VAR original type=A operator=null
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 3: '
              GET_VAR a type=A operator=null
              CONST String type=kotlin.String value=' !== '
              GET_VAR original type=A operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a type=A operator=null
              arg1: CONST Int type=kotlin.Int value='-1'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 4: '
              CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a type=A operator=null
              CONST String type=kotlin.String value=' != -1'
        CALL .timesAssign type=kotlin.Unit operator=MULTEQ
          $receiver: GET_VAR a type=A operator=MULTEQ
          y: CONST Int type=kotlin.Int value='-10'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQEQ
            arg0: CALL .EQEQEQ type=kotlin.Boolean operator=EXCLEQEQ
              arg0: GET_VAR a type=A operator=null
              arg1: GET_VAR original type=A operator=null
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 5: '
              GET_VAR a type=A operator=null
              CONST String type=kotlin.String value=' !== '
              GET_VAR original type=A operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a type=A operator=null
              arg1: CONST Int type=kotlin.Int value='10'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 6: '
              CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a type=A operator=null
              CONST String type=kotlin.String value=' != 10'
        CALL .divAssign type=kotlin.Unit operator=DIVEQ
          $receiver: GET_VAR a type=A operator=DIVEQ
          y: CONST Int type=kotlin.Int value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQEQ
            arg0: CALL .EQEQEQ type=kotlin.Boolean operator=EXCLEQEQ
              arg0: GET_VAR a type=A operator=null
              arg1: GET_VAR original type=A operator=null
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 7: '
              GET_VAR a type=A operator=null
              CONST String type=kotlin.String value=' !== '
              GET_VAR original type=A operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a type=A operator=null
              arg1: CONST Int type=kotlin.Int value='3'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 8: '
              CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a type=A operator=null
              CONST String type=kotlin.String value=' != 3'
        CALL .modAssign type=kotlin.Unit operator=PERCEQ
          $receiver: GET_VAR a type=A operator=PERCEQ
          y: CONST Int type=kotlin.Int value='2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQEQ
            arg0: CALL .EQEQEQ type=kotlin.Boolean operator=EXCLEQEQ
              arg0: GET_VAR a type=A operator=null
              arg1: GET_VAR original type=A operator=null
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 9: '
              GET_VAR a type=A operator=null
              CONST String type=kotlin.String value=' !== '
              GET_VAR original type=A operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a type=A operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 10: '
              CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a type=A operator=null
              CONST String type=kotlin.String value=' != 1'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
