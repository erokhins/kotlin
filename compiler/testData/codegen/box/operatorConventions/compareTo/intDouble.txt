MODULE <test-module>
  FILE /intDouble.kt
    FUN public fun checkLess(/*0*/ x: kotlin.Int, /*1*/ y: kotlin.Double): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=checkLess
          WHEN type=kotlin.String operator=WHEN
            if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
              arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                $this: GET_VAR x type=kotlin.Int operator=null
                other: GET_VAR y type=kotlin.Double operator=null
            then: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR x type=kotlin.Int operator=null
              CONST String type=kotlin.String value=' >= '
              GET_VAR y type=kotlin.Double operator=null
            if: CALL .not type=kotlin.Boolean operator=EXCL
              $this: CALL .LT0 type=kotlin.Boolean operator=LT
                arg0: CALL .compareTo type=kotlin.Int operator=LT
                  $this: GET_VAR x type=kotlin.Int operator=null
                  other: GET_VAR y type=kotlin.Double operator=null
            then: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail !('
              GET_VAR x type=kotlin.Int operator=null
              CONST String type=kotlin.String value=' < '
              GET_VAR y type=kotlin.Double operator=null
              CONST String type=kotlin.String value=')'
            if: CALL .not type=kotlin.Boolean operator=EXCL
              $this: CALL .LTEQ0 type=kotlin.Boolean operator=LTEQ
                arg0: CALL .compareTo type=kotlin.Int operator=LTEQ
                  $this: GET_VAR x type=kotlin.Int operator=null
                  other: GET_VAR y type=kotlin.Double operator=null
            then: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail !('
              GET_VAR x type=kotlin.Int operator=null
              CONST String type=kotlin.String value=' <= '
              GET_VAR y type=kotlin.Double operator=null
              CONST String type=kotlin.String value=')'
            if: CALL .GT0 type=kotlin.Boolean operator=GT
              arg0: CALL .compareTo type=kotlin.Int operator=GT
                $this: GET_VAR x type=kotlin.Int operator=null
                other: GET_VAR y type=kotlin.Double operator=null
            then: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR x type=kotlin.Int operator=null
              CONST String type=kotlin.String value=' > '
              GET_VAR y type=kotlin.Double operator=null
            if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
              arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                $this: CALL .compareTo type=kotlin.Int operator=null
                  $this: GET_VAR x type=kotlin.Int operator=null
                  other: GET_VAR y type=kotlin.Double operator=null
                other: CONST Int type=kotlin.Int value='0'
            then: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR x type=kotlin.Int operator=null
              CONST String type=kotlin.String value='.compareTo('
              GET_VAR y type=kotlin.Double operator=null
              CONST String type=kotlin.String value=') >= 0'
            else: CONST String type=kotlin.String value='OK'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          CALL .checkLess type=kotlin.String operator=null
            x: CONST Int type=kotlin.Int value='0'
            y: CONST Double type=kotlin.Double value='0.5'
