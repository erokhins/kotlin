MODULE <test-module>
  FILE /kt2768.kt
    FUN public fun </*0*/ T> assertEquals(/*0*/ a: T, /*1*/ b: T): kotlin.Unit
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR a type=T operator=null
              arg1: GET_VAR b type=T operator=null
          then: THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.AssertionError operator=null
              p0: STRING_CONCATENATION type=kotlin.String
                GET_VAR a type=T operator=null
                CONST String type=kotlin.String value=' != '
                GET_VAR b type=T operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val bytePos: kotlin.Byte = -128.toByte()
          CALL .toByte type=kotlin.Byte operator=null
            $this: CONST Int type=kotlin.Int value='128'
        CALL .assertEquals type=kotlin.Unit operator=null
          a: CONST Int type=kotlin.Int value='-128'
          b: CALL .toInt type=kotlin.Int operator=null
            $this: GET_VAR bytePos type=kotlin.Byte operator=null
        VAR val shortPos: kotlin.Short = -32768.toShort()
          CALL .toShort type=kotlin.Short operator=null
            $this: CONST Int type=kotlin.Int value='32768'
        CALL .assertEquals type=kotlin.Unit operator=null
          a: CONST Int type=kotlin.Int value='-32768'
          b: CALL .toInt type=kotlin.Int operator=null
            $this: GET_VAR shortPos type=kotlin.Short operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          a: CALL .toString type=kotlin.String operator=null
            $this: CALL .toByte type=kotlin.Byte operator=null
              $this: CONST Int type=kotlin.Int value='-128'
          b: CONST String type=kotlin.String value='-128'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
