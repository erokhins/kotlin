MODULE <test-module>
  FILE /comparisonWithNaN.kt
    FUN public fun _assert(/*0*/ condition: kotlin.Boolean): kotlin.Unit
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: GET_VAR condition type=kotlin.Boolean operator=null
          then: THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.AssertionError operator=null
              p0: CONST String type=kotlin.String value='Fail'
    FUN public fun _assertFalse(/*0*/ condition: kotlin.Boolean): kotlin.Unit
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=_assertFalse
          CALL ._assert type=kotlin.Unit operator=null
            condition: CALL .not type=kotlin.Boolean operator=EXCL
              $this: GET_VAR condition type=kotlin.Boolean operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var dnan: kotlin.Double
          GET_BACKING_FIELD NaN type=kotlin.Double operator=GET_PROPERTY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .LT0 type=kotlin.Boolean operator=LT
            arg0: CALL .compareTo type=kotlin.Int operator=LT
              $this: CALL .nanoTime type=kotlin.Long operator=null
              other: CONST Int type=kotlin.Int value='0'
          then: SET_VAR dnan type=kotlin.Unit operator=EQ
            CONST Double type=kotlin.Double value='3.14'
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .LT0 type=kotlin.Boolean operator=LT
            arg0: CALL .compareTo type=kotlin.Int operator=LT
              $this: CONST Double type=kotlin.Double value='0.0'
              other: GET_VAR dnan type=kotlin.Double operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .GT0 type=kotlin.Boolean operator=GT
            arg0: CALL .compareTo type=kotlin.Int operator=GT
              $this: CONST Double type=kotlin.Double value='0.0'
              other: GET_VAR dnan type=kotlin.Double operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .LTEQ0 type=kotlin.Boolean operator=LTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=LTEQ
              $this: CONST Double type=kotlin.Double value='0.0'
              other: GET_VAR dnan type=kotlin.Double operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
              $this: CONST Double type=kotlin.Double value='0.0'
              other: GET_VAR dnan type=kotlin.Double operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CONST Double type=kotlin.Double value='0.0'
            arg1: GET_VAR dnan type=kotlin.Double operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .LT0 type=kotlin.Boolean operator=LT
            arg0: CALL .compareTo type=kotlin.Int operator=LT
              $this: GET_VAR dnan type=kotlin.Double operator=null
              other: CONST Double type=kotlin.Double value='0.0'
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .GT0 type=kotlin.Boolean operator=GT
            arg0: CALL .compareTo type=kotlin.Int operator=GT
              $this: GET_VAR dnan type=kotlin.Double operator=null
              other: CONST Double type=kotlin.Double value='0.0'
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .LTEQ0 type=kotlin.Boolean operator=LTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=LTEQ
              $this: GET_VAR dnan type=kotlin.Double operator=null
              other: CONST Double type=kotlin.Double value='0.0'
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
              $this: GET_VAR dnan type=kotlin.Double operator=null
              other: CONST Double type=kotlin.Double value='0.0'
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR dnan type=kotlin.Double operator=null
            arg1: CONST Double type=kotlin.Double value='0.0'
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .LT0 type=kotlin.Boolean operator=LT
            arg0: CALL .compareTo type=kotlin.Int operator=LT
              $this: GET_VAR dnan type=kotlin.Double operator=null
              other: GET_VAR dnan type=kotlin.Double operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .GT0 type=kotlin.Boolean operator=GT
            arg0: CALL .compareTo type=kotlin.Int operator=GT
              $this: GET_VAR dnan type=kotlin.Double operator=null
              other: GET_VAR dnan type=kotlin.Double operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .LTEQ0 type=kotlin.Boolean operator=LTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=LTEQ
              $this: GET_VAR dnan type=kotlin.Double operator=null
              other: GET_VAR dnan type=kotlin.Double operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
              $this: GET_VAR dnan type=kotlin.Double operator=null
              other: GET_VAR dnan type=kotlin.Double operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR dnan type=kotlin.Double operator=null
            arg1: GET_VAR dnan type=kotlin.Double operator=null
        CALL ._assert type=kotlin.Unit operator=null
          condition: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .compareTo type=kotlin.Int operator=null
              $this: CONST Double type=kotlin.Double value='0.0'
              other: GET_VAR dnan type=kotlin.Double operator=null
            arg1: CONST Int type=kotlin.Int value='-1'
        CALL ._assert type=kotlin.Unit operator=null
          condition: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .compareTo type=kotlin.Int operator=null
              $this: GET_VAR dnan type=kotlin.Double operator=null
              other: CONST Double type=kotlin.Double value='0.0'
            arg1: CONST Int type=kotlin.Int value='1'
        CALL ._assert type=kotlin.Unit operator=null
          condition: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .compareTo type=kotlin.Int operator=null
              $this: GET_VAR dnan type=kotlin.Double operator=null
              other: GET_VAR dnan type=kotlin.Double operator=null
            arg1: CONST Int type=kotlin.Int value='0'
        VAR var fnan: kotlin.Float
          GET_BACKING_FIELD NaN type=kotlin.Float operator=GET_PROPERTY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .LT0 type=kotlin.Boolean operator=LT
            arg0: CALL .compareTo type=kotlin.Int operator=LT
              $this: CALL .nanoTime type=kotlin.Long operator=null
              other: CONST Int type=kotlin.Int value='0'
          then: SET_VAR fnan type=kotlin.Unit operator=EQ
            CONST Float type=kotlin.Float value='3.14'
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .LT0 type=kotlin.Boolean operator=LT
            arg0: CALL .compareTo type=kotlin.Int operator=LT
              $this: CONST Float type=kotlin.Float value='0.0'
              other: GET_VAR fnan type=kotlin.Float operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .GT0 type=kotlin.Boolean operator=GT
            arg0: CALL .compareTo type=kotlin.Int operator=GT
              $this: CONST Float type=kotlin.Float value='0.0'
              other: GET_VAR fnan type=kotlin.Float operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .LTEQ0 type=kotlin.Boolean operator=LTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=LTEQ
              $this: CONST Float type=kotlin.Float value='0.0'
              other: GET_VAR fnan type=kotlin.Float operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
              $this: CONST Float type=kotlin.Float value='0.0'
              other: GET_VAR fnan type=kotlin.Float operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CONST Float type=kotlin.Float value='0.0'
            arg1: GET_VAR fnan type=kotlin.Float operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .LT0 type=kotlin.Boolean operator=LT
            arg0: CALL .compareTo type=kotlin.Int operator=LT
              $this: GET_VAR fnan type=kotlin.Float operator=null
              other: CONST Float type=kotlin.Float value='0.0'
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .GT0 type=kotlin.Boolean operator=GT
            arg0: CALL .compareTo type=kotlin.Int operator=GT
              $this: GET_VAR fnan type=kotlin.Float operator=null
              other: CONST Float type=kotlin.Float value='0.0'
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .LTEQ0 type=kotlin.Boolean operator=LTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=LTEQ
              $this: GET_VAR fnan type=kotlin.Float operator=null
              other: CONST Float type=kotlin.Float value='0.0'
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
              $this: GET_VAR fnan type=kotlin.Float operator=null
              other: CONST Float type=kotlin.Float value='0.0'
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR fnan type=kotlin.Float operator=null
            arg1: CONST Float type=kotlin.Float value='0.0'
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .LT0 type=kotlin.Boolean operator=LT
            arg0: CALL .compareTo type=kotlin.Int operator=LT
              $this: GET_VAR fnan type=kotlin.Float operator=null
              other: GET_VAR fnan type=kotlin.Float operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .GT0 type=kotlin.Boolean operator=GT
            arg0: CALL .compareTo type=kotlin.Int operator=GT
              $this: GET_VAR fnan type=kotlin.Float operator=null
              other: GET_VAR fnan type=kotlin.Float operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .LTEQ0 type=kotlin.Boolean operator=LTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=LTEQ
              $this: GET_VAR fnan type=kotlin.Float operator=null
              other: GET_VAR fnan type=kotlin.Float operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
            arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
              $this: GET_VAR fnan type=kotlin.Float operator=null
              other: GET_VAR fnan type=kotlin.Float operator=null
        CALL ._assertFalse type=kotlin.Unit operator=null
          condition: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR fnan type=kotlin.Float operator=null
            arg1: GET_VAR fnan type=kotlin.Float operator=null
        CALL ._assert type=kotlin.Unit operator=null
          condition: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .compareTo type=kotlin.Int operator=null
              $this: CONST Double type=kotlin.Double value='0.0'
              other: GET_VAR fnan type=kotlin.Float operator=null
            arg1: CONST Int type=kotlin.Int value='-1'
        CALL ._assert type=kotlin.Unit operator=null
          condition: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .compareTo type=kotlin.Int operator=null
              $this: GET_VAR fnan type=kotlin.Float operator=null
              other: CONST Double type=kotlin.Double value='0.0'
            arg1: CONST Int type=kotlin.Int value='1'
        CALL ._assert type=kotlin.Unit operator=null
          condition: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .compareTo type=kotlin.Int operator=null
              $this: GET_VAR fnan type=kotlin.Float operator=null
              other: GET_VAR fnan type=kotlin.Float operator=null
            arg1: CONST Int type=kotlin.Int value='0'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
