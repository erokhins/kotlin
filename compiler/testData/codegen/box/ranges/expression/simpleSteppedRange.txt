MODULE <test-module>
  FILE /simpleSteppedRange.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val list1: java.util.ArrayList<kotlin.Int>
          CALL .<init> type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val range1: kotlin.ranges.IntProgression
          CALL .step type=kotlin.ranges.IntProgression operator=null
            $receiver: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
              $this: CONST Int type=kotlin.Int value='3'
              other: CONST Int type=kotlin.Int value='9'
            step: CONST Int type=kotlin.Int value='2'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR range1 type=kotlin.ranges.IntProgression operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL .add type=kotlin.Boolean operator=null
                  $this: GET_VAR list1 type=java.util.ArrayList<kotlin.Int> operator=null
                  element: GET_VAR i type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GT0 type=kotlin.Boolean operator=GT
                    arg0: CALL .compareTo type=kotlin.Int operator=GT
                      $this: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR list1 type=java.util.ArrayList<kotlin.Int> operator=null
                      other: CONST Int type=kotlin.Int value='23'
                  then: BREAK label=null loop.label=null depth=0
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR list1 type=java.util.ArrayList<kotlin.Int> operator=null
              arg1: CALL .listOf type=kotlin.collections.List<kotlin.Int> operator=null
                elements: VARARG type=Array<out Int> varargElementType=Int
                  CONST Int type=kotlin.Int value='3'
                  CONST Int type=kotlin.Int value='5'
                  CONST Int type=kotlin.Int value='7'
                  CONST Int type=kotlin.Int value='9'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from=box
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Wrong elements for 3..9 step 2: '
                GET_VAR list1 type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val list2: java.util.ArrayList<kotlin.Int>
          CALL .<init> type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val range2: kotlin.ranges.IntProgression
          CALL .step type=kotlin.ranges.IntProgression operator=null
            $receiver: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
              $this: CALL .toByte type=kotlin.Byte operator=null
                $this: CONST Int type=kotlin.Int value='3'
              other: CALL .toByte type=kotlin.Byte operator=null
                $this: CONST Int type=kotlin.Int value='9'
            step: CONST Int type=kotlin.Int value='2'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp1_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR range2 type=kotlin.ranges.IntProgression operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp1_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp1_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL .add type=kotlin.Boolean operator=null
                  $this: GET_VAR list2 type=java.util.ArrayList<kotlin.Int> operator=null
                  element: GET_VAR i type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GT0 type=kotlin.Boolean operator=GT
                    arg0: CALL .compareTo type=kotlin.Int operator=GT
                      $this: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR list2 type=java.util.ArrayList<kotlin.Int> operator=null
                      other: CONST Int type=kotlin.Int value='23'
                  then: BREAK label=null loop.label=null depth=0
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR list2 type=java.util.ArrayList<kotlin.Int> operator=null
              arg1: CALL .listOf type=kotlin.collections.List<kotlin.Int> operator=null
                elements: VARARG type=Array<out Int> varargElementType=Int
                  CONST Int type=kotlin.Int value='3'
                  CONST Int type=kotlin.Int value='5'
                  CONST Int type=kotlin.Int value='7'
                  CONST Int type=kotlin.Int value='9'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from=box
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Wrong elements for 3.toByte()..9.toByte() step 2: '
                GET_VAR list2 type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val list3: java.util.ArrayList<kotlin.Int>
          CALL .<init> type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val range3: kotlin.ranges.IntProgression
          CALL .step type=kotlin.ranges.IntProgression operator=null
            $receiver: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
              $this: CALL .toShort type=kotlin.Short operator=null
                $this: CONST Int type=kotlin.Int value='3'
              other: CALL .toShort type=kotlin.Short operator=null
                $this: CONST Int type=kotlin.Int value='9'
            step: CONST Int type=kotlin.Int value='2'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp2_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR range3 type=kotlin.ranges.IntProgression operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp2_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp2_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL .add type=kotlin.Boolean operator=null
                  $this: GET_VAR list3 type=java.util.ArrayList<kotlin.Int> operator=null
                  element: GET_VAR i type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GT0 type=kotlin.Boolean operator=GT
                    arg0: CALL .compareTo type=kotlin.Int operator=GT
                      $this: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR list3 type=java.util.ArrayList<kotlin.Int> operator=null
                      other: CONST Int type=kotlin.Int value='23'
                  then: BREAK label=null loop.label=null depth=0
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR list3 type=java.util.ArrayList<kotlin.Int> operator=null
              arg1: CALL .listOf type=kotlin.collections.List<kotlin.Int> operator=null
                elements: VARARG type=Array<out Int> varargElementType=Int
                  CONST Int type=kotlin.Int value='3'
                  CONST Int type=kotlin.Int value='5'
                  CONST Int type=kotlin.Int value='7'
                  CONST Int type=kotlin.Int value='9'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from=box
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Wrong elements for 3.toShort()..9.toShort() step 2: '
                GET_VAR list3 type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val list4: java.util.ArrayList<kotlin.Long>
          CALL .<init> type=java.util.ArrayList<kotlin.Long> operator=null
        VAR val range4: kotlin.ranges.LongProgression
          CALL .step type=kotlin.ranges.LongProgression operator=null
            $receiver: CALL .rangeTo type=kotlin.ranges.LongRange operator=RANGE
              $this: CALL .toLong type=kotlin.Long operator=null
                $this: CONST Int type=kotlin.Int value='3'
              other: CALL .toLong type=kotlin.Long operator=null
                $this: CONST Int type=kotlin.Int value='9'
            step: CALL .toLong type=kotlin.Long operator=null
              $this: CONST Int type=kotlin.Int value='2'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp3_iterator: kotlin.collections.LongIterator
            CALL .iterator type=kotlin.collections.LongIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR range4 type=kotlin.ranges.LongProgression operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp3_iterator type=kotlin.collections.LongIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Long
                CALL .next type=kotlin.Long operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp3_iterator type=kotlin.collections.LongIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL .add type=kotlin.Boolean operator=null
                  $this: GET_VAR list4 type=java.util.ArrayList<kotlin.Long> operator=null
                  element: GET_VAR i type=kotlin.Long operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GT0 type=kotlin.Boolean operator=GT
                    arg0: CALL .compareTo type=kotlin.Int operator=GT
                      $this: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR list4 type=java.util.ArrayList<kotlin.Long> operator=null
                      other: CONST Int type=kotlin.Int value='23'
                  then: BREAK label=null loop.label=null depth=0
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR list4 type=java.util.ArrayList<kotlin.Long> operator=null
              arg1: CALL .listOf type=kotlin.collections.List<kotlin.Long> operator=null
                elements: VARARG type=Array<out Long> varargElementType=Long
                  CONST Long type=kotlin.Long value='3'
                  CONST Long type=kotlin.Long value='5'
                  CONST Long type=kotlin.Long value='7'
                  CONST Long type=kotlin.Long value='9'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from=box
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Wrong elements for 3.toLong()..9.toLong() step 2.toLong(): '
                GET_VAR list4 type=java.util.ArrayList<kotlin.Long> operator=null
        VAR val list5: java.util.ArrayList<kotlin.Char>
          CALL .<init> type=java.util.ArrayList<kotlin.Char> operator=null
        VAR val range5: kotlin.ranges.CharProgression
          CALL .step type=kotlin.ranges.CharProgression operator=null
            $receiver: CALL .rangeTo type=kotlin.ranges.CharRange operator=RANGE
              $this: CONST Char type=kotlin.Char value='c'
              other: CONST Char type=kotlin.Char value='g'
            step: CONST Int type=kotlin.Int value='2'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp4_iterator: kotlin.collections.CharIterator
            CALL .iterator type=kotlin.collections.CharIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR range5 type=kotlin.ranges.CharProgression operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp4_iterator type=kotlin.collections.CharIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Char
                CALL .next type=kotlin.Char operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp4_iterator type=kotlin.collections.CharIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL .add type=kotlin.Boolean operator=null
                  $this: GET_VAR list5 type=java.util.ArrayList<kotlin.Char> operator=null
                  element: GET_VAR i type=kotlin.Char operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GT0 type=kotlin.Boolean operator=GT
                    arg0: CALL .compareTo type=kotlin.Int operator=GT
                      $this: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR list5 type=java.util.ArrayList<kotlin.Char> operator=null
                      other: CONST Int type=kotlin.Int value='23'
                  then: BREAK label=null loop.label=null depth=0
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR list5 type=java.util.ArrayList<kotlin.Char> operator=null
              arg1: CALL .listOf type=kotlin.collections.List<kotlin.Char> operator=null
                elements: VARARG type=Array<out Char> varargElementType=Char
                  CONST Char type=kotlin.Char value='c'
                  CONST Char type=kotlin.Char value='e'
                  CONST Char type=kotlin.Char value='g'
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from=box
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Wrong elements for 'c'..'g' step 2: '
                GET_VAR list5 type=java.util.ArrayList<kotlin.Char> operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
