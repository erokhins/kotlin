MODULE <test-module>
  FILE /kt12983_forInSpecificCollectionIndices.kt
    CLASS CLASS BaseGeneric
      CONSTRUCTOR public constructor BaseGeneric</*0*/ T>(/*0*/ t: T)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD t type=kotlin.Unit operator=null
            receiver: THIS public abstract class BaseGeneric</*0*/ T> type=BaseGeneric<T>
            value: GET_VAR t type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=BaseGeneric
      PROPERTY public final val t: T
        EXPRESSION_BODY
          GET_VAR t type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public abstract fun iterate(): kotlin.Unit
    CLASS CLASS Derived
      CONSTRUCTOR public constructor Derived(/*0*/ t: kotlin.collections.List<kotlin.Int>)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL BaseGeneric
            t: GET_VAR t type=kotlin.collections.List<kotlin.Int> operator=null
          INSTANCE_INITIALIZER_CALL classDescriptor=Derived
      PROPERTY public final var test: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='0'
      FUN public open override /*1*/ fun iterate(): kotlin.Unit
        BLOCK_BODY
          CALL .<set-test> type=kotlin.Unit operator=EQ
            $this: THIS public final class Derived : BaseGeneric<kotlin.collections.List<kotlin.Int>> type=Derived
            <set-?>: CONST Int type=kotlin.Int value='0'
          BLOCK type=kotlin.Unit operator=FOR_LOOP
            VAR val tmp0_iterator: kotlin.collections.IntIterator
              CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
                $this: CALL .<get-indices> type=kotlin.ranges.IntRange operator=GET_PROPERTY
                  $receiver: CALL .<get-t> type=kotlin.collections.List<kotlin.Int> operator=GET_PROPERTY
                    $this: THIS public final class Derived : BaseGeneric<kotlin.collections.List<kotlin.Int>> type=Derived
            WHILE label=null operator=FOR_LOOP_INNER_WHILE
              condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
                $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
                VAR val i: kotlin.Int
                  CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                    $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
                BLOCK type=kotlin.Unit operator=null
                  CALL .<set-test> type=kotlin.Unit operator=EQ
                    $this: THIS public final class Derived : BaseGeneric<kotlin.collections.List<kotlin.Int>> type=Derived
                    <set-?>: CALL .plus type=kotlin.Int operator=PLUS
                      $this: CALL .times type=kotlin.Int operator=MUL
                        $this: CALL .<get-test> type=kotlin.Int operator=GET_PROPERTY
                          $this: THIS public final class Derived : BaseGeneric<kotlin.collections.List<kotlin.Int>> type=Derived
                        other: CONST Int type=kotlin.Int value='10'
                      other: CALL .plus type=kotlin.Int operator=PLUS
                        $this: GET_VAR i type=kotlin.Int operator=null
                        other: CONST Int type=kotlin.Int value='1'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val t: Derived
          CALL .<init> type=Derived operator=null
            t: CALL .listOf type=kotlin.collections.List<kotlin.Int> operator=null
              elements: VARARG type=Array<out Int> varargElementType=Int
                CONST Int type=kotlin.Int value='1'
                CONST Int type=kotlin.Int value='2'
                CONST Int type=kotlin.Int value='3'
                CONST Int type=kotlin.Int value='4'
        CALL .iterate type=kotlin.Unit operator=null
          $this: GET_VAR t type=Derived operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .<get-test> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR t type=Derived operator=null
              arg1: CONST Int type=kotlin.Int value='1234'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail: '
              CALL .<get-test> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR t type=Derived operator=null
