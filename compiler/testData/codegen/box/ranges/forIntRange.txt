MODULE <test-module>
  FILE /forIntRange.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: kotlin.Array<kotlin.String?>
          CALL .arrayOfNulls type=kotlin.Array<kotlin.String?> operator=null
            size: CONST Int type=kotlin.Int value='3'
        CALL .set type=kotlin.Unit operator=EQ
          $this: GET_VAR a type=kotlin.Array<kotlin.String?> operator=null
          index: CONST Int type=kotlin.Int value='0'
          value: CONST String type=kotlin.String value='a'
        CALL .set type=kotlin.Unit operator=EQ
          $this: GET_VAR a type=kotlin.Array<kotlin.String?> operator=null
          index: CONST Int type=kotlin.Int value='1'
          value: CONST String type=kotlin.String value='b'
        CALL .set type=kotlin.Unit operator=EQ
          $this: GET_VAR a type=kotlin.Array<kotlin.String?> operator=null
          index: CONST Int type=kotlin.Int value='2'
          value: CONST String type=kotlin.String value='c'
        VAR var result: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .<get-indices> type=kotlin.ranges.IntRange operator=GET_PROPERTY
                $receiver: GET_VAR a type=kotlin.Array<kotlin.String?> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR result type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.Int operator=PLUSEQ
                    $this: GET_VAR result type=kotlin.Int operator=PLUSEQ
                    other: GET_VAR i type=kotlin.Int operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR result type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='3'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='FAIL'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
