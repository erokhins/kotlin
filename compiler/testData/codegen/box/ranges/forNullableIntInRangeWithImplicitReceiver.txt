MODULE <test-module>
  FILE /forNullableIntInRangeWithImplicitReceiver.kt
    FUN public fun suppressBoxingOptimization(/*0*/ ni: kotlin.Int?): kotlin.Unit
      BLOCK_BODY
    FUN public fun kotlin.Int.digitsUpto(/*0*/ end: kotlin.Int): kotlin.Int
      BLOCK_BODY
        VAR var sum: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=null
                $this: $RECEIVER of: digitsUpto type=kotlin.Int
                other: GET_VAR end type=kotlin.Int operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int?
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL .suppressBoxingOptimization type=kotlin.Unit operator=null
                  ni: GET_VAR i type=kotlin.Int? operator=null
                SET_VAR sum type=kotlin.Unit operator=EQ
                  CALL .plus type=kotlin.Int operator=PLUS
                    $this: CALL .times type=kotlin.Int operator=MUL
                      $this: GET_VAR sum type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='10'
                    other: BLOCK type=kotlin.Int operator=EXCLEXCL
                      VAR val tmp1_notnull: kotlin.Int?
                        GET_VAR i type=kotlin.Int? operator=null
                      WHEN type=kotlin.Int operator=null
                        if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                          arg0: GET_VAR tmp1_notnull type=kotlin.Int? operator=null
                          arg1: CONST Null type=kotlin.Nothing? value='null'
                        then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                        else: GET_VAR tmp1_notnull type=kotlin.Int? operator=null
        RETURN type=kotlin.Nothing from=digitsUpto
          GET_VAR sum type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1234'
          actual: CALL .digitsUpto type=kotlin.Int operator=null
            $receiver: CONST Int type=kotlin.Int value='1'
            end: CONST Int type=kotlin.Int value='4'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
