MODULE <test-module>
  FILE /inheritedImplementations.kt
    CLASS CLASS SetStringImpl
      CONSTRUCTOR public constructor SetStringImpl()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=SetStringImpl
      FUN public final fun add(/*0*/ s: kotlin.String): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=add
            CONST Boolean type=kotlin.Boolean value='false'
      FUN public final fun remove(/*0*/ o: kotlin.String): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=remove
            CONST Boolean type=kotlin.Boolean value='false'
      FUN public final fun clear(): kotlin.Unit
        BLOCK_BODY
    CLASS CLASS S
      CONSTRUCTOR public constructor S()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL SetStringImpl
          INSTANCE_INITIALIZER_CALL classDescriptor=S
      PROPERTY public open override /*1*/ val size: kotlin.Int
        PROPERTY_GETTER public open override /*1*/ fun <get-size>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-size>
              CONST Int type=kotlin.Int value='0'
      FUN public open override /*1*/ fun isEmpty(): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=isEmpty
            CONST Boolean type=kotlin.Boolean value='true'
      FUN public open override /*1*/ fun contains(/*0*/ o: kotlin.String): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=contains
            CONST Boolean type=kotlin.Boolean value='false'
      FUN public open override /*1*/ fun iterator(): kotlin.collections.Iterator<kotlin.String>
        BLOCK_BODY
          BLOCK type=kotlin.Nothing operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.Nothing?
              CONST Null type=kotlin.Nothing? value='null'
            WHEN type=kotlin.Nothing operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
      FUN public open override /*1*/ fun containsAll(/*0*/ c: kotlin.collections.Collection<kotlin.String>): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=containsAll
            CONST Boolean type=kotlin.Boolean value='false'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val s: java.util.Set<kotlin.String>
          TYPE_OP operator=CAST typeOperand=java.util.Set<kotlin.String>
            CALL .<init> type=S operator=null
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR s type=java.util.Set<kotlin.String> operator=null
          element: CONST String type=kotlin.String value=''
        CALL .remove type=kotlin.Boolean operator=null
          $this: GET_VAR s type=java.util.Set<kotlin.String> operator=null
          element: CONST String type=kotlin.String value=''
        CALL .clear type=kotlin.Unit operator=null
          $this: GET_VAR s type=java.util.Set<kotlin.String> operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
