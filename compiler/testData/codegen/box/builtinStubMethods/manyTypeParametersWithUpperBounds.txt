MODULE <test-module>
  FILE /manyTypeParametersWithUpperBounds.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A</*0*/ U : kotlin.Number, /*1*/ V : U, /*2*/ W : V>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public open override /*1*/ val size: kotlin.Int
        PROPERTY_GETTER public open override /*1*/ fun <get-size>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-size>
              CONST Int type=kotlin.Int value='0'
      FUN public open override /*1*/ fun isEmpty(): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=isEmpty
            CONST Boolean type=kotlin.Boolean value='true'
      FUN public open override /*1*/ fun contains(/*0*/ o: W): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=contains
            CONST Boolean type=kotlin.Boolean value='false'
      FUN public open override /*1*/ fun iterator(): kotlin.collections.Iterator<W>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=iterator
            CALL .iterator type=kotlin.collections.MutableIterator<W!> operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.collections.MutableSet<W!>
                TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.collections.Set<W!>
                  CALL .emptySet type=kotlin.collections.(Mutable)Set<W!>! operator=null
      FUN public open override /*1*/ fun containsAll(/*0*/ c: kotlin.collections.Collection<W>): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=containsAll
            CALL .isEmpty type=kotlin.Boolean operator=null
              $this: GET_VAR c type=kotlin.collections.Collection<W> operator=null
    FUN public fun expectUoe(/*0*/ block: () -> kotlin.Any): kotlin.Unit
      BLOCK_BODY
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .invoke type=kotlin.Any operator=INVOKE
              $this: GET_VAR block type=() -> kotlin.Any operator=VARIABLE_AS_FUNCTION
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.AssertionError operator=null
          catch e: BLOCK type=kotlin.Unit operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: java.util.Set<kotlin.Int>
          TYPE_OP operator=CAST typeOperand=java.util.Set<kotlin.Int>
            CALL .<init> type=A<kotlin.Int, kotlin.Int, kotlin.Int> operator=null
        CALL .iterator type=kotlin.collections.MutableIterator<kotlin.Int!> operator=null
          $this: GET_VAR a type=java.util.Set<kotlin.Int> operator=null
        CALL .expectUoe type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Boolean operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .add type=kotlin.Boolean operator=null
                    $this: GET_VAR a type=java.util.Set<kotlin.Int> operator=null
                    element: CONST Int type=kotlin.Int value='42'
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Boolean operator=LAMBDA
        CALL .expectUoe type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Boolean operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .remove type=kotlin.Boolean operator=null
                    $this: GET_VAR a type=java.util.Set<kotlin.Int> operator=null
                    element: CONST Int type=kotlin.Int value='42'
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Boolean operator=LAMBDA
        CALL .expectUoe type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Boolean operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .addAll type=kotlin.Boolean operator=null
                    $this: GET_VAR a type=java.util.Set<kotlin.Int> operator=null
                    elements: GET_VAR a type=java.util.Set<kotlin.Int> operator=null
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Boolean operator=LAMBDA
        CALL .expectUoe type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Boolean operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .removeAll type=kotlin.Boolean operator=null
                    $this: GET_VAR a type=java.util.Set<kotlin.Int> operator=null
                    elements: GET_VAR a type=java.util.Set<kotlin.Int> operator=null
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Boolean operator=LAMBDA
        CALL .expectUoe type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Boolean operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .retainAll type=kotlin.Boolean operator=null
                    $this: GET_VAR a type=java.util.Set<kotlin.Int> operator=null
                    elements: GET_VAR a type=java.util.Set<kotlin.Int> operator=null
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Boolean operator=LAMBDA
        CALL .expectUoe type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .clear type=kotlin.Unit operator=null
                    $this: GET_VAR a type=java.util.Set<kotlin.Int> operator=null
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
