MODULE <test-module>
  FILE /ListIterator.kt
    CLASS CLASS MyListIterator
      CONSTRUCTOR public constructor MyListIterator</*0*/ T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=MyListIterator
      FUN public open override /*1*/ fun next(): T
        BLOCK_BODY
          BLOCK type=kotlin.Nothing operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.Nothing?
              CONST Null type=kotlin.Nothing? value='null'
            WHEN type=kotlin.Nothing operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
      FUN public open override /*1*/ fun hasNext(): kotlin.Boolean
        BLOCK_BODY
          BLOCK type=kotlin.Nothing operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.Nothing?
              CONST Null type=kotlin.Nothing? value='null'
            WHEN type=kotlin.Nothing operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
      FUN public open override /*1*/ fun hasPrevious(): kotlin.Boolean
        BLOCK_BODY
          BLOCK type=kotlin.Nothing operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.Nothing?
              CONST Null type=kotlin.Nothing? value='null'
            WHEN type=kotlin.Nothing operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
      FUN public open override /*1*/ fun previous(): T
        BLOCK_BODY
          BLOCK type=kotlin.Nothing operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.Nothing?
              CONST Null type=kotlin.Nothing? value='null'
            WHEN type=kotlin.Nothing operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
      FUN public open override /*1*/ fun nextIndex(): kotlin.Int
        BLOCK_BODY
          BLOCK type=kotlin.Nothing operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.Nothing?
              CONST Null type=kotlin.Nothing? value='null'
            WHEN type=kotlin.Nothing operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
      FUN public open override /*1*/ fun previousIndex(): kotlin.Int
        BLOCK_BODY
          BLOCK type=kotlin.Nothing operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.Nothing?
              CONST Null type=kotlin.Nothing? value='null'
            WHEN type=kotlin.Nothing operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun expectUoe(/*0*/ block: () -> kotlin.Any): kotlin.Unit
      BLOCK_BODY
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .invoke type=kotlin.Any operator=INVOKE
              $this: GET_VAR block type=() -> kotlin.Any operator=VARIABLE_AS_FUNCTION
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.AssertionError operator=null
          catch e: BLOCK type=kotlin.Unit operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val list: java.util.ListIterator<kotlin.String>
          TYPE_OP operator=CAST typeOperand=java.util.ListIterator<kotlin.String>
            CALL .<init> type=MyListIterator<kotlin.String> operator=null
        CALL .expectUoe type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .set type=kotlin.Unit operator=null
                    $this: GET_VAR list type=java.util.ListIterator<kotlin.String> operator=null
                    p0: CONST String type=kotlin.String value=''
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
        CALL .expectUoe type=kotlin.Unit operator=null
          block: BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .add type=kotlin.Unit operator=null
                    $this: GET_VAR list type=java.util.ListIterator<kotlin.String> operator=null
                    p0: CONST String type=kotlin.String value=''
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
