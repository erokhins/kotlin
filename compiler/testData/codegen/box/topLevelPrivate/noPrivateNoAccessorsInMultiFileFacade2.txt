MODULE <test-module>
  FILE /noPrivateNoAccessorsInMultiFileFacade2.kt
    PROPERTY public var prop: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value='fail'
      PROPERTY_SETTER private fun <set-prop>(/*0*/ <set-?>: kotlin.String): kotlin.Unit
    FUN private fun test(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=test
          CONST String type=kotlin.String value='K'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val clazz: java.lang.Class<*>!
          CALL .forName type=java.lang.Class<*>! operator=null
            p0: CONST String type=kotlin.String value='test.TestKt'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='2'
          actual: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
            $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.reflect.Method!>
              TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Method!>
                CALL .<get-declaredMethods> type=kotlin.Array<(out) java.lang.reflect.Method!>! operator=GET_PROPERTY
                  $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
                    GET_VAR clazz type=java.lang.Class<*>! operator=null
          message: CONST String type=kotlin.String value='Facade should have only box method'
        VAR val methods: kotlin.collections.List<kotlin.String!>
          CALL .map type=kotlin.collections.List<kotlin.String!> operator=null
            $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Method!>
              CALL .<get-declaredMethods> type=kotlin.Array<(out) java.lang.reflect.Method!>! operator=GET_PROPERTY
                $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
                  GET_VAR clazz type=java.lang.Class<*>! operator=null
            transform: BLOCK type=(java.lang.reflect.Method!) -> kotlin.String! operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: java.lang.reflect.Method!): kotlin.String!
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-name> type=kotlin.String! operator=GET_PROPERTY
                      $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                        GET_VAR it type=java.lang.reflect.Method! operator=null
              CALLABLE_REFERENCE <anonymous> type=(java.lang.reflect.Method!) -> kotlin.String! operator=LAMBDA
        CALL .assertTrue type=kotlin.Unit operator=null
          actual: CALL .contains type=kotlin.Boolean operator=null
            $this: GET_VAR methods type=kotlin.collections.List<kotlin.String!> operator=null
            element: CONST String type=kotlin.String value='box'
          message: CONST String type=kotlin.String value='Facade should have box method'
        CALL .assertTrue type=kotlin.Unit operator=null
          actual: CALL .contains type=kotlin.Boolean operator=null
            $this: GET_VAR methods type=kotlin.collections.List<kotlin.String!> operator=null
            element: CONST String type=kotlin.String value='getProp'
          message: CONST String type=kotlin.String value='Facade should have box method'
        RETURN type=kotlin.Nothing from=box
          CALL .invoke type=kotlin.String operator=null
            $this: BLOCK type=() -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String
                BLOCK_BODY
                  CALL .<set-prop> type=kotlin.Unit operator=EQ
                    <set-?>: CONST String type=kotlin.String value='O'
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .plus type=kotlin.String operator=PLUS
                      $this: CALL .<get-prop> type=kotlin.String operator=GET_PROPERTY
                      other: CALL .test type=kotlin.String operator=null
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
