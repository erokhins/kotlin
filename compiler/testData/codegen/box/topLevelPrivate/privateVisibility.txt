MODULE <test-module>
  FILE /privateVisibility.kt
    PROPERTY private val prop: kotlin.String = "O"
      EXPRESSION_BODY
        CONST String type=kotlin.String value='O'
    FUN private fun test(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=test
          CONST String type=kotlin.String value='K'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val clazz: java.lang.Class<*>!
          CALL .forName type=java.lang.Class<*>! operator=null
            p0: CONST String type=kotlin.String value='test.PrivateVisibilityKt'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .isPrivate type=kotlin.Boolean operator=null
              p0: CALL .<get-modifiers> type=kotlin.Int operator=GET_PROPERTY
                $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                  CALL .getDeclaredMethod type=java.lang.reflect.Method! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
                      GET_VAR clazz type=java.lang.Class<*>! operator=null
                    p0: CONST String type=kotlin.String value='test'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Private top level function should be private'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .isPrivate type=kotlin.Boolean operator=null
              p0: CALL .<get-modifiers> type=kotlin.Int operator=GET_PROPERTY
                $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
                  CALL .getDeclaredField type=java.lang.reflect.Field! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
                      GET_VAR clazz type=java.lang.Class<*>! operator=null
                    p0: CONST String type=kotlin.String value='prop'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Backing field for private top level property should be private'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
