MODULE <test-module>
  FILE /switchOptimizationSparse.kt
    FUN public fun sparse(/*0*/ x: kotlin.Int): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=sparse
          BLOCK type=kotlin.Int operator=WHEN
            VAR val tmp0_subject: kotlin.Int
              CALL .times type=kotlin.Int operator=MUL
                $this: CALL .mod type=kotlin.Int operator=PERC
                  $this: GET_VAR x type=kotlin.Int operator=null
                  other: CONST Int type=kotlin.Int value='4'
                other: CONST Int type=kotlin.Int value='100'
            WHEN type=kotlin.Int operator=WHEN
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='100'
              then: CONST Int type=kotlin.Int value='1'
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='200'
              then: CONST Int type=kotlin.Int value='2'
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='300'
              then: CONST Int type=kotlin.Int value='3'
              else: CONST Int type=kotlin.Int value='4'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CALL .joinToString type=kotlin.String operator=null
            $receiver: CALL .map type=kotlin.collections.List<kotlin.Int> operator=null
              $receiver: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='0'
                other: CONST Int type=kotlin.Int value='3'
              transform: CALLABLE_REFERENCE sparse type=kotlin.reflect.KFunction1<kotlin.Int, kotlin.Int> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR result type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='4, 1, 2, 3'
          then: RETURN type=kotlin.Nothing from=box
            CALL .plus type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='sparse:'
              other: GET_VAR result type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
