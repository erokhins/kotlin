MODULE <test-module>
  FILE /switchOptimizationDense.kt
    FUN public fun dense(/*0*/ x: kotlin.Int): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=dense
          BLOCK type=kotlin.Int operator=WHEN
            VAR val tmp0_subject: kotlin.Int
              GET_VAR x type=kotlin.Int operator=null
            WHEN type=kotlin.Int operator=WHEN
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='-4'
              then: CONST Int type=kotlin.Int value='9'
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='-1'
              then: CONST Int type=kotlin.Int value='10'
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='0'
              then: CONST Int type=kotlin.Int value='11'
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='1'
              then: CONST Int type=kotlin.Int value='12'
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='4'
              then: CONST Int type=kotlin.Int value='13'
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='5'
              then: CONST Int type=kotlin.Int value='14'
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='6'
              then: CONST Int type=kotlin.Int value='15'
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='7'
              then: CONST Int type=kotlin.Int value='16'
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='8'
              then: CONST Int type=kotlin.Int value='17'
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='9'
              then: CONST Int type=kotlin.Int value='18'
              else: CONST Int type=kotlin.Int value='19'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CALL .joinToString type=kotlin.String operator=null
            $receiver: CALL .map type=kotlin.collections.List<kotlin.Int> operator=null
              $receiver: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='-5'
                other: CONST Int type=kotlin.Int value='10'
              transform: CALLABLE_REFERENCE dense type=kotlin.reflect.KFunction1<kotlin.Int, kotlin.Int> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR result type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='19, 9, 19, 19, 10, 11, 12, 19, 19, 13, 14, 15, 16, 17, 18, 19'
          then: RETURN type=kotlin.Nothing from=box
            CALL .plus type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='dense:'
              other: GET_VAR result type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
