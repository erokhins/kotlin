MODULE <test-module>
  FILE /nullableWhen.kt
    FUN public fun f(/*0*/ p: kotlin.Int?): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=f
          BLOCK type=kotlin.Int operator=WHEN
            VAR val tmp0_subject: kotlin.Int?
              GET_VAR p type=kotlin.Int? operator=null
            WHEN type=kotlin.Int operator=WHEN
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CONST Int type=kotlin.Int value='3'
              else: BLOCK type=kotlin.Int operator=EXCLEXCL
                VAR val tmp1_notnull: kotlin.Int?
                  GET_VAR p type=kotlin.Int? operator=null
                WHEN type=kotlin.Int operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp1_notnull type=kotlin.Int? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                  else: GET_VAR tmp1_notnull type=kotlin.Int? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .f type=kotlin.Int operator=null
                p: CONST Null type=kotlin.Nothing? value='null'
              arg1: CONST Int type=kotlin.Int value='3'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
