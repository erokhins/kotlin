MODULE <test-module>
  FILE /kt5448.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
    CLASS CLASS B
      CONSTRUCTOR public constructor B(/*0*/ items: kotlin.collections.Collection<A>)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD items type=kotlin.Unit operator=null
            receiver: THIS public final class B type=B
            value: GET_VAR items type=kotlin.collections.Collection<A> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      PROPERTY public final val items: kotlin.collections.Collection<A>
        EXPRESSION_BODY
          GET_VAR items type=kotlin.collections.Collection<A> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      FUN public final fun foo(/*0*/ p: kotlin.Int): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Boolean operator=WHEN
            VAR val tmp0_subject: kotlin.Int
              GET_VAR p type=kotlin.Int operator=null
            WHEN type=kotlin.Boolean operator=WHEN
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_subject type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='1'
              then: CALL .add type=kotlin.Boolean operator=null
                $this: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
                element: CONST Int type=kotlin.Int value='1'
      FUN public final fun bar(): B
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=bar
            CALL .<init> type=B operator=null
              items: CALL .map type=kotlin.collections.List<A> operator=null
                $receiver: CALL .listOf type=kotlin.collections.List<A> operator=null
                transform: BLOCK type=(A) -> A operator=LAMBDA
                  FUN local final fun <anonymous>(/*0*/ it: A): A
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                        GET_VAR it type=A operator=null
                  CALLABLE_REFERENCE <anonymous> type=(A) -> A operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .foo type=kotlin.Unit operator=null
          $this: CALL .<init> type=C operator=null
          p: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .isNotEmpty type=kotlin.Boolean operator=null
            $receiver: CALL .<get-items> type=kotlin.collections.Collection<A> operator=GET_PROPERTY
              $this: CALL .bar type=B operator=null
                $this: CALL .<init> type=C operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
