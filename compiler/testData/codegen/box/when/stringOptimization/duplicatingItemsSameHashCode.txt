MODULE <test-module>
  FILE /duplicatingItemsSameHashCode.kt
    FUN public fun foo(/*0*/ x: kotlin.String): kotlin.String
      BLOCK_BODY
        CALL .assert type=kotlin.Unit operator=null
          value: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .hashCode type=kotlin.Int operator=null
              $this: CONST String type=kotlin.String value='abz]'
            arg1: CALL .hashCode type=kotlin.Int operator=null
              $this: CONST String type=kotlin.String value='aby|'
        BLOCK type=kotlin.Nothing operator=WHEN
          VAR val tmp0_subject: kotlin.String
            GET_VAR x type=kotlin.String operator=null
          WHEN type=kotlin.Nothing operator=WHEN
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_subject type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='abz]'
            then: RETURN type=kotlin.Nothing from=foo
              CONST String type=kotlin.String value='abz'
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_subject type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='ghi'
            then: RETURN type=kotlin.Nothing from=foo
              CONST String type=kotlin.String value='ghi'
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_subject type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='aby|'
            then: RETURN type=kotlin.Nothing from=foo
              CONST String type=kotlin.String value='aby'
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_subject type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='abz]'
            then: RETURN type=kotlin.Nothing from=foo
              CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from=foo
          CONST String type=kotlin.String value='other'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='abz'
          actual: CALL .foo type=kotlin.String operator=null
            x: CONST String type=kotlin.String value='abz]'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='aby'
          actual: CALL .foo type=kotlin.String operator=null
            x: CONST String type=kotlin.String value='aby|'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='ghi'
          actual: CALL .foo type=kotlin.String operator=null
            x: CONST String type=kotlin.String value='ghi'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='other'
          actual: CALL .foo type=kotlin.String operator=null
            x: CONST String type=kotlin.String value='xyz'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
