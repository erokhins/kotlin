MODULE <test-module>
  FILE /kt6192.kt
    FUN public fun barB(/*0*/ vararg args: kotlin.Byte /*kotlin.ByteArray*/): kotlin.ByteArray
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=barB
          GET_VAR args type=kotlin.ByteArray operator=null
    FUN public fun barC(/*0*/ vararg args: kotlin.Char /*kotlin.CharArray*/): kotlin.CharArray
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=barC
          GET_VAR args type=kotlin.CharArray operator=null
    FUN public fun barD(/*0*/ vararg args: kotlin.Double /*kotlin.DoubleArray*/): kotlin.DoubleArray
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=barD
          GET_VAR args type=kotlin.DoubleArray operator=null
    FUN public fun barF(/*0*/ vararg args: kotlin.Float /*kotlin.FloatArray*/): kotlin.FloatArray
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=barF
          GET_VAR args type=kotlin.FloatArray operator=null
    FUN public fun barI(/*0*/ vararg args: kotlin.Int /*kotlin.IntArray*/): kotlin.IntArray
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=barI
          GET_VAR args type=kotlin.IntArray operator=null
    FUN public fun barJ(/*0*/ vararg args: kotlin.Long /*kotlin.LongArray*/): kotlin.LongArray
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=barJ
          GET_VAR args type=kotlin.LongArray operator=null
    FUN public fun barS(/*0*/ vararg args: kotlin.Short /*kotlin.ShortArray*/): kotlin.ShortArray
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=barS
          GET_VAR args type=kotlin.ShortArray operator=null
    FUN public fun barZ(/*0*/ vararg args: kotlin.Boolean /*kotlin.BooleanArray*/): kotlin.BooleanArray
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=barZ
          GET_VAR args type=kotlin.BooleanArray operator=null
    FUN public fun sumInt(/*0*/ x: kotlin.Int, /*1*/ vararg args: kotlin.Int /*kotlin.IntArray*/): kotlin.Int
      BLOCK_BODY
        VAR var result: kotlin.Int
          GET_VAR x type=kotlin.Int operator=null
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR args type=kotlin.IntArray operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val a: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR result type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.Int operator=PLUSEQ
                    $this: GET_VAR result type=kotlin.Int operator=PLUSEQ
                    other: GET_VAR a type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=sumInt
          GET_VAR result type=kotlin.Int operator=null
    FUN public fun sumFunOnParameters(/*0*/ x: kotlin.Int, /*1*/ vararg args: kotlin.Int /*kotlin.IntArray*/, /*2*/ f: (kotlin.Int) -> kotlin.Int): kotlin.Int
      BLOCK_BODY
        VAR var result: kotlin.Int
          CALL .invoke type=kotlin.Int operator=INVOKE
            $this: GET_VAR f type=(kotlin.Int) -> kotlin.Int operator=VARIABLE_AS_FUNCTION
            p1: GET_VAR x type=kotlin.Int operator=null
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR args type=kotlin.IntArray operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val a: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR result type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.Int operator=PLUSEQ
                    $this: GET_VAR result type=kotlin.Int operator=PLUSEQ
                    other: CALL .invoke type=kotlin.Int operator=INVOKE
                      $this: GET_VAR f type=(kotlin.Int) -> kotlin.Int operator=VARIABLE_AS_FUNCTION
                      p1: GET_VAR a type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=sumFunOnParameters
          GET_VAR result type=kotlin.Int operator=null
    FUN public fun concatParameters(/*0*/ vararg args: kotlin.Int /*kotlin.IntArray*/): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR args type=kotlin.IntArray operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val a: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR result type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR result type=kotlin.String operator=PLUSEQ
                    other: CALL .toString type=kotlin.String operator=null
                      $this: GET_VAR a type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=concatParameters
          GET_VAR result type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val aB: kotlin.ByteArray
          CALL .<init> type=kotlin.ByteArray operator=null
            size: CONST Int type=kotlin.Int value='3'
        VAR val aC: kotlin.CharArray
          CALL .<init> type=kotlin.CharArray operator=null
            size: CONST Int type=kotlin.Int value='3'
        VAR val aD: kotlin.DoubleArray
          CALL .<init> type=kotlin.DoubleArray operator=null
            size: CONST Int type=kotlin.Int value='3'
        VAR val aF: kotlin.FloatArray
          CALL .<init> type=kotlin.FloatArray operator=null
            size: CONST Int type=kotlin.Int value='3'
        VAR val aI: kotlin.IntArray
          CALL .<init> type=kotlin.IntArray operator=null
            size: CONST Int type=kotlin.Int value='3'
        CALL .set type=kotlin.Unit operator=EQ
          $this: GET_VAR aI type=kotlin.IntArray operator=null
          index: CONST Int type=kotlin.Int value='0'
          value: CONST Int type=kotlin.Int value='1'
        CALL .set type=kotlin.Unit operator=EQ
          $this: GET_VAR aI type=kotlin.IntArray operator=null
          index: CONST Int type=kotlin.Int value='1'
          value: CONST Int type=kotlin.Int value='2'
        CALL .set type=kotlin.Unit operator=EQ
          $this: GET_VAR aI type=kotlin.IntArray operator=null
          index: CONST Int type=kotlin.Int value='2'
          value: CONST Int type=kotlin.Int value='3'
        VAR val bI: kotlin.IntArray
          CALL .<init> type=kotlin.IntArray operator=null
            size: CONST Int type=kotlin.Int value='2'
        CALL .set type=kotlin.Unit operator=EQ
          $this: GET_VAR bI type=kotlin.IntArray operator=null
          index: CONST Int type=kotlin.Int value='0'
          value: CONST Int type=kotlin.Int value='4'
        CALL .set type=kotlin.Unit operator=EQ
          $this: GET_VAR bI type=kotlin.IntArray operator=null
          index: CONST Int type=kotlin.Int value='1'
          value: CONST Int type=kotlin.Int value='5'
        VAR val aJ: kotlin.LongArray
          CALL .<init> type=kotlin.LongArray operator=null
            size: CONST Int type=kotlin.Int value='3'
        VAR val aS: kotlin.ShortArray
          CALL .<init> type=kotlin.ShortArray operator=null
            size: CONST Int type=kotlin.Int value='3'
        VAR val aZ: kotlin.BooleanArray
          CALL .<init> type=kotlin.BooleanArray operator=null
            size: CONST Int type=kotlin.Int value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barB type=kotlin.ByteArray operator=null
                  args: VARARG type=ByteArray varargElementType=Byte
                    SPREAD_ELEMENT
                      GET_VAR aB type=kotlin.ByteArray operator=null
                    CALL .toByte type=kotlin.Byte operator=null
                      $this: CONST Int type=kotlin.Int value='23'
              arg1: CONST Int type=kotlin.Int value='4'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Byte'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barB type=kotlin.ByteArray operator=null
                  args: VARARG type=ByteArray varargElementType=Byte
                    CALL .toByte type=kotlin.Byte operator=null
                      $this: CONST Int type=kotlin.Int value='11'
                    SPREAD_ELEMENT
                      GET_VAR aB type=kotlin.ByteArray operator=null
                    CALL .toByte type=kotlin.Byte operator=null
                      $this: CONST Int type=kotlin.Int value='23'
                    SPREAD_ELEMENT
                      GET_VAR aB type=kotlin.ByteArray operator=null
              arg1: CONST Int type=kotlin.Int value='8'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Byte'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barC type=kotlin.CharArray operator=null
                  args: VARARG type=CharArray varargElementType=Char
                    SPREAD_ELEMENT
                      GET_VAR aC type=kotlin.CharArray operator=null
                    CONST Char type=kotlin.Char value='A'
              arg1: CONST Int type=kotlin.Int value='4'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Char'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barC type=kotlin.CharArray operator=null
                  args: VARARG type=CharArray varargElementType=Char
                    CONST Char type=kotlin.Char value='A'
                    SPREAD_ELEMENT
                      GET_VAR aC type=kotlin.CharArray operator=null
                    CONST Char type=kotlin.Char value='A'
                    SPREAD_ELEMENT
                      GET_VAR aC type=kotlin.CharArray operator=null
              arg1: CONST Int type=kotlin.Int value='8'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Char'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barD type=kotlin.DoubleArray operator=null
                  args: VARARG type=DoubleArray varargElementType=Double
                    SPREAD_ELEMENT
                      GET_VAR aD type=kotlin.DoubleArray operator=null
                    CONST Double type=kotlin.Double value='2.3'
              arg1: CONST Int type=kotlin.Int value='4'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Double'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barD type=kotlin.DoubleArray operator=null
                  args: VARARG type=DoubleArray varargElementType=Double
                    SPREAD_ELEMENT
                      GET_VAR aD type=kotlin.DoubleArray operator=null
                    SPREAD_ELEMENT
                      GET_VAR aD type=kotlin.DoubleArray operator=null
                    CONST Double type=kotlin.Double value='2.3'
              arg1: CONST Int type=kotlin.Int value='7'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Double'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barF type=kotlin.FloatArray operator=null
                  args: VARARG type=FloatArray varargElementType=Float
                    SPREAD_ELEMENT
                      GET_VAR aF type=kotlin.FloatArray operator=null
                    CONST Float type=kotlin.Float value='2.3'
              arg1: CONST Int type=kotlin.Int value='4'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Float'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barF type=kotlin.FloatArray operator=null
                  args: VARARG type=FloatArray varargElementType=Float
                    SPREAD_ELEMENT
                      GET_VAR aF type=kotlin.FloatArray operator=null
                    CONST Float type=kotlin.Float value='2.3'
                    CONST Float type=kotlin.Float value='1.1'
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Float'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barI type=kotlin.IntArray operator=null
                  args: VARARG type=IntArray varargElementType=Int
                    SPREAD_ELEMENT
                      GET_VAR aI type=kotlin.IntArray operator=null
                    CONST Int type=kotlin.Int value='23'
              arg1: CONST Int type=kotlin.Int value='4'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Int'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barI type=kotlin.IntArray operator=null
                  args: VARARG type=IntArray varargElementType=Int
                    CONST Int type=kotlin.Int value='11'
                    CONST Int type=kotlin.Int value='10'
                    SPREAD_ELEMENT
                      GET_VAR aI type=kotlin.IntArray operator=null
                    CONST Int type=kotlin.Int value='23'
              arg1: CONST Int type=kotlin.Int value='6'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Int'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barI type=kotlin.IntArray operator=null
                  args: VARARG type=IntArray varargElementType=Int
                    CONST Int type=kotlin.Int value='100'
                    SPREAD_ELEMENT
                      GET_VAR aI type=kotlin.IntArray operator=null
                    SPREAD_ELEMENT
                      GET_VAR aI type=kotlin.IntArray operator=null
              arg1: CONST Int type=kotlin.Int value='7'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Int 3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .sumInt type=kotlin.Int operator=null
                x: CONST Int type=kotlin.Int value='100'
                args: VARARG type=IntArray varargElementType=Int
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
              arg1: CONST Int type=kotlin.Int value='106'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: sumInt 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .sumInt type=kotlin.Int operator=null
                x: CONST Int type=kotlin.Int value='100'
                args: VARARG type=IntArray varargElementType=Int
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
                  CONST Int type=kotlin.Int value='200'
              arg1: CONST Int type=kotlin.Int value='306'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: sumInt 2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .sumInt type=kotlin.Int operator=null
                x: CONST Int type=kotlin.Int value='100'
                args: VARARG type=IntArray varargElementType=Int
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
              arg1: CONST Int type=kotlin.Int value='112'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: sumInt 3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .sumFunOnParameters type=kotlin.Int operator=null
                x: CONST Int type=kotlin.Int value='100'
                args: VARARG type=IntArray varargElementType=Int
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
                  CONST Int type=kotlin.Int value='200'
                f: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
                  FUN local final fun <anonymous>(/*0*/ it: kotlin.Int): kotlin.Int
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CALL .times type=kotlin.Int operator=MUL
                          $this: CONST Int type=kotlin.Int value='2'
                          other: GET_VAR it type=kotlin.Int operator=null
                  CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
              arg1: CONST Int type=kotlin.Int value='612'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: sumFunOnParameters 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .sumFunOnParameters type=kotlin.Int operator=null
                x: CONST Int type=kotlin.Int value='100'
                args: VARARG type=IntArray varargElementType=Int
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
                f: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
                  FUN local final fun <anonymous>(/*0*/ it: kotlin.Int): kotlin.Int
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CALL .times type=kotlin.Int operator=MUL
                          $this: CONST Int type=kotlin.Int value='2'
                          other: GET_VAR it type=kotlin.Int operator=null
                  CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
              arg1: CONST Int type=kotlin.Int value='224'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: sumFunOnParameters 2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .concatParameters type=kotlin.String operator=null
                args: VARARG type=IntArray varargElementType=Int
                  CONST Int type=kotlin.Int value='1'
                  CONST Int type=kotlin.Int value='2'
                  CONST Int type=kotlin.Int value='3'
              arg1: CONST String type=kotlin.String value='123'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: concatParameters 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .concatParameters type=kotlin.String operator=null
                args: VARARG type=IntArray varargElementType=Int
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
              arg1: CONST String type=kotlin.String value='123'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: concatParameters 2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .concatParameters type=kotlin.String operator=null
                args: VARARG type=IntArray varargElementType=Int
                  CONST Int type=kotlin.Int value='4'
                  CONST Int type=kotlin.Int value='5'
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
              arg1: CONST String type=kotlin.String value='45123'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: concatParameters 3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .concatParameters type=kotlin.String operator=null
                args: VARARG type=IntArray varargElementType=Int
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
                  CONST Int type=kotlin.Int value='4'
                  CONST Int type=kotlin.Int value='5'
              arg1: CONST String type=kotlin.String value='12345'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: concatParameters 4'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .concatParameters type=kotlin.String operator=null
                args: VARARG type=IntArray varargElementType=Int
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
                  SPREAD_ELEMENT
                    GET_VAR bI type=kotlin.IntArray operator=null
              arg1: CONST String type=kotlin.String value='12345'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: concatParameters 5'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .concatParameters type=kotlin.String operator=null
                args: VARARG type=IntArray varargElementType=Int
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
                  CONST Int type=kotlin.Int value='7'
                  CONST Int type=kotlin.Int value='8'
                  SPREAD_ELEMENT
                    GET_VAR bI type=kotlin.IntArray operator=null
              arg1: CONST String type=kotlin.String value='1237845'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: concatParameters 6'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .concatParameters type=kotlin.String operator=null
                args: VARARG type=IntArray varargElementType=Int
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
                  CONST Int type=kotlin.Int value='7'
                  SPREAD_ELEMENT
                    GET_VAR bI type=kotlin.IntArray operator=null
                  SPREAD_ELEMENT
                    GET_VAR aI type=kotlin.IntArray operator=null
                  CONST Int type=kotlin.Int value='9'
              arg1: CONST String type=kotlin.String value='1237451239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: concatParameters 7'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barJ type=kotlin.LongArray operator=null
                  args: VARARG type=LongArray varargElementType=Long
                    SPREAD_ELEMENT
                      GET_VAR aJ type=kotlin.LongArray operator=null
                    CONST Long type=kotlin.Long value='23'
              arg1: CONST Int type=kotlin.Int value='4'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Long'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barJ type=kotlin.LongArray operator=null
                  args: VARARG type=LongArray varargElementType=Long
                    SPREAD_ELEMENT
                      GET_VAR aJ type=kotlin.LongArray operator=null
                    CONST Long type=kotlin.Long value='23'
                    SPREAD_ELEMENT
                      GET_VAR aJ type=kotlin.LongArray operator=null
                    SPREAD_ELEMENT
                      GET_VAR aJ type=kotlin.LongArray operator=null
              arg1: CONST Int type=kotlin.Int value='10'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Long'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barS type=kotlin.ShortArray operator=null
                  args: VARARG type=ShortArray varargElementType=Short
                    SPREAD_ELEMENT
                      GET_VAR aS type=kotlin.ShortArray operator=null
                    CALL .toShort type=kotlin.Short operator=null
                      $this: CONST Int type=kotlin.Int value='23'
              arg1: CONST Int type=kotlin.Int value='4'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Short'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barS type=kotlin.ShortArray operator=null
                  args: VARARG type=ShortArray varargElementType=Short
                    SPREAD_ELEMENT
                      GET_VAR aS type=kotlin.ShortArray operator=null
                    SPREAD_ELEMENT
                      GET_VAR aS type=kotlin.ShortArray operator=null
                    CALL .toShort type=kotlin.Short operator=null
                      $this: CONST Int type=kotlin.Int value='23'
                    SPREAD_ELEMENT
                      GET_VAR aS type=kotlin.ShortArray operator=null
              arg1: CONST Int type=kotlin.Int value='10'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Short'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barZ type=kotlin.BooleanArray operator=null
                  args: VARARG type=BooleanArray varargElementType=Boolean
                    SPREAD_ELEMENT
                      GET_VAR aZ type=kotlin.BooleanArray operator=null
                    CONST Boolean type=kotlin.Boolean value='true'
              arg1: CONST Int type=kotlin.Int value='4'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Boolean'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .barZ type=kotlin.BooleanArray operator=null
                  args: VARARG type=BooleanArray varargElementType=Boolean
                    CONST Boolean type=kotlin.Boolean value='false'
                    SPREAD_ELEMENT
                      GET_VAR aZ type=kotlin.BooleanArray operator=null
                    CONST Boolean type=kotlin.Boolean value='true'
                    SPREAD_ELEMENT
                      GET_VAR aZ type=kotlin.BooleanArray operator=null
              arg1: CONST Int type=kotlin.Int value='8'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail: Boolean'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
