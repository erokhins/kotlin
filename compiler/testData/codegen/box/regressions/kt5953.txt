MODULE <test-module>
  FILE /kt5953.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val res: kotlin.collections.List<kotlin.Unit>
          CALL .map type=kotlin.collections.List<kotlin.Unit> operator=null
            $receiver: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
              $this: CONST Int type=kotlin.Int value='1'
              other: CONST Int type=kotlin.Int value='3'
            transform: BLOCK type=(kotlin.Int) -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.Int): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    WHEN type=kotlin.Unit operator=IF
                      if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR it type=kotlin.Int operator=null
                        arg1: CONST Int type=kotlin.Int value='1'
                      then: CONST Int type=kotlin.Int value='2'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Unit operator=LAMBDA
        VAR var result: kotlin.String
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.Unit>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.Unit> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR res type=kotlin.collections.List<kotlin.Unit> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.Unit> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Unit
                CALL .next type=kotlin.Unit operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.Unit> operator=null
              SET_VAR result type=kotlin.Unit operator=PLUSEQ
                CALL .plus type=kotlin.String operator=PLUSEQ
                  $this: GET_VAR result type=kotlin.String operator=PLUSEQ
                  other: CONST String type=kotlin.String value=' '
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR result type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='   '
            then: CONST String type=kotlin.String value='OK'
            else: GET_VAR result type=kotlin.String operator=null
