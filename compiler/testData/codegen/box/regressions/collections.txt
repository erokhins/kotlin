MODULE <test-module>
  FILE /collections.kt
    FUN public fun </*0*/ T> testCollectionSize(/*0*/ c: kotlin.collections.Collection<T>): kotlin.Unit
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=testCollectionSize
          CALL .assertEquals type=kotlin.Unit operator=null
            expected: CONST Int type=kotlin.Int value='0'
            actual: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
              $this: GET_VAR c type=kotlin.collections.Collection<T> operator=null
    FUN public fun </*0*/ T> testCollectionIsEmpty(/*0*/ c: kotlin.collections.Collection<T>): kotlin.Unit
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=testCollectionIsEmpty
          CALL .assertTrue type=kotlin.Unit operator=null
            actual: CALL .isEmpty type=kotlin.Boolean operator=null
              $this: GET_VAR c type=kotlin.collections.Collection<T> operator=null
    FUN public fun </*0*/ T> testCollectionContains(/*0*/ c: kotlin.collections.Collection<T>): kotlin.Unit
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=testCollectionContains
          CALL .assertTrue type=kotlin.Unit operator=null
            actual: CALL .contains type=kotlin.Boolean operator=null
              $receiver: GET_VAR c type=kotlin.collections.Collection<T> operator=null
              element: TYPE_OP operator=CAST typeOperand=kotlin.Any?
                CONST Int type=kotlin.Int value='1'
    FUN public fun </*0*/ T> testCollectionIterator(/*0*/ c: kotlin.collections.Collection<T>): kotlin.Unit
      BLOCK_BODY
        VAR val it: kotlin.collections.Iterator<T>
          CALL .iterator type=kotlin.collections.Iterator<T> operator=null
            $this: GET_VAR c type=kotlin.collections.Collection<T> operator=null
        WHILE label=null operator=WHILE_LOOP
          condition: CALL .hasNext type=kotlin.Boolean operator=null
            $this: GET_VAR it type=kotlin.collections.Iterator<T> operator=null
          body: BLOCK type=kotlin.Unit operator=null
            CALL .assertEquals type=kotlin.Unit operator=null
              expected: CONST Int type=kotlin.Int value='1'
              actual: TYPE_OP operator=CAST typeOperand=kotlin.Any?
                CALL .next type=T operator=null
                  $this: GET_VAR it type=kotlin.collections.Iterator<T> operator=null
    FUN public fun </*0*/ T> testCollectionContainsAll(/*0*/ c: kotlin.collections.Collection<T>): kotlin.Unit
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=testCollectionContainsAll
          CALL .assertTrue type=kotlin.Unit operator=null
            actual: CALL .containsAll type=kotlin.Boolean operator=null
              $this: GET_VAR c type=kotlin.collections.Collection<T> operator=null
              elements: GET_VAR c type=kotlin.collections.Collection<T> operator=null
    FUN public fun </*0*/ T> testMutableCollectionAdd(/*0*/ c: kotlin.collections.MutableCollection<T>, /*1*/ t: T): kotlin.Unit
      BLOCK_BODY
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
          element: GET_VAR t type=T operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='1'
          actual: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
            $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
        CALL .assertTrue type=kotlin.Unit operator=null
          actual: CALL .contains type=kotlin.Boolean operator=null
            $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
            element: GET_VAR t type=T operator=null
    FUN public fun </*0*/ T> testMutableCollectionRemove(/*0*/ c: kotlin.collections.MutableCollection<T>, /*1*/ t: T): kotlin.Unit
      BLOCK_BODY
        CALL .remove type=kotlin.Boolean operator=null
          $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
          element: GET_VAR t type=T operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='0'
          actual: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
            $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
        CALL .assertFalse type=kotlin.Unit operator=null
          actual: CALL .contains type=kotlin.Boolean operator=null
            $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
            element: GET_VAR t type=T operator=null
    FUN public fun </*0*/ T> testMutableCollectionIterator(/*0*/ c: kotlin.collections.MutableCollection<T>, /*1*/ t: T): kotlin.Unit
      BLOCK_BODY
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
          element: GET_VAR t type=T operator=null
        VAR val it: kotlin.collections.MutableIterator<T>
          CALL .iterator type=kotlin.collections.MutableIterator<T> operator=null
            $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
        WHILE label=null operator=WHILE_LOOP
          condition: CALL .hasNext type=kotlin.Boolean operator=null
            $this: GET_VAR it type=kotlin.collections.MutableIterator<T> operator=null
          body: BLOCK type=kotlin.Unit operator=null
            CALL .next type=T operator=null
              $this: GET_VAR it type=kotlin.collections.MutableIterator<T> operator=null
            CALL .remove type=kotlin.Unit operator=null
              $this: GET_VAR it type=kotlin.collections.MutableIterator<T> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Int type=kotlin.Int value='0'
          actual: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
            $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
    FUN public fun </*0*/ T> testMutableCollectionAddAll(/*0*/ c: kotlin.collections.MutableCollection<T>, /*1*/ t1: T, /*2*/ t2: T): kotlin.Unit
      BLOCK_BODY
        CALL .addAll type=kotlin.Boolean operator=null
          $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
          elements: CALL .arrayListOf type=java.util.ArrayList<T> operator=null
            elements: VARARG type=Array<out T> varargElementType=T
              GET_VAR t1 type=T operator=null
              GET_VAR t2 type=T operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .arrayListOf type=java.util.ArrayList<T!> operator=null
            elements: VARARG type=Array<out (T..T?)> varargElementType=(T..T?)
              GET_VAR t1 type=T operator=null
              GET_VAR t2 type=T operator=null
          actual: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
    FUN public fun </*0*/ T> testMutableCollectionRemoveAll(/*0*/ c: kotlin.collections.MutableCollection<T>, /*1*/ t1: T, /*2*/ t2: T): kotlin.Unit
      BLOCK_BODY
        CALL .addAll type=kotlin.Boolean operator=null
          $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
          elements: CALL .arrayListOf type=java.util.ArrayList<T> operator=null
            elements: VARARG type=Array<out T> varargElementType=T
              GET_VAR t1 type=T operator=null
              GET_VAR t2 type=T operator=null
        CALL .removeAll type=kotlin.Boolean operator=null
          $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
          elements: CALL .arrayListOf type=java.util.ArrayList<T> operator=null
            elements: VARARG type=Array<out T> varargElementType=T
              GET_VAR t1 type=T operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .arrayListOf type=java.util.ArrayList<T!> operator=null
            elements: VARARG type=Array<out (T..T?)> varargElementType=(T..T?)
              GET_VAR t2 type=T operator=null
          actual: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
    FUN public fun </*0*/ T> testMutableCollectionRetainAll(/*0*/ c: kotlin.collections.MutableCollection<T>, /*1*/ t1: T, /*2*/ t2: T): kotlin.Unit
      BLOCK_BODY
        CALL .addAll type=kotlin.Boolean operator=null
          $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
          elements: CALL .arrayListOf type=java.util.ArrayList<T> operator=null
            elements: VARARG type=Array<out T> varargElementType=T
              GET_VAR t1 type=T operator=null
              GET_VAR t2 type=T operator=null
        CALL .retainAll type=kotlin.Boolean operator=null
          $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
          elements: CALL .arrayListOf type=java.util.ArrayList<T> operator=null
            elements: VARARG type=Array<out T> varargElementType=T
              GET_VAR t1 type=T operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .arrayListOf type=java.util.ArrayList<T> operator=null
            elements: VARARG type=Array<out T> varargElementType=T
              GET_VAR t1 type=T operator=null
          actual: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
    FUN public fun </*0*/ T> testMutableCollectionClear(/*0*/ c: kotlin.collections.MutableCollection<T>): kotlin.Unit
      BLOCK_BODY
        CALL .clear type=kotlin.Unit operator=null
          $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
        CALL .assertTrue type=kotlin.Unit operator=null
          actual: CALL .isEmpty type=kotlin.Boolean operator=null
            $this: GET_VAR c type=kotlin.collections.MutableCollection<T> operator=null
    FUN public fun testCollection(): kotlin.Unit
      BLOCK_BODY
        CALL .testCollectionSize type=kotlin.Unit operator=null
          c: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
        CALL .testCollectionIsEmpty type=kotlin.Unit operator=null
          c: CALL .arrayListOf type=java.util.ArrayList<kotlin.String> operator=null
        CALL .testCollectionContains type=kotlin.Unit operator=null
          c: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
            elements: VARARG type=Array<out Int> varargElementType=Int
              CONST Int type=kotlin.Int value='1'
        CALL .testCollectionIterator type=kotlin.Unit operator=null
          c: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
            elements: VARARG type=Array<out Int> varargElementType=Int
              CONST Int type=kotlin.Int value='1'
        CALL .testCollectionContainsAll type=kotlin.Unit operator=null
          c: CALL .arrayListOf type=java.util.ArrayList<kotlin.String> operator=null
            elements: VARARG type=Array<out String> varargElementType=String
              CONST String type=kotlin.String value='a'
              CONST String type=kotlin.String value='b'
        CALL .testMutableCollectionAdd type=kotlin.Unit operator=null
          c: CALL .arrayListOf type=java.util.ArrayList<kotlin.String> operator=null
          t: CONST String type=kotlin.String value=''
        CALL .testMutableCollectionRemove type=kotlin.Unit operator=null
          c: CALL .arrayListOf type=java.util.ArrayList<kotlin.String> operator=null
            elements: VARARG type=Array<out String> varargElementType=String
              CONST String type=kotlin.String value='a'
          t: CONST String type=kotlin.String value='a'
        CALL .testMutableCollectionIterator type=kotlin.Unit operator=null
          c: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
          t: CONST Int type=kotlin.Int value='1'
        CALL .testMutableCollectionAddAll type=kotlin.Unit operator=null
          c: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
          t1: CONST Int type=kotlin.Int value='1'
          t2: CONST Int type=kotlin.Int value='2'
        CALL .testMutableCollectionRemoveAll type=kotlin.Unit operator=null
          c: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
          t1: CONST Int type=kotlin.Int value='1'
          t2: CONST Int type=kotlin.Int value='2'
        CALL .testMutableCollectionRetainAll type=kotlin.Unit operator=null
          c: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
          t1: CONST Int type=kotlin.Int value='1'
          t2: CONST Int type=kotlin.Int value='2'
        CALL .testMutableCollectionClear type=kotlin.Unit operator=null
          c: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
            elements: VARARG type=Array<out Int> varargElementType=Int
              CONST Int type=kotlin.Int value='1'
              CONST Int type=kotlin.Int value='2'
    FUN public fun </*0*/ T> testListGet(/*0*/ l: kotlin.collections.List<T>, /*1*/ t: T): kotlin.Unit
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=testListGet
          CALL .assertEquals type=kotlin.Unit operator=null
            expected: GET_VAR t type=T operator=null
            actual: CALL .get type=T operator=null
              $this: GET_VAR l type=kotlin.collections.List<T> operator=null
              index: CONST Int type=kotlin.Int value='0'
    FUN public fun </*0*/ T> testListIndexOf(/*0*/ l: kotlin.collections.List<T>, /*1*/ t: T): kotlin.Unit
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=testListIndexOf
          CALL .assertEquals type=kotlin.Unit operator=null
            expected: CONST Int type=kotlin.Int value='0'
            actual: CALL .indexOf type=kotlin.Int operator=null
              $this: GET_VAR l type=kotlin.collections.List<T> operator=null
              element: GET_VAR t type=T operator=null
    FUN public fun </*0*/ T> testListIterator(/*0*/ l: kotlin.collections.List<T>, /*1*/ t1: T, /*2*/ t2: T): kotlin.Unit
      BLOCK_BODY
        VAR val indexes: java.util.ArrayList<kotlin.Int>
          CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
        VAR val result: java.util.ArrayList<T>
          CALL .arrayListOf type=java.util.ArrayList<T> operator=null
        VAR val it: kotlin.collections.ListIterator<T>
          CALL .listIterator type=kotlin.collections.ListIterator<T> operator=null
            $this: GET_VAR l type=kotlin.collections.List<T> operator=null
        WHILE label=null operator=WHILE_LOOP
          condition: CALL .hasNext type=kotlin.Boolean operator=null
            $this: GET_VAR it type=kotlin.collections.ListIterator<T> operator=null
          body: BLOCK type=kotlin.Boolean operator=null
            CALL .add type=kotlin.Boolean operator=null
              $this: GET_VAR indexes type=java.util.ArrayList<kotlin.Int> operator=null
              element: CALL .nextIndex type=kotlin.Int operator=null
                $this: GET_VAR it type=kotlin.collections.ListIterator<T> operator=null
            CALL .add type=kotlin.Boolean operator=null
              $this: GET_VAR result type=java.util.ArrayList<T> operator=null
              element: CALL .next type=T operator=null
                $this: GET_VAR it type=kotlin.collections.ListIterator<T> operator=null
        WHILE label=null operator=WHILE_LOOP
          condition: CALL .hasPrevious type=kotlin.Boolean operator=null
            $this: GET_VAR it type=kotlin.collections.ListIterator<T> operator=null
          body: BLOCK type=kotlin.Boolean operator=null
            CALL .add type=kotlin.Boolean operator=null
              $this: GET_VAR indexes type=java.util.ArrayList<kotlin.Int> operator=null
              element: CALL .previousIndex type=kotlin.Int operator=null
                $this: GET_VAR it type=kotlin.collections.ListIterator<T> operator=null
            CALL .add type=kotlin.Boolean operator=null
              $this: GET_VAR result type=java.util.ArrayList<T> operator=null
              element: CALL .previous type=T operator=null
                $this: GET_VAR it type=kotlin.collections.ListIterator<T> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
            elements: VARARG type=Array<out Int> varargElementType=Int
              CONST Int type=kotlin.Int value='0'
              CONST Int type=kotlin.Int value='1'
              CONST Int type=kotlin.Int value='1'
              CONST Int type=kotlin.Int value='0'
          actual: GET_VAR indexes type=java.util.ArrayList<kotlin.Int> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .arrayListOf type=java.util.ArrayList<T> operator=null
            elements: VARARG type=Array<out T> varargElementType=T
              GET_VAR t1 type=T operator=null
              GET_VAR t2 type=T operator=null
              GET_VAR t2 type=T operator=null
              GET_VAR t1 type=T operator=null
          actual: GET_VAR result type=java.util.ArrayList<T> operator=null
    FUN public fun </*0*/ T> testListSublist(/*0*/ l: kotlin.collections.List<T>, /*1*/ t: T): kotlin.Unit
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=testListSublist
          CALL .assertEquals type=kotlin.Unit operator=null
            expected: CALL .arrayListOf type=java.util.ArrayList<T> operator=null
              elements: VARARG type=Array<out T> varargElementType=T
                GET_VAR t type=T operator=null
            actual: CALL .subList type=kotlin.collections.List<T> operator=null
              $this: GET_VAR l type=kotlin.collections.List<T> operator=null
              fromIndex: CONST Int type=kotlin.Int value='0'
              toIndex: CONST Int type=kotlin.Int value='1'
    FUN public fun </*0*/ T> testMutableListSet(/*0*/ l: kotlin.collections.MutableList<T>, /*1*/ t: T): kotlin.Unit
      BLOCK_BODY
        CALL .set type=T operator=null
          $this: GET_VAR l type=kotlin.collections.MutableList<T> operator=null
          index: CONST Int type=kotlin.Int value='0'
          element: GET_VAR t type=T operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .arrayListOf type=java.util.ArrayList<T> operator=null
            elements: VARARG type=Array<out T> varargElementType=T
              GET_VAR t type=T operator=null
          actual: GET_VAR l type=kotlin.collections.MutableList<T> operator=null
    FUN public fun </*0*/ T> testMutableListIterator(/*0*/ l: kotlin.collections.MutableList<T>, /*1*/ t1: T, /*2*/ t2: T, /*3*/ t3: T): kotlin.Unit
      BLOCK_BODY
        VAR val it: kotlin.collections.MutableListIterator<T>
          CALL .listIterator type=kotlin.collections.MutableListIterator<T> operator=null
            $this: GET_VAR l type=kotlin.collections.MutableList<T> operator=null
        WHILE label=null operator=WHILE_LOOP
          condition: CALL .hasNext type=kotlin.Boolean operator=null
            $this: GET_VAR it type=kotlin.collections.MutableListIterator<T> operator=null
          body: BLOCK type=kotlin.Unit operator=null
            CALL .next type=T operator=null
              $this: GET_VAR it type=kotlin.collections.MutableListIterator<T> operator=null
            CALL .add type=kotlin.Unit operator=null
              $this: GET_VAR it type=kotlin.collections.MutableListIterator<T> operator=null
              element: GET_VAR t3 type=T operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .arrayListOf type=java.util.ArrayList<T> operator=null
            elements: VARARG type=Array<out T> varargElementType=T
              GET_VAR t1 type=T operator=null
              GET_VAR t3 type=T operator=null
              GET_VAR t2 type=T operator=null
              GET_VAR t3 type=T operator=null
          actual: GET_VAR l type=kotlin.collections.MutableList<T> operator=null
    FUN public fun testList(): kotlin.Unit
      BLOCK_BODY
        CALL .testListGet type=kotlin.Unit operator=null
          l: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
            elements: VARARG type=Array<out Int> varargElementType=Int
              CONST Int type=kotlin.Int value='1'
          t: CONST Int type=kotlin.Int value='1'
        CALL .testListIndexOf type=kotlin.Unit operator=null
          l: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
            elements: VARARG type=Array<out Int> varargElementType=Int
              CONST Int type=kotlin.Int value='1'
          t: CONST Int type=kotlin.Int value='1'
        CALL .testListIterator type=kotlin.Unit operator=null
          l: CALL .arrayListOf type=java.util.ArrayList<kotlin.String> operator=null
            elements: VARARG type=Array<out String> varargElementType=String
              CONST String type=kotlin.String value='a'
              CONST String type=kotlin.String value='b'
          t1: CONST String type=kotlin.String value='a'
          t2: CONST String type=kotlin.String value='b'
        CALL .testListSublist type=kotlin.Unit operator=null
          l: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
            elements: VARARG type=Array<out Int> varargElementType=Int
              CONST Int type=kotlin.Int value='1'
              CONST Int type=kotlin.Int value='2'
          t: CONST Int type=kotlin.Int value='1'
        CALL .testMutableListSet type=kotlin.Unit operator=null
          l: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
            elements: VARARG type=Array<out Int> varargElementType=Int
              CONST Int type=kotlin.Int value='2'
          t: CONST Int type=kotlin.Int value='4'
        CALL .testMutableListIterator type=kotlin.Unit operator=null
          l: CALL .arrayListOf type=java.util.ArrayList<kotlin.Int> operator=null
            elements: VARARG type=Array<out Int> varargElementType=Int
              CONST Int type=kotlin.Int value='1'
              CONST Int type=kotlin.Int value='2'
          t1: CONST Int type=kotlin.Int value='1'
          t2: CONST Int type=kotlin.Int value='2'
          t3: CONST Int type=kotlin.Int value='3'
    FUN public fun </*0*/ K, /*1*/ V> testMapContainsKey(/*0*/ map: kotlin.collections.Map<K, V>, /*1*/ k: K): kotlin.Unit
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=testMapContainsKey
          CALL .assertTrue type=kotlin.Unit operator=null
            actual: CALL .containsKey type=kotlin.Boolean operator=null
              $this: GET_VAR map type=kotlin.collections.Map<K, V> operator=null
              key: GET_VAR k type=K operator=null
    FUN public fun </*0*/ K, /*1*/ V> testMapKeys(/*0*/ map: kotlin.collections.Map<K, V>, /*1*/ k1: K, /*2*/ k2: K): kotlin.Unit
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=testMapKeys
          CALL .assertEqualCollections type=kotlin.Unit operator=null
            c1: CALL .hashSetOf type=java.util.HashSet<K> operator=null
              elements: VARARG type=Array<out K> varargElementType=K
                GET_VAR k1 type=K operator=null
                GET_VAR k2 type=K operator=null
            c2: CALL .<get-keys> type=kotlin.collections.Set<K> operator=GET_PROPERTY
              $this: GET_VAR map type=kotlin.collections.Map<K, V> operator=null
    FUN public fun </*0*/ K, /*1*/ V> testMapValues(/*0*/ map: kotlin.collections.Map<K, V>, /*1*/ v1: V, /*2*/ v2: V): kotlin.Unit
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=testMapValues
          CALL .assertEqualCollections type=kotlin.Unit operator=null
            c1: CALL .hashSetOf type=java.util.HashSet<V> operator=null
              elements: VARARG type=Array<out V> varargElementType=V
                GET_VAR v1 type=V operator=null
                GET_VAR v2 type=V operator=null
            c2: CALL .<get-values> type=kotlin.collections.Collection<V> operator=GET_PROPERTY
              $this: GET_VAR map type=kotlin.collections.Map<K, V> operator=null
    FUN public fun </*0*/ K, /*1*/ V> testMapEntrySet(/*0*/ map: kotlin.collections.Map<K, V>, /*1*/ k: K, /*2*/ v: V): kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.collections.Map.Entry<K, V>>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.collections.Map.Entry<K, V>> operator=FOR_LOOP_ITERATOR
              $this: CALL .<get-entries> type=kotlin.collections.Set<kotlin.collections.Map.Entry<K, V>> operator=GET_PROPERTY
                $this: GET_VAR map type=kotlin.collections.Map<K, V> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.collections.Map.Entry<K, V>> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val entry: kotlin.collections.Map.Entry<K, V>
                CALL .next type=kotlin.collections.Map.Entry<K, V> operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.collections.Map.Entry<K, V>> operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: GET_VAR k type=K operator=null
                  actual: CALL .<get-key> type=K operator=GET_PROPERTY
                    $this: GET_VAR entry type=kotlin.collections.Map.Entry<K, V> operator=null
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: GET_VAR v type=V operator=null
                  actual: CALL .<get-value> type=V operator=GET_PROPERTY
                    $this: GET_VAR entry type=kotlin.collections.Map.Entry<K, V> operator=null
    FUN public fun </*0*/ K, /*1*/ V> testMutableMapEntry(/*0*/ map: kotlin.collections.MutableMap<K, V>, /*1*/ k1: K, /*2*/ v: V): kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<K, V>>
            CALL .iterator type=kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<K, V>> operator=FOR_LOOP_ITERATOR
              $this: CALL .<get-entries> type=kotlin.collections.MutableSet<kotlin.collections.MutableMap.MutableEntry<K, V>> operator=GET_PROPERTY
                $this: GET_VAR map type=kotlin.collections.MutableMap<K, V> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<K, V>> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val entry: kotlin.collections.MutableMap.MutableEntry<K, V>
                CALL .next type=kotlin.collections.MutableMap.MutableEntry<K, V> operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<kotlin.collections.MutableMap.MutableEntry<K, V>> operator=null
              BLOCK type=V operator=null
                CALL .setValue type=V operator=null
                  $this: GET_VAR entry type=kotlin.collections.MutableMap.MutableEntry<K, V> operator=null
                  newValue: GET_VAR v type=V operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .hashMapOf type=java.util.HashMap<K!, V!> operator=null
            pairs: VARARG type=Array<out Pair<(K..K?), (V..V?)>> varargElementType=Pair<(K..K?), (V..V?)>
              CALL .to type=kotlin.Pair<K, V> operator=null
                $receiver: GET_VAR k1 type=K operator=null
                that: GET_VAR v type=V operator=null
          actual: GET_VAR map type=kotlin.collections.MutableMap<K, V> operator=null
    FUN public fun testMap(): kotlin.Unit
      BLOCK_BODY
        CALL .testMapContainsKey type=kotlin.Unit operator=null
          map: CALL .hashMapOf type=java.util.HashMap<kotlin.Int, kotlin.Char> operator=null
            pairs: VARARG type=Array<out Pair<Int, Char>> varargElementType=Pair<Int, Char>
              CALL .to type=kotlin.Pair<kotlin.Int, kotlin.Char> operator=null
                $receiver: CONST Int type=kotlin.Int value='1'
                that: CONST Char type=kotlin.Char value='a'
              CALL .to type=kotlin.Pair<kotlin.Int, kotlin.Char> operator=null
                $receiver: CONST Int type=kotlin.Int value='2'
                that: CONST Char type=kotlin.Char value='b'
          k: CONST Int type=kotlin.Int value='2'
        CALL .testMapKeys type=kotlin.Unit operator=null
          map: CALL .hashMapOf type=java.util.HashMap<kotlin.Int, kotlin.Char> operator=null
            pairs: VARARG type=Array<out Pair<Int, Char>> varargElementType=Pair<Int, Char>
              CALL .to type=kotlin.Pair<kotlin.Int, kotlin.Char> operator=null
                $receiver: CONST Int type=kotlin.Int value='1'
                that: CONST Char type=kotlin.Char value='a'
              CALL .to type=kotlin.Pair<kotlin.Int, kotlin.Char> operator=null
                $receiver: CONST Int type=kotlin.Int value='2'
                that: CONST Char type=kotlin.Char value='b'
          k1: CONST Int type=kotlin.Int value='1'
          k2: CONST Int type=kotlin.Int value='2'
        CALL .testMapValues type=kotlin.Unit operator=null
          map: CALL .hashMapOf type=java.util.HashMap<kotlin.Int, kotlin.Char> operator=null
            pairs: VARARG type=Array<out Pair<Int, Char>> varargElementType=Pair<Int, Char>
              CALL .to type=kotlin.Pair<kotlin.Int, kotlin.Char> operator=null
                $receiver: CONST Int type=kotlin.Int value='1'
                that: CONST Char type=kotlin.Char value='a'
              CALL .to type=kotlin.Pair<kotlin.Int, kotlin.Char> operator=null
                $receiver: CONST Int type=kotlin.Int value='2'
                that: CONST Char type=kotlin.Char value='b'
          v1: CONST Char type=kotlin.Char value='a'
          v2: CONST Char type=kotlin.Char value='b'
        CALL .testMapEntrySet type=kotlin.Unit operator=null
          map: CALL .hashMapOf type=java.util.HashMap<kotlin.Int, kotlin.Char> operator=null
            pairs: VARARG type=Array<out Pair<Int, Char>> varargElementType=Pair<Int, Char>
              CALL .to type=kotlin.Pair<kotlin.Int, kotlin.Char> operator=null
                $receiver: CONST Int type=kotlin.Int value='1'
                that: CONST Char type=kotlin.Char value='a'
          k: CONST Int type=kotlin.Int value='1'
          v: CONST Char type=kotlin.Char value='a'
        CALL .testMutableMapEntry type=kotlin.Unit operator=null
          map: CALL .hashMapOf type=java.util.HashMap<kotlin.Int, kotlin.Char> operator=null
            pairs: VARARG type=Array<out Pair<Int, Char>> varargElementType=Pair<Int, Char>
              CALL .to type=kotlin.Pair<kotlin.Int, kotlin.Char> operator=null
                $receiver: CONST Int type=kotlin.Int value='1'
                that: CONST Char type=kotlin.Char value='a'
          k1: CONST Int type=kotlin.Int value='1'
          v: CONST Char type=kotlin.Char value='b'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .testCollection type=kotlin.Unit operator=null
        CALL .testList type=kotlin.Unit operator=null
        CALL .testMap type=kotlin.Unit operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
    FUN public fun </*0*/ T> assertEqualCollections(/*0*/ c1: kotlin.collections.Collection<T>, /*1*/ c2: kotlin.collections.Collection<T>): kotlin.Unit
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=assertEqualCollections
          CALL .assertEquals type=kotlin.Unit operator=null
            expected: CALL .toCollection type=java.util.HashSet<T> operator=null
              $receiver: GET_VAR c1 type=kotlin.collections.Collection<T> operator=null
              destination: CALL .hashSetOf type=java.util.HashSet<T> operator=null
            actual: CALL .toCollection type=java.util.HashSet<T> operator=null
              $receiver: GET_VAR c2 type=kotlin.collections.Collection<T> operator=null
              destination: CALL .hashSetOf type=java.util.HashSet<T> operator=null
