MODULE <test-module>
  FILE /kt1406.kt
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      FUN public final fun foo(): kotlin.Unit
        BLOCK_BODY
          VAR val items: kotlin.collections.Collection<pack.Item>
            BLOCK type=kotlin.collections.(Mutable)Set<pack.Item!> operator=EXCLEXCL
              VAR val tmp0_notnull: kotlin.collections.(Mutable)Set<pack.Item!>!
                CALL .singleton type=kotlin.collections.(Mutable)Set<pack.Item!>! operator=null
                  p0: CALL .<init> type=pack.Item operator=null
              WHEN type=kotlin.collections.(Mutable)Set<pack.Item!> operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp0_notnull type=kotlin.collections.(Mutable)Set<pack.Item!>! operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.collections.Set<pack.Item!>
                  GET_VAR tmp0_notnull type=kotlin.collections.(Mutable)Set<pack.Item!>! operator=null
          VAR val result: java.util.ArrayList<pack.Item>
            CALL .<init> type=java.util.ArrayList<pack.Item> operator=null
          VAR val pattern: java.util.regex.Pattern?
            CALL .compile type=java.util.regex.Pattern! operator=null
              p0: CONST String type=kotlin.String value='...'
          CALL .filterTo type=java.util.ArrayList<pack.Item> operator=null
            $receiver: GET_VAR items type=kotlin.collections.Collection<pack.Item> operator=null
            destination: GET_VAR result type=java.util.ArrayList<pack.Item> operator=null
            predicate: BLOCK type=(pack.Item) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: pack.Item): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .matches type=kotlin.Boolean operator=null
                      $this: BLOCK type=java.util.regex.Matcher operator=EXCLEXCL
                        VAR val tmp1_notnull: java.util.regex.Matcher!
                          CALL .matcher type=java.util.regex.Matcher! operator=null
                            $this: BLOCK type=java.util.regex.Pattern operator=EXCLEXCL
                              VAR val tmp0_notnull: java.util.regex.Pattern?
                                GET_VAR pattern type=java.util.regex.Pattern? operator=null
                              WHEN type=java.util.regex.Pattern operator=null
                                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                                  arg0: GET_VAR tmp0_notnull type=java.util.regex.Pattern? operator=null
                                  arg1: CONST Null type=kotlin.Nothing? value='null'
                                then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                                else: GET_VAR tmp0_notnull type=java.util.regex.Pattern? operator=null
                            p0: CALL .name type=kotlin.String operator=null
                              $this: THIS public final class C type=pack.C
                              $receiver: GET_VAR it type=pack.Item operator=null
                        WHEN type=java.util.regex.Matcher operator=null
                          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR tmp1_notnull type=java.util.regex.Matcher! operator=null
                            arg1: CONST Null type=kotlin.Nothing? value='null'
                          then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                          else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.util.regex.Matcher
                            GET_VAR tmp1_notnull type=java.util.regex.Matcher! operator=null
              CALLABLE_REFERENCE <anonymous> type=(pack.Item) -> kotlin.Boolean operator=LAMBDA
      FUN private final fun pack.Item.name(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=name
            CONST String type=kotlin.String value=''
    CLASS CLASS Item
      CONSTRUCTOR public constructor Item()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Item
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .foo type=kotlin.Unit operator=null
          $this: CALL .<init> type=pack.C operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
