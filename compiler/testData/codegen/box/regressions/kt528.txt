MODULE <test-module>
  FILE /kt528.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val input: java.io.StringReader
          CALL .<init> type=java.io.StringReader operator=null
            p0: CONST String type=kotlin.String value='/aaa/bbb/ccc/ddd'
        VAR val luhny: mask.Luhny
          CALL .<init> type=mask.Luhny operator=null
        CALL .forEachChar type=kotlin.Unit operator=null
          $receiver: GET_VAR input type=java.io.StringReader operator=null
          body: BLOCK type=(kotlin.Char) -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(/*0*/ it: kotlin.Char): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .charIn type=kotlin.Unit operator=null
                    $this: GET_VAR luhny type=mask.Luhny operator=null
                    it: GET_VAR it type=kotlin.Char operator=null
            CALLABLE_REFERENCE <anonymous> type=(kotlin.Char) -> kotlin.Unit operator=LAMBDA
        CALL .printAll type=kotlin.Unit operator=null
          $this: GET_VAR luhny type=mask.Luhny operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
    CLASS CLASS Luhny
      CONSTRUCTOR public constructor Luhny()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Luhny
      PROPERTY public final val buffer: java.util.LinkedList<kotlin.Char>
        EXPRESSION_BODY
          CALL .<init> type=java.util.LinkedList<kotlin.Char> operator=null
      PROPERTY public final val digits: java.util.LinkedList<kotlin.Int>
        EXPRESSION_BODY
          CALL .<init> type=java.util.LinkedList<kotlin.Int> operator=null
      PROPERTY public final var toBeMasked: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='0'
      FUN public final fun charIn(/*0*/ it: kotlin.Char): kotlin.Unit
        BLOCK_BODY
          CALL .addLast type=kotlin.Unit operator=null
            $this: CALL .<get-buffer> type=java.util.LinkedList<kotlin.Char> operator=GET_PROPERTY
              $this: THIS public final class Luhny type=mask.Luhny
            p0: GET_VAR it type=kotlin.Char operator=null
          WHEN type=kotlin.Unit operator=WHEN
            if: CALL .isDigit type=kotlin.Boolean operator=null
              $receiver: GET_VAR it type=kotlin.Char operator=null
            then: BLOCK type=kotlin.Unit operator=null
              CALL .addLast type=kotlin.Unit operator=null
                $this: CALL .<get-digits> type=java.util.LinkedList<kotlin.Int> operator=GET_PROPERTY
                  $this: THIS public final class Luhny type=mask.Luhny
                p0: CALL .minus type=kotlin.Int operator=MINUS
                  $this: GET_VAR it type=kotlin.Char operator=null
                  other: CONST Char type=kotlin.Char value='0'
            if: WHEN type=kotlin.Boolean operator=OROR
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR it type=kotlin.Char operator=null
                arg1: CONST Char type=kotlin.Char value=' '
              then: CONST Boolean type=kotlin.Boolean value='true'
              else: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR it type=kotlin.Char operator=null
                arg1: CONST Char type=kotlin.Char value='-'
            then: BLOCK type=kotlin.Unit operator=null
            else: BLOCK type=kotlin.Unit operator=null
              CALL .printAll type=kotlin.Unit operator=null
                $this: THIS public final class Luhny type=mask.Luhny
              CALL .clear type=kotlin.Unit operator=null
                $this: CALL .<get-digits> type=java.util.LinkedList<kotlin.Int> operator=GET_PROPERTY
                  $this: THIS public final class Luhny type=mask.Luhny
          WHEN type=kotlin.Unit operator=IF
            if: CALL .GT0 type=kotlin.Boolean operator=GT
              arg0: CALL .compareTo type=kotlin.Int operator=GT
                $this: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                  $this: CALL .<get-digits> type=java.util.LinkedList<kotlin.Int> operator=GET_PROPERTY
                    $this: THIS public final class Luhny type=mask.Luhny
                other: CONST Int type=kotlin.Int value='16'
            then: CALL .printOneDigit type=kotlin.Unit operator=null
              $this: THIS public final class Luhny type=mask.Luhny
          CALL .check type=kotlin.Unit operator=null
            $this: THIS public final class Luhny type=mask.Luhny
      FUN public final fun check(): kotlin.Unit
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=IF
            if: CALL .LT0 type=kotlin.Boolean operator=LT
              arg0: CALL .compareTo type=kotlin.Int operator=LT
                $this: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                  $this: CALL .<get-digits> type=java.util.LinkedList<kotlin.Int> operator=GET_PROPERTY
                    $this: THIS public final class Luhny type=mask.Luhny
                other: CONST Int type=kotlin.Int value='14'
            then: RETURN type=kotlin.Nothing from=check
          CALL .print type=kotlin.Unit operator=null
            message: CONST String type=kotlin.String value='check'
          VAR val sum: kotlin.Int
            CALL .sum type=kotlin.Int operator=null
              $receiver: CALL .<get-digits> type=java.util.LinkedList<kotlin.Int> operator=GET_PROPERTY
                $this: THIS public final class Luhny type=mask.Luhny
              f: BLOCK type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ i: kotlin.Int, /*1*/ d: kotlin.Int): kotlin.Int
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      WHEN type=kotlin.Int operator=IF
                        if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                          arg0: CALL .mod type=kotlin.Int operator=PERC
                            $this: GET_VAR i type=kotlin.Int operator=null
                            other: CONST Int type=kotlin.Int value='2'
                          arg1: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                            $this: CALL .<get-digits> type=java.util.LinkedList<kotlin.Int> operator=GET_PROPERTY
                              $this: THIS public final class Luhny type=mask.Luhny
                        then: BLOCK type=kotlin.Int operator=null
                          VAR val f: kotlin.Int
                            CALL .div type=kotlin.Int operator=DIV
                              $this: CALL .times type=kotlin.Int operator=MUL
                                $this: GET_VAR d type=kotlin.Int operator=null
                                other: CONST Int type=kotlin.Int value='2'
                              other: CONST Int type=kotlin.Int value='10'
                          VAR val s: kotlin.Int
                            CALL .mod type=kotlin.Int operator=PERC
                              $this: CALL .times type=kotlin.Int operator=MUL
                                $this: GET_VAR d type=kotlin.Int operator=null
                                other: CONST Int type=kotlin.Int value='2'
                              other: CONST Int type=kotlin.Int value='10'
                          CALL .pr type=kotlin.Int operator=null
                            $receiver: CALL .plus type=kotlin.Int operator=PLUS
                              $this: GET_VAR f type=kotlin.Int operator=null
                              other: GET_VAR s type=kotlin.Int operator=null
                            f: BLOCK type=(kotlin.Int) -> kotlin.Unit operator=LAMBDA
                              FUN local final fun <anonymous>(/*0*/ it: kotlin.Int): kotlin.Unit
                                BLOCK_BODY
                                  RETURN type=kotlin.Nothing from=<anonymous>
                              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Unit operator=LAMBDA
                        else: GET_VAR d type=kotlin.Int operator=null
                CALLABLE_REFERENCE <anonymous> type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=LAMBDA
          WHEN type=kotlin.Unit operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .mod type=kotlin.Int operator=PERC
                $this: GET_VAR sum type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='10'
              arg1: CONST Int type=kotlin.Int value='0'
            then: BLOCK type=kotlin.Unit operator=null
              CALL .print type=kotlin.Unit operator=null
                message: CONST String type=kotlin.String value='s'
              CALL .<set-toBeMasked> type=kotlin.Unit operator=EQ
                $this: THIS public final class Luhny type=mask.Luhny
                <set-?>: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                  $this: CALL .<get-digits> type=java.util.LinkedList<kotlin.Int> operator=GET_PROPERTY
                    $this: THIS public final class Luhny type=mask.Luhny
      FUN public final fun printOneDigit(): kotlin.Unit
        BLOCK_BODY
          WHILE label=null operator=WHILE_LOOP
            condition: CALL .not type=kotlin.Boolean operator=EXCL
              $this: CALL .isEmpty type=kotlin.Boolean operator=null
                $this: CALL .<get-buffer> type=java.util.LinkedList<kotlin.Char> operator=GET_PROPERTY
                  $this: THIS public final class Luhny type=mask.Luhny
            body: BLOCK type=kotlin.Unit operator=null
              VAR val c: kotlin.Char!
                CALL .removeFirst type=kotlin.Char! operator=null
                  $this: CALL .<get-buffer> type=java.util.LinkedList<kotlin.Char> operator=GET_PROPERTY
                    $this: THIS public final class Luhny type=mask.Luhny
              CALL .out type=kotlin.Unit operator=null
                $this: THIS public final class Luhny type=mask.Luhny
                c: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Char
                  GET_VAR c type=kotlin.Char! operator=null
              WHEN type=kotlin.Unit operator=IF
                if: CALL .isDigit type=kotlin.Boolean operator=null
                  $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Char
                    GET_VAR c type=kotlin.Char! operator=null
                then: BLOCK type=kotlin.Nothing operator=null
                  CALL .removeFirst type=kotlin.Int! operator=null
                    $this: CALL .<get-digits> type=java.util.LinkedList<kotlin.Int> operator=GET_PROPERTY
                      $this: THIS public final class Luhny type=mask.Luhny
                  RETURN type=kotlin.Nothing from=printOneDigit
      FUN public final fun printAll(): kotlin.Unit
        BLOCK_BODY
          WHILE label=null operator=WHILE_LOOP
            condition: CALL .not type=kotlin.Boolean operator=EXCL
              $this: CALL .isEmpty type=kotlin.Boolean operator=null
                $this: CALL .<get-buffer> type=java.util.LinkedList<kotlin.Char> operator=GET_PROPERTY
                  $this: THIS public final class Luhny type=mask.Luhny
            body: CALL .out type=kotlin.Unit operator=null
              $this: THIS public final class Luhny type=mask.Luhny
              c: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Char
                CALL .removeFirst type=kotlin.Char! operator=null
                  $this: CALL .<get-buffer> type=java.util.LinkedList<kotlin.Char> operator=GET_PROPERTY
                    $this: THIS public final class Luhny type=mask.Luhny
      FUN public final fun out(/*0*/ c: kotlin.Char): kotlin.Unit
        BLOCK_BODY
          WHEN type=kotlin.Any operator=IF
            if: CALL .GT0 type=kotlin.Boolean operator=GT
              arg0: CALL .compareTo type=kotlin.Int operator=GT
                $this: CALL .<get-toBeMasked> type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS public final class Luhny type=mask.Luhny
                other: CONST Int type=kotlin.Int value='0'
            then: BLOCK type=kotlin.Int operator=null
              CALL .print type=kotlin.Unit operator=null
                message: CONST Char type=kotlin.Char value='X'
              BLOCK type=kotlin.Int operator=POSTFIX_DECR
                VAR val tmp0_this: mask.Luhny
                  THIS public final class Luhny type=mask.Luhny
                BLOCK type=kotlin.Int operator=POSTFIX_DECR
                  VAR val tmp1: kotlin.Int
                    CALL .<get-toBeMasked> type=kotlin.Int operator=POSTFIX_DECR
                      $this: GET_VAR tmp0_this type=mask.Luhny operator=null
                  CALL .<set-toBeMasked> type=kotlin.Unit operator=POSTFIX_DECR
                    $this: GET_VAR tmp0_this type=mask.Luhny operator=null
                    <set-?>: CALL .dec type=kotlin.Int operator=POSTFIX_DECR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
            else: BLOCK type=kotlin.Unit operator=null
    FUN public fun </*0*/ T> T.pr(/*0*/ f: (T) -> kotlin.Unit): T
      BLOCK_BODY
        CALL .invoke type=kotlin.Unit operator=INVOKE
          $this: GET_VAR f type=(T) -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
          p1: $RECEIVER of: pr type=T
        RETURN type=kotlin.Nothing from=pr
          $RECEIVER of: pr type=T
    FUN public fun java.util.LinkedList<kotlin.Int>.sum(/*0*/ f: (kotlin.Int, kotlin.Int) -> kotlin.Int): kotlin.Int
      BLOCK_BODY
        VAR var sum: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='1'
                other: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                  $this: $RECEIVER of: sum type=java.util.LinkedList<kotlin.Int>
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                VAR val j: kotlin.Int
                  CALL .minus type=kotlin.Int operator=MINUS
                    $this: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                      $this: $RECEIVER of: sum type=java.util.LinkedList<kotlin.Int>
                    other: GET_VAR i type=kotlin.Int operator=null
                SET_VAR sum type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.Int operator=PLUSEQ
                    $this: GET_VAR sum type=kotlin.Int operator=PLUSEQ
                    other: CALL .invoke type=kotlin.Int operator=INVOKE
                      $this: GET_VAR f type=(kotlin.Int, kotlin.Int) -> kotlin.Int operator=VARIABLE_AS_FUNCTION
                      p1: GET_VAR j type=kotlin.Int operator=null
                      p2: CALL .get type=kotlin.Int operator=null
                        $this: $RECEIVER of: sum type=java.util.LinkedList<kotlin.Int>
                        index: GET_VAR j type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=sum
          GET_VAR sum type=kotlin.Int operator=null
    FUN public fun java.io.Reader.forEachChar(/*0*/ body: (kotlin.Char) -> kotlin.Unit): kotlin.Unit
      BLOCK_BODY
        DO_WHILE label=null operator=DO_WHILE_LOOP
          body: BLOCK type=kotlin.Unit operator=null
            VAR var i: kotlin.Int
              CALL .read type=kotlin.Int operator=null
                $this: $RECEIVER of: forEachChar type=java.io.Reader
            WHEN type=kotlin.Unit operator=IF
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR i type=kotlin.Int operator=null
                arg1: CONST Int type=kotlin.Int value='-1'
              then: BREAK label=null loop.label=null depth=0
            CALL .invoke type=kotlin.Unit operator=INVOKE
              $this: GET_VAR body type=(kotlin.Char) -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
              p1: CALL .toChar type=kotlin.Char operator=null
                $this: GET_VAR i type=kotlin.Int operator=null
          condition: CONST Boolean type=kotlin.Boolean value='true'
