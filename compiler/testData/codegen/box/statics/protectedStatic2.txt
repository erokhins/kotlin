MODULE <test-module>
  FILE /Kotlin.kt
    CLASS CLASS Kotlin
      CONSTRUCTOR public constructor Kotlin()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Derived
          INSTANCE_INITIALIZER_CALL classDescriptor=Kotlin
      FUN public final fun doTest(): kotlin.String
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .invoke type=kotlin.String! operator=null
                  $this: BLOCK type=() -> kotlin.String! operator=LAMBDA
                    FUN local final fun <anonymous>(): kotlin.String!
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          GET_BACKING_FIELD TEST type=kotlin.String! operator=GET_PROPERTY
                    CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String! operator=LAMBDA
                arg1: CONST String type=kotlin.String value='DERIVED'
            then: RETURN type=kotlin.Nothing from=doTest
              CONST String type=kotlin.String value='fail 1'
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .invoke type=kotlin.String! operator=null
                  $this: BLOCK type=() -> kotlin.String! operator=LAMBDA
                    FUN local final fun <anonymous>(): kotlin.String!
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          CALL .test type=kotlin.String! operator=null
                    CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String! operator=LAMBDA
                arg1: CONST String type=kotlin.String value='DERIVED'
            then: RETURN type=kotlin.Nothing from=doTest
              CONST String type=kotlin.String value='fail 2'
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .invoke type=kotlin.String! operator=null
                  $this: BLOCK type=() -> kotlin.String! operator=LAMBDA
                    FUN local final fun <anonymous>(): kotlin.String!
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          GET_BACKING_FIELD TEST type=kotlin.String! operator=GET_PROPERTY
                    CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String! operator=LAMBDA
                arg1: CONST String type=kotlin.String value='DERIVED'
            then: RETURN type=kotlin.Nothing from=doTest
              CONST String type=kotlin.String value='fail 3'
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .invoke type=kotlin.String! operator=null
                  $this: BLOCK type=() -> kotlin.String! operator=LAMBDA
                    FUN local final fun <anonymous>(): kotlin.String!
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          CALL .test type=kotlin.String! operator=null
                    CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String! operator=LAMBDA
                arg1: CONST String type=kotlin.String value='DERIVED'
            then: RETURN type=kotlin.Nothing from=doTest
              CONST String type=kotlin.String value='fail 4'
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .invoke type=kotlin.String! operator=null
                  $this: BLOCK type=() -> kotlin.String! operator=LAMBDA
                    FUN local final fun <anonymous>(): kotlin.String!
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          GET_BACKING_FIELD TEST type=kotlin.String! operator=GET_PROPERTY
                    CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String! operator=LAMBDA
                arg1: CONST String type=kotlin.String value='BASE'
            then: RETURN type=kotlin.Nothing from=doTest
              CONST String type=kotlin.String value='fail 5'
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .invoke type=kotlin.String! operator=null
                  $this: BLOCK type=() -> kotlin.String! operator=LAMBDA
                    FUN local final fun <anonymous>(): kotlin.String!
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          CALL .test type=kotlin.String! operator=null
                    CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String! operator=LAMBDA
                arg1: CONST String type=kotlin.String value='BASE'
            then: RETURN type=kotlin.Nothing from=doTest
              CONST String type=kotlin.String value='fail 6'
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .invoke type=kotlin.String! operator=null
                  $this: BLOCK type=() -> kotlin.String! operator=LAMBDA
                    FUN local final fun <anonymous>(): kotlin.String!
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          GET_BACKING_FIELD BASE_ONLY type=kotlin.String! operator=GET_PROPERTY
                    CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String! operator=LAMBDA
                arg1: CONST String type=kotlin.String value='BASE'
            then: RETURN type=kotlin.Nothing from=doTest
              CONST String type=kotlin.String value='fail 7'
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .invoke type=kotlin.String! operator=null
                  $this: BLOCK type=() -> kotlin.String! operator=LAMBDA
                    FUN local final fun <anonymous>(): kotlin.String!
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          CALL .baseOnly type=kotlin.String! operator=null
                    CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String! operator=LAMBDA
                arg1: CONST String type=kotlin.String value='BASE'
            then: RETURN type=kotlin.Nothing from=doTest
              CONST String type=kotlin.String value='fail 8'
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .invoke type=kotlin.String! operator=null
                  $this: BLOCK type=() -> kotlin.String! operator=LAMBDA
                    FUN local final fun <anonymous>(): kotlin.String!
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          GET_BACKING_FIELD BASE_ONLY type=kotlin.String! operator=GET_PROPERTY
                    CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String! operator=LAMBDA
                arg1: CONST String type=kotlin.String value='BASE'
            then: RETURN type=kotlin.Nothing from=doTest
              CONST String type=kotlin.String value='fail 9'
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .invoke type=kotlin.String! operator=null
                  $this: BLOCK type=() -> kotlin.String! operator=LAMBDA
                    FUN local final fun <anonymous>(): kotlin.String!
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          CALL .baseOnly type=kotlin.String! operator=null
                    CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String! operator=LAMBDA
                arg1: CONST String type=kotlin.String value='BASE'
            then: RETURN type=kotlin.Nothing from=doTest
              CONST String type=kotlin.String value='fail 10'
          RETURN type=kotlin.Nothing from=doTest
            CONST String type=kotlin.String value='OK'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          CALL .doTest type=kotlin.String operator=null
            $this: CALL .<init> type=anotherPackage.Kotlin operator=null
