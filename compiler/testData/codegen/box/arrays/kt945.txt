MODULE <test-module>
  FILE /kt945.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val data: kotlin.Array<kotlin.Array<kotlin.Boolean>>
          CALL .<init> type=kotlin.Array<kotlin.Array<kotlin.Boolean>> operator=null
            size: CONST Int type=kotlin.Int value='3'
            init: BLOCK type=(kotlin.Int) -> kotlin.Array<kotlin.Boolean> operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.Int): kotlin.Array<kotlin.Boolean>
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<init> type=kotlin.Array<kotlin.Boolean> operator=null
                      size: CONST Int type=kotlin.Int value='4'
                      init: BLOCK type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
                        FUN local final fun <anonymous>(/*0*/ it: kotlin.Int): kotlin.Boolean
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from=<anonymous>
                              CONST Boolean type=kotlin.Boolean value='false'
                        CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Boolean operator=LAMBDA
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Array<kotlin.Boolean> operator=LAMBDA
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.Array<kotlin.Boolean>>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.Array<kotlin.Boolean>> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR data type=kotlin.Array<kotlin.Array<kotlin.Boolean>> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.Array<kotlin.Boolean>> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val d: kotlin.Array<kotlin.Boolean>
                CALL .next type=kotlin.Array<kotlin.Boolean> operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.Array<kotlin.Boolean>> operator=null
              BLOCK type=kotlin.Unit operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                    arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                        $this: GET_VAR d type=kotlin.Array<kotlin.Boolean> operator=null
                      arg1: CONST Int type=kotlin.Int value='4'
                  then: RETURN type=kotlin.Nothing from=box
                    CONST String type=kotlin.String value='fail'
                BLOCK type=kotlin.Unit operator=FOR_LOOP
                  VAR val tmp1_iterator: kotlin.collections.Iterator<kotlin.Boolean>
                    CALL .iterator type=kotlin.collections.Iterator<kotlin.Boolean> operator=FOR_LOOP_ITERATOR
                      $this: GET_VAR d type=kotlin.Array<kotlin.Boolean> operator=null
                  WHILE label=null operator=FOR_LOOP_INNER_WHILE
                    condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
                      $this: GET_VAR tmp1_iterator type=kotlin.collections.Iterator<kotlin.Boolean> operator=null
                    body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
                      VAR val b: kotlin.Boolean
                        CALL .next type=kotlin.Boolean operator=FOR_LOOP_NEXT
                          $this: GET_VAR tmp1_iterator type=kotlin.collections.Iterator<kotlin.Boolean> operator=null
                      WHEN type=kotlin.Unit operator=IF
                        if: GET_VAR b type=kotlin.Boolean operator=null
                        then: RETURN type=kotlin.Nothing from=box
                          CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
