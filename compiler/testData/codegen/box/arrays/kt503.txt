MODULE <test-module>
  FILE /kt503.kt
    FUN public fun iarr(/*0*/ vararg a: kotlin.Int /*kotlin.IntArray*/): kotlin.IntArray
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=iarr
          GET_VAR a type=kotlin.IntArray operator=null
    FUN public fun </*0*/ T> array(/*0*/ vararg a: T /*kotlin.Array<out T>*/): kotlin.Array<out T>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=array
          GET_VAR a type=kotlin.Array<out T> operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val tests: kotlin.Array<out kotlin.IntArray>
          CALL .array type=kotlin.Array<out kotlin.IntArray> operator=null
            a: VARARG type=Array<out IntArray> varargElementType=IntArray
              CALL .iarr type=kotlin.IntArray operator=null
                a: VARARG type=IntArray varargElementType=Int
                  CONST Int type=kotlin.Int value='6'
                  CONST Int type=kotlin.Int value='5'
                  CONST Int type=kotlin.Int value='4'
                  CONST Int type=kotlin.Int value='3'
                  CONST Int type=kotlin.Int value='2'
                  CONST Int type=kotlin.Int value='1'
              CALL .iarr type=kotlin.IntArray operator=null
                a: VARARG type=IntArray varargElementType=Int
                  CONST Int type=kotlin.Int value='1'
                  CONST Int type=kotlin.Int value='2'
              CALL .iarr type=kotlin.IntArray operator=null
                a: VARARG type=IntArray varargElementType=Int
                  CONST Int type=kotlin.Int value='1'
                  CONST Int type=kotlin.Int value='2'
                  CONST Int type=kotlin.Int value='3'
              CALL .iarr type=kotlin.IntArray operator=null
                a: VARARG type=IntArray varargElementType=Int
                  CONST Int type=kotlin.Int value='1'
                  CONST Int type=kotlin.Int value='2'
                  CONST Int type=kotlin.Int value='3'
                  CONST Int type=kotlin.Int value='4'
              CALL .iarr type=kotlin.IntArray operator=null
                a: VARARG type=IntArray varargElementType=Int
                  CONST Int type=kotlin.Int value='1'
        VAR var n: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Unit operator=null
            VAR var i: kotlin.Int
              CONST Int type=kotlin.Int value='0'
            WHILE label=null operator=WHILE_LOOP
              condition: CONST Boolean type=kotlin.Boolean value='true'
              body: BLOCK type=kotlin.Unit operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .thirdElementIsThree type=kotlin.Boolean operator=null
                    a: CALL .get type=kotlin.IntArray operator=GET_ARRAY_ELEMENT
                      $this: GET_VAR tests type=kotlin.Array<out kotlin.IntArray> operator=null
                      index: BLOCK type=kotlin.Int operator=POSTFIX_INCR
                        VAR val tmp0: kotlin.Int
                          GET_VAR i type=kotlin.Int operator=POSTFIX_INCR
                        SET_VAR i type=kotlin.Unit operator=POSTFIX_INCR
                          CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                            $this: GET_VAR tmp0 type=kotlin.Int operator=null
                        GET_VAR tmp0 type=kotlin.Int operator=null
                  then: BLOCK type=kotlin.Int operator=POSTFIX_INCR
                    VAR val tmp1: kotlin.Int
                      GET_VAR n type=kotlin.Int operator=POSTFIX_INCR
                    SET_VAR n type=kotlin.Unit operator=POSTFIX_INCR
                      CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                        $this: GET_VAR tmp1 type=kotlin.Int operator=null
                    GET_VAR tmp1 type=kotlin.Int operator=null
          catch e: BLOCK type=kotlin.Unit operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR n type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='2'
            then: CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
    FUN public fun thirdElementIsThree(/*0*/ a: kotlin.IntArray): kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=thirdElementIsThree
          WHEN type=kotlin.Boolean operator=ANDAND
            if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
              arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                $this: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR a type=kotlin.IntArray operator=null
                other: CONST Int type=kotlin.Int value='3'
            then: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .get type=kotlin.Int operator=GET_ARRAY_ELEMENT
                $this: GET_VAR a type=kotlin.IntArray operator=null
                index: CONST Int type=kotlin.Int value='2'
              arg1: CONST Int type=kotlin.Int value='3'
            else: CONST Boolean type=kotlin.Boolean value='false'
