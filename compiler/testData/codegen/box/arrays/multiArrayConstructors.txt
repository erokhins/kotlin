MODULE <test-module>
  FILE /multiArrayConstructors.kt
    FUN public fun stringMultiArray(): kotlin.Array<kotlin.Array<kotlin.String>>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=stringMultiArray
          CALL .<init> type=kotlin.Array<kotlin.Array<kotlin.String>> operator=null
            size: CONST Int type=kotlin.Int value='3'
            init: BLOCK type=(kotlin.Int) -> kotlin.Array<kotlin.String> operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ i: kotlin.Int): kotlin.Array<kotlin.String>
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<init> type=kotlin.Array<kotlin.String> operator=null
                      size: CONST Int type=kotlin.Int value='3'
                      init: BLOCK type=(kotlin.Int) -> kotlin.String operator=LAMBDA
                        FUN local final fun <anonymous>(/*0*/ j: kotlin.Int): kotlin.String
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from=<anonymous>
                              STRING_CONCATENATION type=kotlin.String
                                GET_VAR i type=kotlin.Int operator=null
                                CONST String type=kotlin.String value='-'
                                GET_VAR j type=kotlin.Int operator=null
                        CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.String operator=LAMBDA
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Array<kotlin.String> operator=LAMBDA
    FUN public fun stringNullableMultiArray(): kotlin.Array<kotlin.Array<kotlin.String?>>
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=stringNullableMultiArray
          CALL .<init> type=kotlin.Array<kotlin.Array<kotlin.String?>> operator=null
            size: CONST Int type=kotlin.Int value='3'
            init: BLOCK type=(kotlin.Int) -> kotlin.Array<kotlin.String?> operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ i: kotlin.Int): kotlin.Array<kotlin.String?>
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    WHEN type=kotlin.Array<kotlin.String?> operator=IF
                      if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR i type=kotlin.Int operator=null
                        arg1: CONST Int type=kotlin.Int value='1'
                      then: TYPE_OP operator=CAST typeOperand=kotlin.Array<kotlin.String?>
                        CALL .<init> type=kotlin.Array<kotlin.String> operator=null
                          size: CONST Int type=kotlin.Int value='3'
                          init: BLOCK type=(kotlin.Int) -> kotlin.String operator=LAMBDA
                            FUN local final fun <anonymous>(/*0*/ j: kotlin.Int): kotlin.String
                              BLOCK_BODY
                                RETURN type=kotlin.Nothing from=<anonymous>
                                  STRING_CONCATENATION type=kotlin.String
                                    GET_VAR i type=kotlin.Int operator=null
                                    CONST String type=kotlin.String value='-'
                                    GET_VAR j type=kotlin.Int operator=null
                            CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.String operator=LAMBDA
                      else: CALL .arrayOfNulls type=kotlin.Array<kotlin.String?> operator=null
                        size: CONST Int type=kotlin.Int value='3'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Array<kotlin.String?> operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val matrix: kotlin.Array<kotlin.Array<kotlin.String>>
          CALL .stringMultiArray type=kotlin.Array<kotlin.Array<kotlin.String>> operator=null
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='0'
                other: CONST Int type=kotlin.Int value='2'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                BLOCK type=kotlin.Unit operator=FOR_LOOP
                  VAR val tmp1_iterator: kotlin.collections.IntIterator
                    CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
                      $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                        $this: CONST Int type=kotlin.Int value='0'
                        other: CONST Int type=kotlin.Int value='2'
                  WHILE label=null operator=FOR_LOOP_INNER_WHILE
                    condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
                      $this: GET_VAR tmp1_iterator type=kotlin.collections.IntIterator operator=null
                    body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
                      VAR val j: kotlin.Int
                        CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                          $this: GET_VAR tmp1_iterator type=kotlin.collections.IntIterator operator=null
                      BLOCK type=kotlin.Unit operator=null
                        CALL .assertEquals type=kotlin.Unit operator=null
                          expected: STRING_CONCATENATION type=kotlin.String
                            GET_VAR i type=kotlin.Int operator=null
                            CONST String type=kotlin.String value='-'
                            GET_VAR j type=kotlin.Int operator=null
                          actual: CALL .get type=kotlin.String operator=GET_ARRAY_ELEMENT
                            $this: CALL .get type=kotlin.Array<kotlin.String> operator=GET_ARRAY_ELEMENT
                              $this: GET_VAR matrix type=kotlin.Array<kotlin.Array<kotlin.String>> operator=null
                              index: GET_VAR i type=kotlin.Int operator=null
                            index: GET_VAR j type=kotlin.Int operator=null
                          message: CONST String type=kotlin.String value='matrix'
        VAR val matrixNullable: kotlin.Array<kotlin.Array<kotlin.String?>>
          CALL .stringNullableMultiArray type=kotlin.Array<kotlin.Array<kotlin.String?>> operator=null
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp2_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='0'
                other: CONST Int type=kotlin.Int value='2'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp2_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val j: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp2_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CONST Null type=kotlin.Nothing? value='null'
                  actual: CALL .get type=kotlin.String? operator=GET_ARRAY_ELEMENT
                    $this: CALL .get type=kotlin.Array<kotlin.String?> operator=GET_ARRAY_ELEMENT
                      $this: GET_VAR matrixNullable type=kotlin.Array<kotlin.Array<kotlin.String?>> operator=null
                      index: CONST Int type=kotlin.Int value='0'
                    index: GET_VAR j type=kotlin.Int operator=null
                  message: CONST String type=kotlin.String value='nullable'
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='1-'
                    GET_VAR j type=kotlin.Int operator=null
                  actual: CALL .get type=kotlin.String? operator=GET_ARRAY_ELEMENT
                    $this: CALL .get type=kotlin.Array<kotlin.String?> operator=GET_ARRAY_ELEMENT
                      $this: GET_VAR matrixNullable type=kotlin.Array<kotlin.Array<kotlin.String?>> operator=null
                      index: CONST Int type=kotlin.Int value='1'
                    index: GET_VAR j type=kotlin.Int operator=null
                  message: CONST String type=kotlin.String value='nullable'
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CONST Null type=kotlin.Nothing? value='null'
                  actual: CALL .get type=kotlin.String? operator=GET_ARRAY_ELEMENT
                    $this: CALL .get type=kotlin.Array<kotlin.String?> operator=GET_ARRAY_ELEMENT
                      $this: GET_VAR matrixNullable type=kotlin.Array<kotlin.Array<kotlin.String?>> operator=null
                      index: CONST Int type=kotlin.Int value='2'
                    index: GET_VAR j type=kotlin.Int operator=null
                  message: CONST String type=kotlin.String value='nullable'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
