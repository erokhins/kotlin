MODULE <test-module>
  FILE /kt7288.kt
    FUN public fun test(/*0*/ b: kotlin.Boolean): kotlin.String
      BLOCK_BODY
        VAR val a: kotlin.Any
          WHEN type=kotlin.Any operator=IF
            if: GET_VAR b type=kotlin.Boolean operator=null
            then: CALL .<init> type=kotlin.IntArray operator=null
              size: CONST Int type=kotlin.Int value='5'
            else: CALL .<init> type=kotlin.LongArray operator=null
              size: CONST Int type=kotlin.Int value='5'
        WHEN type=kotlin.Unit operator=WHEN
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.IntArray
            GET_VAR a type=kotlin.Any operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            VAR val x: kotlin.collections.IntIterator
              CALL .iterator type=kotlin.collections.IntIterator operator=null
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.IntArray
                  GET_VAR a type=kotlin.Any operator=null
            VAR var i: kotlin.Int
              CONST Int type=kotlin.Int value='0'
            WHILE label=null operator=WHILE_LOOP
              condition: CALL .hasNext type=kotlin.Boolean operator=null
                $this: GET_VAR x type=kotlin.collections.IntIterator operator=null
              body: BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                    arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .get type=kotlin.Int operator=GET_ARRAY_ELEMENT
                        $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.IntArray
                          GET_VAR a type=kotlin.Any operator=null
                        index: GET_VAR i type=kotlin.Int operator=null
                      arg1: CALL .next type=kotlin.Int operator=null
                        $this: GET_VAR x type=kotlin.collections.IntIterator operator=null
                  then: RETURN type=kotlin.Nothing from=test
                    STRING_CONCATENATION type=kotlin.String
                      CONST String type=kotlin.String value='Fail '
                      GET_VAR i type=kotlin.Int operator=null
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp0: kotlin.Int
                    GET_VAR i type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR i type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp0 type=kotlin.Int operator=null
                  GET_VAR tmp0 type=kotlin.Int operator=null
            RETURN type=kotlin.Nothing from=test
              CONST String type=kotlin.String value='OK'
          if: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.LongArray
            GET_VAR a type=kotlin.Any operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            VAR val x: kotlin.collections.LongIterator
              CALL .iterator type=kotlin.collections.LongIterator operator=null
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.LongArray
                  GET_VAR a type=kotlin.Any operator=null
            VAR var i: kotlin.Int
              CONST Int type=kotlin.Int value='0'
            WHILE label=null operator=WHILE_LOOP
              condition: CALL .hasNext type=kotlin.Boolean operator=null
                $this: GET_VAR x type=kotlin.collections.LongIterator operator=null
              body: BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                    arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .get type=kotlin.Long operator=GET_ARRAY_ELEMENT
                        $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.LongArray
                          GET_VAR a type=kotlin.Any operator=null
                        index: GET_VAR i type=kotlin.Int operator=null
                      arg1: CALL .next type=kotlin.Long operator=null
                        $this: GET_VAR x type=kotlin.collections.LongIterator operator=null
                  then: RETURN type=kotlin.Nothing from=test
                    STRING_CONCATENATION type=kotlin.String
                      CONST String type=kotlin.String value='Fail '
                      GET_VAR i type=kotlin.Int operator=null
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp1: kotlin.Int
                    GET_VAR i type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR i type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
            RETURN type=kotlin.Nothing from=test
              CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from=test
          CONST String type=kotlin.String value='fail'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test type=kotlin.String operator=null
                b: CONST Boolean type=kotlin.Boolean value='true'
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 1: '
              CALL .test type=kotlin.String operator=null
                b: CONST Boolean type=kotlin.Boolean value='true'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .test type=kotlin.String operator=null
                b: CONST Boolean type=kotlin.Boolean value='false'
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 1: '
              CALL .test type=kotlin.String operator=null
                b: CONST Boolean type=kotlin.Boolean value='false'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
