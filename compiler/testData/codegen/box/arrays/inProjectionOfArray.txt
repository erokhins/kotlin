MODULE <test-module>
  FILE /inProjectionOfArray.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val x: kotlin.Array<kotlin.Array<*>>
          CALL .arrayOf type=kotlin.Array<kotlin.Array<*>> operator=null
            elements: VARARG type=Array<out Array<*>> varargElementType=Array<*>
              CALL .arrayOf type=kotlin.Array<kotlin.Int> operator=null
                elements: VARARG type=Array<out Int> varargElementType=Int
                  CONST Int type=kotlin.Int value='1'
        VAR val y: kotlin.Array<in kotlin.Array<kotlin.String>>
          GET_VAR x type=kotlin.Array<kotlin.Array<*>> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR y type=kotlin.Array<in kotlin.Array<kotlin.String>> operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        CALL .set type=kotlin.Unit operator=EQ
          $this: GET_VAR y type=kotlin.Array<in kotlin.Array<kotlin.String>> operator=null
          index: CONST Int type=kotlin.Int value='0'
          value: CALL .arrayOf type=kotlin.Array<kotlin.String> operator=null
            elements: VARARG type=Array<out String> varargElementType=String
              CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from=box
          TYPE_OP operator=CAST typeOperand=kotlin.String
            CALL .get type=kotlin.Any? operator=GET_ARRAY_ELEMENT
              $this: CALL .get type=kotlin.Array<*> operator=GET_ARRAY_ELEMENT
                $this: GET_VAR x type=kotlin.Array<kotlin.Array<*>> operator=null
                index: CONST Int type=kotlin.Int value='0'
              index: CONST Int type=kotlin.Int value='0'
