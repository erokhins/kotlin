MODULE <test-module>
  FILE /nonLocalReturnArrayConstructor.kt
    FUN public fun testArray(): kotlin.Unit
      BLOCK_BODY
        CALL .<init> type=kotlin.Array<kotlin.String> operator=null
          size: CONST Int type=kotlin.Int value='5'
          init: BLOCK type=(kotlin.Int) -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(/*0*/ i: kotlin.Int): kotlin.String
              BLOCK_BODY
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR i type=kotlin.Int operator=null
                    arg1: CONST Int type=kotlin.Int value='3'
                  then: RETURN type=kotlin.Nothing from=testArray
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .toString type=kotlin.String operator=null
                    $this: GET_VAR i type=kotlin.Int operator=null
            CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.String operator=LAMBDA
        THROW type=kotlin.Nothing
          CALL .<init> type=java.lang.AssertionError operator=null
    FUN public fun testIntArray(): kotlin.Unit
      BLOCK_BODY
        CALL .<init> type=kotlin.IntArray operator=null
          size: CONST Int type=kotlin.Int value='5'
          init: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
            FUN local final fun <anonymous>(/*0*/ i: kotlin.Int): kotlin.Int
              BLOCK_BODY
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR i type=kotlin.Int operator=null
                    arg1: CONST Int type=kotlin.Int value='3'
                  then: RETURN type=kotlin.Nothing from=testIntArray
                RETURN type=kotlin.Nothing from=<anonymous>
                  GET_VAR i type=kotlin.Int operator=null
            CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
        THROW type=kotlin.Nothing
          CALL .<init> type=java.lang.AssertionError operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .testArray type=kotlin.Unit operator=null
        CALL .testIntArray type=kotlin.Unit operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
