MODULE <test-module>
  FILE /MultiDeclForComponentExtensionsValCaptured.kt
    FUN public operator fun kotlin.Int.component1(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=component1
          CALL .plus type=kotlin.Int operator=PLUS
            $this: $RECEIVER of: component1 type=kotlin.Int
            other: CONST Int type=kotlin.Int value='1'
    FUN public operator fun kotlin.Int.component2(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=component2
          CALL .plus type=kotlin.Int operator=PLUS
            $this: $RECEIVER of: component2 type=kotlin.Int
            other: CONST Int type=kotlin.Int value='2'
    FUN public fun doTest(/*0*/ l: kotlin.Array<kotlin.Int>): kotlin.String
      BLOCK_BODY
        VAR var s: kotlin.String
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.Int>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.Int> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR l type=kotlin.Array<kotlin.Int> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.Int> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val tmp1_loop_parameter: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.Int> operator=null
              VAR val a: kotlin.Int
                CALL .component1 type=kotlin.Int operator=COMPONENT_N(index=1)
                  $receiver: GET_VAR tmp1_loop_parameter type=kotlin.Int operator=null
              VAR val b: kotlin.Int
                CALL .component2 type=kotlin.Int operator=COMPONENT_N(index=2)
                  $receiver: GET_VAR tmp1_loop_parameter type=kotlin.Int operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR s type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR s type=kotlin.String operator=PLUSEQ
                    other: CALL .invoke type=kotlin.String operator=null
                      $this: BLOCK type=() -> kotlin.String operator=LAMBDA
                        FUN local final fun <anonymous>(): kotlin.String
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from=<anonymous>
                              STRING_CONCATENATION type=kotlin.String
                                GET_VAR a type=kotlin.Int operator=null
                                CONST String type=kotlin.String value=':'
                                GET_VAR b type=kotlin.Int operator=null
                                CONST String type=kotlin.String value=';'
                        CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
        RETURN type=kotlin.Nothing from=doTest
          GET_VAR s type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val l: kotlin.Array<kotlin.Int>
          CALL .<init> type=kotlin.Array<kotlin.Int> operator=null
            size: CONST Int type=kotlin.Int value='3'
            init: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ x: kotlin.Int): kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    GET_VAR x type=kotlin.Int operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
        VAR val s: kotlin.String
          CALL .doTest type=kotlin.String operator=null
            l: GET_VAR l type=kotlin.Array<kotlin.Int> operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR s type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='1:2;2:3;3:4;'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail: '
              GET_VAR s type=kotlin.String operator=null
