MODULE <test-module>
  FILE /field.kt
    PROPERTY internal val noMangling: kotlin.Int = 1
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='1'
    CLASS CLASS Z
      CONSTRUCTOR public constructor Z()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Z
      PROPERTY internal final var noMangling: kotlin.Int
        EXPRESSION_BODY
          CONST Int type=kotlin.Int value='1'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val clazz: java.lang.Class<test.Z>
          CALL .<get-java> type=java.lang.Class<test.Z> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Z type=kotlin.reflect.KClass<test.Z>
        VAR val classField: java.lang.reflect.Field!
          CALL .getDeclaredField type=java.lang.reflect.Field! operator=null
            $this: GET_VAR clazz type=java.lang.Class<test.Z> operator=null
            p0: CONST String type=kotlin.String value='noMangling'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR classField type=java.lang.reflect.Field! operator=null
            arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Class internal backing field should exist'
        VAR val topLevel: java.lang.reflect.Field!
          CALL .getDeclaredField type=java.lang.reflect.Field! operator=null
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
              CALL .forName type=java.lang.Class<*>! operator=null
                p0: CONST String type=kotlin.String value='test.FieldKt'
            p0: CONST String type=kotlin.String value='noMangling'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR topLevel type=java.lang.reflect.Field! operator=null
            arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Top level internal backing field should exist'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
