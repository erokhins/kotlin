MODULE <test-module>
  FILE /fun.kt
    FUN internal fun noMangling(): kotlin.Int
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=noMangling
          CONST Int type=kotlin.Int value='1'
    CLASS CLASS Z
      CONSTRUCTOR public constructor Z()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Z
      FUN internal final fun mangled(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=mangled
            CONST Int type=kotlin.Int value='1'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val clazz: java.lang.Class<test.Z>
          CALL .<get-java> type=java.lang.Class<test.Z> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Z type=kotlin.reflect.KClass<test.Z>
        VAR val declaredMethods: kotlin.Array<(out) java.lang.reflect.Method!>!
          CALL .<get-declaredMethods> type=kotlin.Array<(out) java.lang.reflect.Method!>! operator=GET_PROPERTY
            $receiver: GET_VAR clazz type=java.lang.Class<test.Z> operator=null
        VAR val mangled: java.lang.reflect.Method?
          CALL .firstOrNull type=java.lang.reflect.Method? operator=null
            $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Method!>
              GET_VAR declaredMethods type=kotlin.Array<(out) java.lang.reflect.Method!>! operator=null
            predicate: BLOCK type=(java.lang.reflect.Method!) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: java.lang.reflect.Method!): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .startsWith type=kotlin.Boolean operator=null
                      $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.String
                        CALL .<get-name> type=kotlin.String! operator=GET_PROPERTY
                          $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                            GET_VAR it type=java.lang.reflect.Method! operator=null
                      prefix: STRING_CONCATENATION type=kotlin.String
                        CONST String type=kotlin.String value='mangled'
                        CONST String type=kotlin.String value='$'
              CALLABLE_REFERENCE <anonymous> type=(java.lang.reflect.Method!) -> kotlin.Boolean operator=LAMBDA
        WHEN type=kotlin.Unit operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR mangled type=java.lang.reflect.Method? operator=null
            arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Class internal function should exist'
        VAR val topLevel: java.lang.reflect.Method!
          CALL .getMethod type=java.lang.reflect.Method! operator=null
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
              CALL .forName type=java.lang.Class<*>! operator=null
                p0: CONST String type=kotlin.String value='test.FunKt'
            p0: CONST String type=kotlin.String value='noMangling'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR topLevel type=java.lang.reflect.Method! operator=null
            arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Top level internal function should exist'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
