MODULE <test-module>
  FILE /closureOfLambdaInLocalClass.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var log: kotlin.String
          CONST String type=kotlin.String value=''
        VAR var s: kotlin.Any?
          CONST Null type=kotlin.Nothing? value='null'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.String>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.String> operator=FOR_LOOP_ITERATOR
              $this: CALL .arrayOf type=kotlin.Array<kotlin.String> operator=null
                elements: VARARG type=Array<out String> varargElementType=String
                  CONST String type=kotlin.String value='1'
                  CONST String type=kotlin.String value='2'
                  CONST String type=kotlin.String value='3'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val t: kotlin.String
                CALL .next type=kotlin.String operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
              BLOCK type=kotlin.Unit operator=null
                CLASS CLASS A
                  CONSTRUCTOR public constructor A()
                    BLOCK_BODY
                      DELEGATING_CONSTRUCTOR_CALL Any
                      INSTANCE_INITIALIZER_CALL classDescriptor=A
                  FUN public final fun foo(): () -> kotlin.String
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=foo
                        BLOCK type=() -> kotlin.String operator=LAMBDA
                          FUN local final fun <anonymous>(): kotlin.String
                            BLOCK_BODY
                              RETURN type=kotlin.Nothing from=<anonymous>
                                GET_VAR t type=kotlin.String operator=null
                          CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR s type=kotlin.Any? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: BLOCK type=kotlin.Unit operator=null
                    SET_VAR s type=kotlin.Unit operator=EQ
                      CALL .<init> type=box.A operator=null
                SET_VAR log type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR log type=kotlin.String operator=PLUSEQ
                    other: CALL .invoke type=kotlin.String operator=null
                      $this: CALL .foo type=() -> kotlin.String operator=null
                        $this: TYPE_OP operator=CAST typeOperand=box.A
                          GET_VAR s type=kotlin.Any? operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR log type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='111'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail1: '
              GET_VAR log type=kotlin.String operator=null
        SET_VAR s type=kotlin.Unit operator=EQ
          CONST Null type=kotlin.Nothing? value='null'
        SET_VAR log type=kotlin.Unit operator=EQ
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp1_iterator: kotlin.collections.Iterator<kotlin.String>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.String> operator=FOR_LOOP_ITERATOR
              $this: CALL .arrayOf type=kotlin.Array<kotlin.String> operator=null
                elements: VARARG type=Array<out String> varargElementType=String
                  CONST String type=kotlin.String value='1'
                  CONST String type=kotlin.String value='2'
                  CONST String type=kotlin.String value='3'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp1_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val t: kotlin.String
                CALL .next type=kotlin.String operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp1_iterator type=kotlin.collections.Iterator<kotlin.String> operator=null
              BLOCK type=kotlin.Unit operator=null
                CLASS CLASS B
                  CONSTRUCTOR public constructor B()
                    BLOCK_BODY
                      DELEGATING_CONSTRUCTOR_CALL Any
                      INSTANCE_INITIALIZER_CALL classDescriptor=B
                  PROPERTY public final val y: kotlin.String
                    EXPRESSION_BODY
                      GET_VAR t type=kotlin.String operator=null
                  FUN public final fun foo(): () -> kotlin.String
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=foo
                        BLOCK type=() -> kotlin.String operator=LAMBDA
                          FUN local final fun <anonymous>(): kotlin.String
                            BLOCK_BODY
                              RETURN type=kotlin.Nothing from=<anonymous>
                                CALL .<get-y> type=kotlin.String operator=GET_PROPERTY
                                  $this: THIS local final class B type=box.B
                          CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR s type=kotlin.Any? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: BLOCK type=kotlin.Unit operator=null
                    SET_VAR s type=kotlin.Unit operator=EQ
                      CALL .<init> type=box.B operator=null
                SET_VAR log type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR log type=kotlin.String operator=PLUSEQ
                    other: CALL .invoke type=kotlin.String operator=null
                      $this: CALL .foo type=() -> kotlin.String operator=null
                        $this: TYPE_OP operator=CAST typeOperand=box.B
                          GET_VAR s type=kotlin.Any? operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR log type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='111'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail2: '
              GET_VAR log type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
