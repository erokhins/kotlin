MODULE <test-module>
  FILE /intersectionTypeMultipleBounds.kt
    CLASS INTERFACE A
      FUN public abstract fun foo(): kotlin.Any?
      FUN public abstract fun bar(): kotlin.String
    CLASS INTERFACE B
      FUN public abstract fun foo(): kotlin.String
    FUN public fun </*0*/ T : A> bar(/*0*/ x: T): kotlin.String where T : B
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: WHEN type=kotlin.Boolean operator=OROR
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-length> type=kotlin.Int operator=GET_PROPERTY
                  $this: CALL .foo type=kotlin.String operator=null
                    $this: GET_VAR x type=T operator=null
                arg1: CONST Int type=kotlin.Int value='2'
            then: CONST Boolean type=kotlin.Boolean value='true'
            else: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .foo type=kotlin.String operator=null
                  $this: GET_VAR x type=T operator=null
                arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=bar
            CONST String type=kotlin.String value='fail 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .bar type=kotlin.String operator=null
                $this: GET_VAR x type=T operator=null
              arg1: CONST String type=kotlin.String value='ok'
          then: RETURN type=kotlin.Nothing from=bar
            CONST String type=kotlin.String value='fail 2'
        RETURN type=kotlin.Nothing from=bar
          CONST String type=kotlin.String value='OK'
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      FUN public open override /*2*/ fun foo(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CONST String type=kotlin.String value='OK'
      FUN public open override /*1*/ fun bar(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=bar
            CONST String type=kotlin.String value='ok'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          CALL .bar type=kotlin.String operator=null
            x: CALL .<init> type=C operator=null
