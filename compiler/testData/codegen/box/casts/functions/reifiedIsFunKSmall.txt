MODULE <test-module>
  FILE /reifiedIsFunKSmall.kt
    FUN public fun fn0(): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn1(/*0*/ x: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public inline fun </*0*/ reified T> assertReifiedIs(/*0*/ x: kotlin.Any, /*1*/ type: kotlin.String): kotlin.Unit
      BLOCK_BODY
        VAR val answer: kotlin.Boolean
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Unit operator=null
            SET_VAR answer type=kotlin.Unit operator=EQ
              TYPE_OP operator=INSTANCEOF typeOperand=T
                GET_VAR x type=kotlin.Any operator=null
          catch e: BLOCK type=kotlin.Nothing operator=null
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.AssertionError operator=null
                p0: STRING_CONCATENATION type=kotlin.String
                  GET_VAR x type=kotlin.Any operator=null
                  CONST String type=kotlin.String value=' is '
                  GET_VAR type type=kotlin.String operator=null
                  CONST String type=kotlin.String value=': should not throw exceptions, got '
                  GET_VAR e type=kotlin.Throwable operator=null
        CALL .assert type=kotlin.Unit operator=null
          value: GET_VAR answer type=kotlin.Boolean operator=null
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  STRING_CONCATENATION type=kotlin.String
                    GET_VAR x type=kotlin.Any operator=null
                    CONST String type=kotlin.String value=' is '
                    GET_VAR type type=kotlin.String operator=null
                    CONST String type=kotlin.String value=': failed'
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
    FUN public inline fun </*0*/ reified T> assertReifiedIsNot(/*0*/ x: kotlin.Any, /*1*/ type: kotlin.String): kotlin.Unit
      BLOCK_BODY
        VAR val answer: kotlin.Boolean
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Unit operator=null
            SET_VAR answer type=kotlin.Unit operator=EQ
              TYPE_OP operator=NOT_INSTANCEOF typeOperand=T
                GET_VAR x type=kotlin.Any operator=null
          catch e: BLOCK type=kotlin.Nothing operator=null
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.AssertionError operator=null
                p0: STRING_CONCATENATION type=kotlin.String
                  GET_VAR x type=kotlin.Any operator=null
                  CONST String type=kotlin.String value=' !is '
                  GET_VAR type type=kotlin.String operator=null
                  CONST String type=kotlin.String value=': should not throw exceptions, got '
                  GET_VAR e type=kotlin.Throwable operator=null
        CALL .assert type=kotlin.Unit operator=null
          value: GET_VAR answer type=kotlin.Boolean operator=null
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  STRING_CONCATENATION type=kotlin.String
                    GET_VAR x type=kotlin.Any operator=null
                    CONST String type=kotlin.String value=' !is '
                    GET_VAR type type=kotlin.String operator=null
                    CONST String type=kotlin.String value=': failed'
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val f0: kotlin.Any
          TYPE_OP operator=CAST typeOperand=kotlin.Any
            CALLABLE_REFERENCE fn0 type=kotlin.reflect.KFunction0<kotlin.Unit> operator=null
        VAR val f1: kotlin.Any
          TYPE_OP operator=CAST typeOperand=kotlin.Any
            CALLABLE_REFERENCE fn1 type=kotlin.reflect.KFunction1<kotlin.Any, kotlin.Unit> operator=null
        CALL .assertReifiedIs type=kotlin.Unit operator=null
          x: GET_VAR f0 type=kotlin.Any operator=null
          type: CONST String type=kotlin.String value='Function0<*>'
        CALL .assertReifiedIs type=kotlin.Unit operator=null
          x: GET_VAR f1 type=kotlin.Any operator=null
          type: CONST String type=kotlin.String value='Function1<*, *>'
        CALL .assertReifiedIsNot type=kotlin.Unit operator=null
          x: GET_VAR f1 type=kotlin.Any operator=null
          type: CONST String type=kotlin.String value='Function0<*>'
        CALL .assertReifiedIsNot type=kotlin.Unit operator=null
          x: GET_VAR f0 type=kotlin.Any operator=null
          type: CONST String type=kotlin.String value='Function1<*, *>'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
