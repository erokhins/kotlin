MODULE <test-module>
  FILE /reifiedIsFunKBig.kt
    FUN public fun fn0(): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn1(/*0*/ x0: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn2(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn3(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn4(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn5(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn6(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn7(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn8(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn9(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn10(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn11(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any, /*10*/ x10: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn12(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any, /*10*/ x10: kotlin.Any, /*11*/ x11: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn13(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any, /*10*/ x10: kotlin.Any, /*11*/ x11: kotlin.Any, /*12*/ x12: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn14(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any, /*10*/ x10: kotlin.Any, /*11*/ x11: kotlin.Any, /*12*/ x12: kotlin.Any, /*13*/ x13: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn15(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any, /*10*/ x10: kotlin.Any, /*11*/ x11: kotlin.Any, /*12*/ x12: kotlin.Any, /*13*/ x13: kotlin.Any, /*14*/ x14: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn16(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any, /*10*/ x10: kotlin.Any, /*11*/ x11: kotlin.Any, /*12*/ x12: kotlin.Any, /*13*/ x13: kotlin.Any, /*14*/ x14: kotlin.Any, /*15*/ x15: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn17(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any, /*10*/ x10: kotlin.Any, /*11*/ x11: kotlin.Any, /*12*/ x12: kotlin.Any, /*13*/ x13: kotlin.Any, /*14*/ x14: kotlin.Any, /*15*/ x15: kotlin.Any, /*16*/ x16: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn18(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any, /*10*/ x10: kotlin.Any, /*11*/ x11: kotlin.Any, /*12*/ x12: kotlin.Any, /*13*/ x13: kotlin.Any, /*14*/ x14: kotlin.Any, /*15*/ x15: kotlin.Any, /*16*/ x16: kotlin.Any, /*17*/ x17: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn19(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any, /*10*/ x10: kotlin.Any, /*11*/ x11: kotlin.Any, /*12*/ x12: kotlin.Any, /*13*/ x13: kotlin.Any, /*14*/ x14: kotlin.Any, /*15*/ x15: kotlin.Any, /*16*/ x16: kotlin.Any, /*17*/ x17: kotlin.Any, /*18*/ x18: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn20(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any, /*10*/ x10: kotlin.Any, /*11*/ x11: kotlin.Any, /*12*/ x12: kotlin.Any, /*13*/ x13: kotlin.Any, /*14*/ x14: kotlin.Any, /*15*/ x15: kotlin.Any, /*16*/ x16: kotlin.Any, /*17*/ x17: kotlin.Any, /*18*/ x18: kotlin.Any, /*19*/ x19: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn21(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any, /*10*/ x10: kotlin.Any, /*11*/ x11: kotlin.Any, /*12*/ x12: kotlin.Any, /*13*/ x13: kotlin.Any, /*14*/ x14: kotlin.Any, /*15*/ x15: kotlin.Any, /*16*/ x16: kotlin.Any, /*17*/ x17: kotlin.Any, /*18*/ x18: kotlin.Any, /*19*/ x19: kotlin.Any, /*20*/ x20: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    FUN public fun fn22(/*0*/ x0: kotlin.Any, /*1*/ x1: kotlin.Any, /*2*/ x2: kotlin.Any, /*3*/ x3: kotlin.Any, /*4*/ x4: kotlin.Any, /*5*/ x5: kotlin.Any, /*6*/ x6: kotlin.Any, /*7*/ x7: kotlin.Any, /*8*/ x8: kotlin.Any, /*9*/ x9: kotlin.Any, /*10*/ x10: kotlin.Any, /*11*/ x11: kotlin.Any, /*12*/ x12: kotlin.Any, /*13*/ x13: kotlin.Any, /*14*/ x14: kotlin.Any, /*15*/ x15: kotlin.Any, /*16*/ x16: kotlin.Any, /*17*/ x17: kotlin.Any, /*18*/ x18: kotlin.Any, /*19*/ x19: kotlin.Any, /*20*/ x20: kotlin.Any, /*21*/ x21: kotlin.Any): kotlin.Unit
      BLOCK_BODY
    PROPERTY public val fns: kotlin.Array<kotlin.Any>
      EXPRESSION_BODY
        CALL .arrayOf type=kotlin.Array<kotlin.Any> operator=null
          elements: VARARG type=Array<out Any> varargElementType=Any
            CALLABLE_REFERENCE fn0 type=kotlin.reflect.KFunction0<kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn1 type=kotlin.reflect.KFunction1<kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn2 type=kotlin.reflect.KFunction2<kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn3 type=kotlin.reflect.KFunction3<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn4 type=kotlin.reflect.KFunction4<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn5 type=kotlin.reflect.KFunction5<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn6 type=kotlin.reflect.KFunction6<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn7 type=kotlin.reflect.KFunction7<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn8 type=kotlin.reflect.KFunction8<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn9 type=kotlin.reflect.KFunction9<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn10 type=kotlin.reflect.KFunction10<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn11 type=kotlin.reflect.KFunction11<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn12 type=kotlin.reflect.KFunction12<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn13 type=kotlin.reflect.KFunction13<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn14 type=kotlin.reflect.KFunction14<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn15 type=kotlin.reflect.KFunction15<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn16 type=kotlin.reflect.KFunction16<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn17 type=kotlin.reflect.KFunction17<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn18 type=kotlin.reflect.KFunction18<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn19 type=kotlin.reflect.KFunction19<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn20 type=kotlin.reflect.KFunction20<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn21 type=kotlin.reflect.KFunction21<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
            CALLABLE_REFERENCE fn22 type=kotlin.reflect.KFunction22<kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Any, kotlin.Unit> operator=null
    FUN public inline fun </*0*/ reified T> assertReifiedIs(/*0*/ x: kotlin.Any, /*1*/ type: kotlin.String): kotlin.Unit
      BLOCK_BODY
        VAR val answer: kotlin.Boolean
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Unit operator=null
            SET_VAR answer type=kotlin.Unit operator=EQ
              TYPE_OP operator=INSTANCEOF typeOperand=T
                GET_VAR x type=kotlin.Any operator=null
          catch e: BLOCK type=kotlin.Nothing operator=null
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.AssertionError operator=null
                p0: STRING_CONCATENATION type=kotlin.String
                  GET_VAR x type=kotlin.Any operator=null
                  CONST String type=kotlin.String value=' is '
                  GET_VAR type type=kotlin.String operator=null
                  CONST String type=kotlin.String value=': should not throw exceptions, got '
                  GET_VAR e type=kotlin.Throwable operator=null
        CALL .assert type=kotlin.Unit operator=null
          value: GET_VAR answer type=kotlin.Boolean operator=null
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  STRING_CONCATENATION type=kotlin.String
                    GET_VAR x type=kotlin.Any operator=null
                    CONST String type=kotlin.String value=' is '
                    GET_VAR type type=kotlin.String operator=null
                    CONST String type=kotlin.String value=': failed'
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
    FUN public inline fun </*0*/ reified T> assertReifiedIsNot(/*0*/ x: kotlin.Any, /*1*/ type: kotlin.String): kotlin.Unit
      BLOCK_BODY
        VAR val answer: kotlin.Boolean
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Unit operator=null
            SET_VAR answer type=kotlin.Unit operator=EQ
              TYPE_OP operator=NOT_INSTANCEOF typeOperand=T
                GET_VAR x type=kotlin.Any operator=null
          catch e: BLOCK type=kotlin.Nothing operator=null
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.AssertionError operator=null
                p0: STRING_CONCATENATION type=kotlin.String
                  GET_VAR x type=kotlin.Any operator=null
                  CONST String type=kotlin.String value=' !is '
                  GET_VAR type type=kotlin.String operator=null
                  CONST String type=kotlin.String value=': should not throw exceptions, got '
                  GET_VAR e type=kotlin.Throwable operator=null
        CALL .assert type=kotlin.Unit operator=null
          value: GET_VAR answer type=kotlin.Boolean operator=null
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  STRING_CONCATENATION type=kotlin.String
                    GET_VAR x type=kotlin.Any operator=null
                    CONST String type=kotlin.String value=' !is '
                    GET_VAR type type=kotlin.String operator=null
                    CONST String type=kotlin.String value=': failed'
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
    CLASS CLASS TestFnBase
      CONSTRUCTOR public constructor TestFnBase(/*0*/ type: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD type type=kotlin.Unit operator=null
            receiver: THIS public abstract class TestFnBase type=TestFnBase
            value: GET_VAR type type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFnBase
      PROPERTY public final val type: kotlin.String
        EXPRESSION_BODY
          GET_VAR type type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public abstract fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
      FUN public abstract fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
    CLASS OBJECT TestFn0
      CONSTRUCTOR private constructor TestFn0()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function0<*>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn0
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn0 : TestFnBase type=TestFn0
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn0 : TestFnBase type=TestFn0
    CLASS OBJECT TestFn1
      CONSTRUCTOR private constructor TestFn1()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function1<*, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn1
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn1 : TestFnBase type=TestFn1
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn1 : TestFnBase type=TestFn1
    CLASS OBJECT TestFn2
      CONSTRUCTOR private constructor TestFn2()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function2<*, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn2
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn2 : TestFnBase type=TestFn2
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn2 : TestFnBase type=TestFn2
    CLASS OBJECT TestFn3
      CONSTRUCTOR private constructor TestFn3()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function3<*, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn3
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn3 : TestFnBase type=TestFn3
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn3 : TestFnBase type=TestFn3
    CLASS OBJECT TestFn4
      CONSTRUCTOR private constructor TestFn4()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function4<*, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn4
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn4 : TestFnBase type=TestFn4
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn4 : TestFnBase type=TestFn4
    CLASS OBJECT TestFn5
      CONSTRUCTOR private constructor TestFn5()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function5<*, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn5
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn5 : TestFnBase type=TestFn5
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn5 : TestFnBase type=TestFn5
    CLASS OBJECT TestFn6
      CONSTRUCTOR private constructor TestFn6()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function6<*, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn6
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn6 : TestFnBase type=TestFn6
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn6 : TestFnBase type=TestFn6
    CLASS OBJECT TestFn7
      CONSTRUCTOR private constructor TestFn7()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function7<*, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn7
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn7 : TestFnBase type=TestFn7
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn7 : TestFnBase type=TestFn7
    CLASS OBJECT TestFn8
      CONSTRUCTOR private constructor TestFn8()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function8<*, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn8
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn8 : TestFnBase type=TestFn8
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn8 : TestFnBase type=TestFn8
    CLASS OBJECT TestFn9
      CONSTRUCTOR private constructor TestFn9()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function9<*, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn9
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn9 : TestFnBase type=TestFn9
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn9 : TestFnBase type=TestFn9
    CLASS OBJECT TestFn10
      CONSTRUCTOR private constructor TestFn10()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function10<*, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn10
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn10 : TestFnBase type=TestFn10
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn10 : TestFnBase type=TestFn10
    CLASS OBJECT TestFn11
      CONSTRUCTOR private constructor TestFn11()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function11<*, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn11
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn11 : TestFnBase type=TestFn11
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn11 : TestFnBase type=TestFn11
    CLASS OBJECT TestFn12
      CONSTRUCTOR private constructor TestFn12()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function12<*, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn12
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn12 : TestFnBase type=TestFn12
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn12 : TestFnBase type=TestFn12
    CLASS OBJECT TestFn13
      CONSTRUCTOR private constructor TestFn13()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function13<*, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn13
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn13 : TestFnBase type=TestFn13
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn13 : TestFnBase type=TestFn13
    CLASS OBJECT TestFn14
      CONSTRUCTOR private constructor TestFn14()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function14<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn14
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn14 : TestFnBase type=TestFn14
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn14 : TestFnBase type=TestFn14
    CLASS OBJECT TestFn15
      CONSTRUCTOR private constructor TestFn15()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function15<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn15
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn15 : TestFnBase type=TestFn15
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn15 : TestFnBase type=TestFn15
    CLASS OBJECT TestFn16
      CONSTRUCTOR private constructor TestFn16()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function16<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn16
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn16 : TestFnBase type=TestFn16
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn16 : TestFnBase type=TestFn16
    CLASS OBJECT TestFn17
      CONSTRUCTOR private constructor TestFn17()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function17<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn17
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn17 : TestFnBase type=TestFn17
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn17 : TestFnBase type=TestFn17
    CLASS OBJECT TestFn18
      CONSTRUCTOR private constructor TestFn18()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function18<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn18
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn18 : TestFnBase type=TestFn18
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn18 : TestFnBase type=TestFn18
    CLASS OBJECT TestFn19
      CONSTRUCTOR private constructor TestFn19()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function19<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn19
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn19 : TestFnBase type=TestFn19
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn19 : TestFnBase type=TestFn19
    CLASS OBJECT TestFn20
      CONSTRUCTOR private constructor TestFn20()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function20<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn20
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn20 : TestFnBase type=TestFn20
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn20 : TestFnBase type=TestFn20
    CLASS OBJECT TestFn21
      CONSTRUCTOR private constructor TestFn21()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function21<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn21
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn21 : TestFnBase type=TestFn21
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn21 : TestFnBase type=TestFn21
    CLASS OBJECT TestFn22
      CONSTRUCTOR private constructor TestFn22()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestFnBase
            type: CONST String type=kotlin.String value='Function22<*, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *>'
          INSTANCE_INITIALIZER_CALL classDescriptor=TestFn22
      FUN public open override /*1*/ fun testGood(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIs type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn22 : TestFnBase type=TestFn22
      FUN public open override /*1*/ fun testBad(/*0*/ x: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .assertReifiedIsNot type=kotlin.Unit operator=null
            x: GET_VAR x type=kotlin.Any operator=null
            type: CALL .<get-type> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public object TestFn22 : TestFnBase type=TestFn22
    PROPERTY public val tests: kotlin.Array<TestFnBase>
      EXPRESSION_BODY
        CALL .arrayOf type=kotlin.Array<TestFnBase> operator=null
          elements: VARARG type=Array<out TestFnBase> varargElementType=TestFnBase
            GET_OBJECT TestFn0 type=TestFn0
            GET_OBJECT TestFn1 type=TestFn1
            GET_OBJECT TestFn2 type=TestFn2
            GET_OBJECT TestFn3 type=TestFn3
            GET_OBJECT TestFn4 type=TestFn4
            GET_OBJECT TestFn5 type=TestFn5
            GET_OBJECT TestFn6 type=TestFn6
            GET_OBJECT TestFn7 type=TestFn7
            GET_OBJECT TestFn8 type=TestFn8
            GET_OBJECT TestFn9 type=TestFn9
            GET_OBJECT TestFn10 type=TestFn10
            GET_OBJECT TestFn11 type=TestFn11
            GET_OBJECT TestFn12 type=TestFn12
            GET_OBJECT TestFn13 type=TestFn13
            GET_OBJECT TestFn14 type=TestFn14
            GET_OBJECT TestFn15 type=TestFn15
            GET_OBJECT TestFn16 type=TestFn16
            GET_OBJECT TestFn17 type=TestFn17
            GET_OBJECT TestFn18 type=TestFn18
            GET_OBJECT TestFn19 type=TestFn19
            GET_OBJECT TestFn20 type=TestFn20
            GET_OBJECT TestFn21 type=TestFn21
            GET_OBJECT TestFn22 type=TestFn22
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='0'
                other: CONST Int type=kotlin.Int value='22'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val fnI: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                BLOCK type=kotlin.Unit operator=FOR_LOOP
                  VAR val tmp1_iterator: kotlin.collections.IntIterator
                    CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
                      $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                        $this: CONST Int type=kotlin.Int value='0'
                        other: CONST Int type=kotlin.Int value='22'
                  WHILE label=null operator=FOR_LOOP_INNER_WHILE
                    condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
                      $this: GET_VAR tmp1_iterator type=kotlin.collections.IntIterator operator=null
                    body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
                      VAR val testI: kotlin.Int
                        CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                          $this: GET_VAR tmp1_iterator type=kotlin.collections.IntIterator operator=null
                      BLOCK type=kotlin.Unit operator=null
                        WHEN type=kotlin.Unit operator=IF
                          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                            arg0: GET_VAR fnI type=kotlin.Int operator=null
                            arg1: GET_VAR testI type=kotlin.Int operator=null
                          then: BLOCK type=kotlin.Unit operator=null
                            CALL .testGood type=kotlin.Unit operator=null
                              $this: CALL .get type=TestFnBase operator=GET_ARRAY_ELEMENT
                                $this: CALL .<get-tests> type=kotlin.Array<TestFnBase> operator=GET_PROPERTY
                                index: GET_VAR testI type=kotlin.Int operator=null
                              x: CALL .get type=kotlin.Any operator=GET_ARRAY_ELEMENT
                                $this: CALL .<get-fns> type=kotlin.Array<kotlin.Any> operator=GET_PROPERTY
                                index: GET_VAR fnI type=kotlin.Int operator=null
                          else: BLOCK type=kotlin.Unit operator=null
                            CALL .testBad type=kotlin.Unit operator=null
                              $this: CALL .get type=TestFnBase operator=GET_ARRAY_ELEMENT
                                $this: CALL .<get-tests> type=kotlin.Array<TestFnBase> operator=GET_PROPERTY
                                index: GET_VAR testI type=kotlin.Int operator=null
                              x: CALL .get type=kotlin.Any operator=GET_ARRAY_ELEMENT
                                $this: CALL .<get-fns> type=kotlin.Array<kotlin.Any> operator=GET_PROPERTY
                                index: GET_VAR fnI type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
