MODULE <test-module>
  FILE /jvmStaticExternalPrivate.kt
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      CLASS OBJECT Companion
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Companion
        FUN @kotlin.jvm.JvmStatic() private final external fun foo(): kotlin.Unit
      FUN public final fun bar(): kotlin.Unit
        BLOCK_BODY
          CALL .foo type=kotlin.Unit operator=null
            $this: THIS public companion object Companion type=C.Companion
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .bar type=kotlin.Unit operator=null
              $this: CALL .<init> type=C operator=null
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='Link error expected'
          catch e: BLOCK type=kotlin.Unit operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                  arg0: CALL .<get-message> type=kotlin.String? operator=GET_PROPERTY
                    $this: GET_VAR e type=java.lang.UnsatisfiedLinkError operator=null
                  arg1: CONST String type=kotlin.String value='C.foo()V'
              then: RETURN type=kotlin.Nothing from=box
                CALL .plus type=kotlin.String operator=PLUS
                  $this: CONST String type=kotlin.String value='Fail 1: '
                  other: CALL .<get-message> type=kotlin.String? operator=GET_PROPERTY
                    $this: GET_VAR e type=java.lang.UnsatisfiedLinkError operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
