MODULE <test-module>
  FILE /array.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ a: kotlin.IntArray, /*1*/ b: kotlin.Array<kotlin.String>)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD a type=kotlin.Unit operator=null
            receiver: THIS public final data class A type=A
            value: GET_VAR a type=kotlin.IntArray operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD b type=kotlin.Unit operator=null
            receiver: THIS public final data class A type=A
            value: GET_VAR b type=kotlin.Array<kotlin.String> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final val a: kotlin.IntArray
        EXPRESSION_BODY
          GET_VAR a type=kotlin.IntArray operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final var b: kotlin.Array<kotlin.String>
        EXPRESSION_BODY
          GET_VAR b type=kotlin.Array<kotlin.String> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator /*synthesized*/ fun component1(): kotlin.IntArray
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CALL .<get-a> type=kotlin.IntArray operator=GET_PROPERTY
              $this: THIS public final data class A type=A
      FUN public final operator /*synthesized*/ fun component2(): kotlin.Array<kotlin.String>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component2
            CALL .<get-b> type=kotlin.Array<kotlin.String> operator=GET_PROPERTY
              $this: THIS public final data class A type=A
      FUN public final /*synthesized*/ fun copy(/*0*/ a: kotlin.IntArray = ..., /*1*/ b: kotlin.Array<kotlin.String> = ...): A
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=copy
            CALL .<init> type=A operator=null
              a: GET_VAR a type=kotlin.IntArray operator=null
              b: GET_VAR b type=kotlin.Array<kotlin.String> operator=null
      FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='A('
              CONST String type=kotlin.String value='a='
              CALL .<get-a> type=kotlin.IntArray operator=GET_PROPERTY
                $this: THIS public final data class A type=A
              CONST String type=kotlin.String value=', '
              CONST String type=kotlin.String value='b='
              CALL .<get-b> type=kotlin.Array<kotlin.String> operator=GET_PROPERTY
                $this: THIS public final data class A type=A
              CONST String type=kotlin.String value=')'
      FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .hashCode type=kotlin.Int operator=null
              $this: CALL .<get-a> type=kotlin.IntArray operator=GET_PROPERTY
                $this: THIS public final data class A type=A
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .plus type=kotlin.Int operator=null
              $this: CALL .times type=kotlin.Int operator=null
                $this: GET_VAR tmp0_result type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='31'
              other: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<get-b> type=kotlin.Array<kotlin.String> operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
          RETURN type=kotlin.Nothing from=hashCode
            GET_VAR tmp0_result type=kotlin.Int operator=null
      FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS public final data class A type=A
              arg1: GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=A
              GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: A
            TYPE_OP operator=CAST typeOperand=A
              GET_VAR other type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-a> type=kotlin.IntArray operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
                arg1: CALL .<get-a> type=kotlin.IntArray operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=A operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-b> type=kotlin.Array<kotlin.String> operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
                arg1: CALL .<get-b> type=kotlin.Array<kotlin.String> operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=A operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from=equals
            CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<init> type=A operator=null
                  a: CALL .intArrayOf type=kotlin.IntArray operator=null
                    elements: VARARG type=IntArray varargElementType=Int
                      CONST Int type=kotlin.Int value='1'
                      CONST Int type=kotlin.Int value='2'
                      CONST Int type=kotlin.Int value='3'
                  b: CALL .arrayOf type=kotlin.Array<kotlin.String> operator=null
                    elements: VARARG type=Array<out String> varargElementType=String
                      CONST String type=kotlin.String value='239'
              arg1: CALL .plus type=kotlin.Int operator=PLUS
                $this: CALL .times type=kotlin.Int operator=MUL
                  $this: CONST Int type=kotlin.Int value='31'
                  other: CALL .hashCode type=kotlin.Int operator=null
                    p0: CALL .intArrayOf type=kotlin.IntArray operator=null
                      elements: VARARG type=IntArray varargElementType=Int
                        CONST Int type=kotlin.Int value='0'
                        CONST Int type=kotlin.Int value='1'
                        CONST Int type=kotlin.Int value='2'
                other: CALL .hashCode type=kotlin.Int operator=null
                  $this: CONST String type=kotlin.String value='239'
          then: CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
