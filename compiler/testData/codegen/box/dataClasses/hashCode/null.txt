MODULE <test-module>
  FILE /null.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ a: kotlin.Any?, /*1*/ x: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD a type=kotlin.Unit operator=null
            receiver: THIS public final data class A type=A
            value: GET_VAR a type=kotlin.Any? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD x type=kotlin.Unit operator=null
            receiver: THIS public final data class A type=A
            value: GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final val a: kotlin.Any?
        EXPRESSION_BODY
          GET_VAR a type=kotlin.Any? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final var x: kotlin.Int
        EXPRESSION_BODY
          GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator /*synthesized*/ fun component1(): kotlin.Any?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CALL .<get-a> type=kotlin.Any? operator=GET_PROPERTY
              $this: THIS public final data class A type=A
      FUN public final operator /*synthesized*/ fun component2(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component2
            CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
              $this: THIS public final data class A type=A
      FUN public final /*synthesized*/ fun copy(/*0*/ a: kotlin.Any? = ..., /*1*/ x: kotlin.Int = ...): A
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=copy
            CALL .<init> type=A operator=null
              a: GET_VAR a type=kotlin.Any? operator=null
              x: GET_VAR x type=kotlin.Int operator=null
      FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='A('
              CONST String type=kotlin.String value='a='
              CALL .<get-a> type=kotlin.Any? operator=GET_PROPERTY
                $this: THIS public final data class A type=A
              CONST String type=kotlin.String value=', '
              CONST String type=kotlin.String value='x='
              CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: THIS public final data class A type=A
              CONST String type=kotlin.String value=')'
      FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            BLOCK type=kotlin.Int operator=null
              VAR val tmp1: kotlin.Any?
                CALL .<get-a> type=kotlin.Any? operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
              WHEN type=kotlin.Int operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp1 type=kotlin.Any? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CONST Int type=kotlin.Int value='0'
                else: CALL .hashCode type=kotlin.Int operator=null
                  $this: GET_VAR tmp1 type=kotlin.Any? operator=null
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .plus type=kotlin.Int operator=null
              $this: CALL .times type=kotlin.Int operator=null
                $this: GET_VAR tmp0_result type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='31'
              other: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
          RETURN type=kotlin.Nothing from=hashCode
            GET_VAR tmp0_result type=kotlin.Int operator=null
      FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS public final data class A type=A
              arg1: GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=A
              GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: A
            TYPE_OP operator=CAST typeOperand=A
              GET_VAR other type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-a> type=kotlin.Any? operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
                arg1: CALL .<get-a> type=kotlin.Any? operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=A operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
                arg1: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=A operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from=equals
            CONST Boolean type=kotlin.Boolean value='true'
    CLASS CLASS B
      CONSTRUCTOR public constructor B(/*0*/ a: kotlin.Any?)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD a type=kotlin.Unit operator=null
            receiver: THIS public final data class B type=B
            value: GET_VAR a type=kotlin.Any? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      PROPERTY public final val a: kotlin.Any?
        EXPRESSION_BODY
          GET_VAR a type=kotlin.Any? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator /*synthesized*/ fun component1(): kotlin.Any?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CALL .<get-a> type=kotlin.Any? operator=GET_PROPERTY
              $this: THIS public final data class B type=B
      FUN public final /*synthesized*/ fun copy(/*0*/ a: kotlin.Any? = ...): B
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=copy
            CALL .<init> type=B operator=null
              a: GET_VAR a type=kotlin.Any? operator=null
      FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='B('
              CONST String type=kotlin.String value='a='
              CALL .<get-a> type=kotlin.Any? operator=GET_PROPERTY
                $this: THIS public final data class B type=B
              CONST String type=kotlin.String value=')'
      FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            BLOCK type=kotlin.Int operator=null
              VAR val tmp1: kotlin.Any?
                CALL .<get-a> type=kotlin.Any? operator=GET_PROPERTY
                  $this: THIS public final data class B type=B
              WHEN type=kotlin.Int operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp1 type=kotlin.Any? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CONST Int type=kotlin.Int value='0'
                else: CALL .hashCode type=kotlin.Int operator=null
                  $this: GET_VAR tmp1 type=kotlin.Any? operator=null
          RETURN type=kotlin.Nothing from=hashCode
            GET_VAR tmp0_result type=kotlin.Int operator=null
      FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS public final data class B type=B
              arg1: GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=B
              GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: B
            TYPE_OP operator=CAST typeOperand=B
              GET_VAR other type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-a> type=kotlin.Any? operator=GET_PROPERTY
                  $this: THIS public final data class B type=B
                arg1: CALL .<get-a> type=kotlin.Any? operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=B operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from=equals
            CONST Boolean type=kotlin.Boolean value='true'
    CLASS CLASS C
      CONSTRUCTOR public constructor C(/*0*/ a: kotlin.Int, /*1*/ x: kotlin.Int?)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD a type=kotlin.Unit operator=null
            receiver: THIS public final data class C type=C
            value: GET_VAR a type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD x type=kotlin.Unit operator=null
            receiver: THIS public final data class C type=C
            value: GET_VAR x type=kotlin.Int? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      PROPERTY public final val a: kotlin.Int
        EXPRESSION_BODY
          GET_VAR a type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final var x: kotlin.Int?
        EXPRESSION_BODY
          GET_VAR x type=kotlin.Int? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator /*synthesized*/ fun component1(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CALL .<get-a> type=kotlin.Int operator=GET_PROPERTY
              $this: THIS public final data class C type=C
      FUN public final operator /*synthesized*/ fun component2(): kotlin.Int?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component2
            CALL .<get-x> type=kotlin.Int? operator=GET_PROPERTY
              $this: THIS public final data class C type=C
      FUN public final /*synthesized*/ fun copy(/*0*/ a: kotlin.Int = ..., /*1*/ x: kotlin.Int? = ...): C
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=copy
            CALL .<init> type=C operator=null
              a: GET_VAR a type=kotlin.Int operator=null
              x: GET_VAR x type=kotlin.Int? operator=null
      FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='C('
              CONST String type=kotlin.String value='a='
              CALL .<get-a> type=kotlin.Int operator=GET_PROPERTY
                $this: THIS public final data class C type=C
              CONST String type=kotlin.String value=', '
              CONST String type=kotlin.String value='x='
              CALL .<get-x> type=kotlin.Int? operator=GET_PROPERTY
                $this: THIS public final data class C type=C
              CONST String type=kotlin.String value=')'
      FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .hashCode type=kotlin.Int operator=null
              $this: CALL .<get-a> type=kotlin.Int operator=GET_PROPERTY
                $this: THIS public final data class C type=C
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .plus type=kotlin.Int operator=null
              $this: CALL .times type=kotlin.Int operator=null
                $this: GET_VAR tmp0_result type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='31'
              other: BLOCK type=kotlin.Int operator=null
                VAR val tmp1: kotlin.Int?
                  CALL .<get-x> type=kotlin.Int? operator=GET_PROPERTY
                    $this: THIS public final data class C type=C
                WHEN type=kotlin.Int operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp1 type=kotlin.Int? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Int type=kotlin.Int value='0'
                  else: CALL .hashCode type=kotlin.Int operator=null
                    $this: GET_VAR tmp1 type=kotlin.Int? operator=null
          RETURN type=kotlin.Nothing from=hashCode
            GET_VAR tmp0_result type=kotlin.Int operator=null
      FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS public final data class C type=C
              arg1: GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=C
              GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: C
            TYPE_OP operator=CAST typeOperand=C
              GET_VAR other type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-a> type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS public final data class C type=C
                arg1: CALL .<get-a> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=C operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-x> type=kotlin.Int? operator=GET_PROPERTY
                  $this: THIS public final data class C type=C
                arg1: CALL .<get-x> type=kotlin.Int? operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=C operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from=equals
            CONST Boolean type=kotlin.Boolean value='true'
    CLASS CLASS D
      CONSTRUCTOR public constructor D(/*0*/ a: kotlin.Int?)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD a type=kotlin.Unit operator=null
            receiver: THIS public final data class D type=D
            value: GET_VAR a type=kotlin.Int? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=D
      PROPERTY public final val a: kotlin.Int?
        EXPRESSION_BODY
          GET_VAR a type=kotlin.Int? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator /*synthesized*/ fun component1(): kotlin.Int?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CALL .<get-a> type=kotlin.Int? operator=GET_PROPERTY
              $this: THIS public final data class D type=D
      FUN public final /*synthesized*/ fun copy(/*0*/ a: kotlin.Int? = ...): D
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=copy
            CALL .<init> type=D operator=null
              a: GET_VAR a type=kotlin.Int? operator=null
      FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='D('
              CONST String type=kotlin.String value='a='
              CALL .<get-a> type=kotlin.Int? operator=GET_PROPERTY
                $this: THIS public final data class D type=D
              CONST String type=kotlin.String value=')'
      FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            BLOCK type=kotlin.Int operator=null
              VAR val tmp1: kotlin.Int?
                CALL .<get-a> type=kotlin.Int? operator=GET_PROPERTY
                  $this: THIS public final data class D type=D
              WHEN type=kotlin.Int operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp1 type=kotlin.Int? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CONST Int type=kotlin.Int value='0'
                else: CALL .hashCode type=kotlin.Int operator=null
                  $this: GET_VAR tmp1 type=kotlin.Int? operator=null
          RETURN type=kotlin.Nothing from=hashCode
            GET_VAR tmp0_result type=kotlin.Int operator=null
      FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS public final data class D type=D
              arg1: GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=D
              GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: D
            TYPE_OP operator=CAST typeOperand=D
              GET_VAR other type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-a> type=kotlin.Int? operator=GET_PROPERTY
                  $this: THIS public final data class D type=D
                arg1: CALL .<get-a> type=kotlin.Int? operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=D operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from=equals
            CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<init> type=A operator=null
                  a: CONST Null type=kotlin.Nothing? value='null'
                  x: CONST Int type=kotlin.Int value='19'
              arg1: CONST Int type=kotlin.Int value='19'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<init> type=A operator=null
                  a: CONST Int type=kotlin.Int value='239'
                  x: CONST Int type=kotlin.Int value='19'
              arg1: CALL .plus type=kotlin.Int operator=PLUS
                $this: CALL .times type=kotlin.Int operator=MUL
                  $this: CONST Int type=kotlin.Int value='239'
                  other: CONST Int type=kotlin.Int value='31'
                other: CONST Int type=kotlin.Int value='19'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<init> type=B operator=null
                  a: CONST Null type=kotlin.Nothing? value='null'
              arg1: CONST Int type=kotlin.Int value='0'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<init> type=B operator=null
                  a: CONST Int type=kotlin.Int value='239'
              arg1: CONST Int type=kotlin.Int value='239'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<init> type=C operator=null
                  a: CONST Int type=kotlin.Int value='239'
                  x: CONST Int type=kotlin.Int value='19'
              arg1: CALL .plus type=kotlin.Int operator=PLUS
                $this: CALL .times type=kotlin.Int operator=MUL
                  $this: CONST Int type=kotlin.Int value='239'
                  other: CONST Int type=kotlin.Int value='31'
                other: CONST Int type=kotlin.Int value='19'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<init> type=C operator=null
                  a: CONST Int type=kotlin.Int value='239'
                  x: CONST Null type=kotlin.Nothing? value='null'
              arg1: CALL .times type=kotlin.Int operator=MUL
                $this: CONST Int type=kotlin.Int value='239'
                other: CONST Int type=kotlin.Int value='31'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<init> type=D operator=null
                  a: CONST Int type=kotlin.Int value='239'
              arg1: CONST Int type=kotlin.Int value='239'
          then: CONST String type=kotlin.String value='fail'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<init> type=D operator=null
                  a: CONST Null type=kotlin.Nothing? value='null'
              arg1: CONST Int type=kotlin.Int value='0'
          then: CONST String type=kotlin.String value='fail'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
