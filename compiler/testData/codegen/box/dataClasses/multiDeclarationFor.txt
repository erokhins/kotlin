MODULE <test-module>
  FILE /multiDeclarationFor.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ x: kotlin.Int, /*1*/ y: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD x type=kotlin.Unit operator=null
            receiver: THIS public final data class A type=A
            value: GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD y type=kotlin.Unit operator=null
            receiver: THIS public final data class A type=A
            value: GET_VAR y type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final val x: kotlin.Int
        EXPRESSION_BODY
          GET_VAR x type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val y: kotlin.String
        EXPRESSION_BODY
          GET_VAR y type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator /*synthesized*/ fun component1(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
              $this: THIS public final data class A type=A
      FUN public final operator /*synthesized*/ fun component2(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component2
            CALL .<get-y> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public final data class A type=A
      FUN public final /*synthesized*/ fun copy(/*0*/ x: kotlin.Int = ..., /*1*/ y: kotlin.String = ...): A
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=copy
            CALL .<init> type=A operator=null
              x: GET_VAR x type=kotlin.Int operator=null
              y: GET_VAR y type=kotlin.String operator=null
      FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='A('
              CONST String type=kotlin.String value='x='
              CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: THIS public final data class A type=A
              CONST String type=kotlin.String value=', '
              CONST String type=kotlin.String value='y='
              CALL .<get-y> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public final data class A type=A
              CONST String type=kotlin.String value=')'
      FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .hashCode type=kotlin.Int operator=null
              $this: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                $this: THIS public final data class A type=A
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .plus type=kotlin.Int operator=null
              $this: CALL .times type=kotlin.Int operator=null
                $this: GET_VAR tmp0_result type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='31'
              other: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<get-y> type=kotlin.String operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
          RETURN type=kotlin.Nothing from=hashCode
            GET_VAR tmp0_result type=kotlin.Int operator=null
      FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS public final data class A type=A
              arg1: GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=A
              GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: A
            TYPE_OP operator=CAST typeOperand=A
              GET_VAR other type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
                arg1: CALL .<get-x> type=kotlin.Int operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=A operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-y> type=kotlin.String operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
                arg1: CALL .<get-y> type=kotlin.String operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=A operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from=equals
            CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val arr: kotlin.Array<A>
          CALL .<init> type=kotlin.Array<A> operator=null
            size: CONST Int type=kotlin.Int value='5'
            init: BLOCK type=(kotlin.Int) -> A operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ i: kotlin.Int): A
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<init> type=A operator=null
                      x: GET_VAR i type=kotlin.Int operator=null
                      y: CALL .toString type=kotlin.String operator=null
                        $this: GET_VAR i type=kotlin.Int operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> A operator=LAMBDA
        VAR var sum: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        VAR var str: kotlin.String
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<A>
            CALL .iterator type=kotlin.collections.Iterator<A> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR arr type=kotlin.Array<A> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<A> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val tmp1_loop_parameter: A
                CALL .next type=A operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<A> operator=null
              VAR val x: kotlin.Int
                CALL .component1 type=kotlin.Int operator=COMPONENT_N(index=1)
                  $this: GET_VAR tmp1_loop_parameter type=A operator=null
              VAR val y: kotlin.String
                CALL .component2 type=kotlin.String operator=COMPONENT_N(index=2)
                  $this: GET_VAR tmp1_loop_parameter type=A operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR sum type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.Int operator=PLUSEQ
                    $this: GET_VAR sum type=kotlin.Int operator=PLUSEQ
                    other: GET_VAR x type=kotlin.Int operator=null
                SET_VAR str type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR str type=kotlin.String operator=PLUSEQ
                    other: GET_VAR y type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: WHEN type=kotlin.Boolean operator=ANDAND
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR sum type=kotlin.Int operator=null
                arg1: CALL .plus type=kotlin.Int operator=PLUS
                  $this: CALL .plus type=kotlin.Int operator=PLUS
                    $this: CALL .plus type=kotlin.Int operator=PLUS
                      $this: CALL .plus type=kotlin.Int operator=PLUS
                        $this: CONST Int type=kotlin.Int value='0'
                        other: CONST Int type=kotlin.Int value='1'
                      other: CONST Int type=kotlin.Int value='2'
                    other: CONST Int type=kotlin.Int value='3'
                  other: CONST Int type=kotlin.Int value='4'
              then: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR str type=kotlin.String operator=null
                arg1: CONST String type=kotlin.String value='01234'
              else: CONST Boolean type=kotlin.Boolean value='false'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR sum type=kotlin.Int operator=null
              CONST String type=kotlin.String value=' '
              GET_VAR str type=kotlin.String operator=null
