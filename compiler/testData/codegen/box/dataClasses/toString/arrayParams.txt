MODULE <test-module>
  FILE /arrayParams.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ x: kotlin.Array<kotlin.Int>?, /*1*/ y: kotlin.IntArray?)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD x type=kotlin.Unit operator=null
            receiver: THIS public final data class A type=A
            value: GET_VAR x type=kotlin.Array<kotlin.Int>? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD y type=kotlin.Unit operator=null
            receiver: THIS public final data class A type=A
            value: GET_VAR y type=kotlin.IntArray? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final val x: kotlin.Array<kotlin.Int>?
        EXPRESSION_BODY
          GET_VAR x type=kotlin.Array<kotlin.Int>? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val y: kotlin.IntArray?
        EXPRESSION_BODY
          GET_VAR y type=kotlin.IntArray? operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator /*synthesized*/ fun component1(): kotlin.Array<kotlin.Int>?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CALL .<get-x> type=kotlin.Array<kotlin.Int>? operator=GET_PROPERTY
              $this: THIS public final data class A type=A
      FUN public final operator /*synthesized*/ fun component2(): kotlin.IntArray?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component2
            CALL .<get-y> type=kotlin.IntArray? operator=GET_PROPERTY
              $this: THIS public final data class A type=A
      FUN public final /*synthesized*/ fun copy(/*0*/ x: kotlin.Array<kotlin.Int>? = ..., /*1*/ y: kotlin.IntArray? = ...): A
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=copy
            CALL .<init> type=A operator=null
              x: GET_VAR x type=kotlin.Array<kotlin.Int>? operator=null
              y: GET_VAR y type=kotlin.IntArray? operator=null
      FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='A('
              CONST String type=kotlin.String value='x='
              CALL .<get-x> type=kotlin.Array<kotlin.Int>? operator=GET_PROPERTY
                $this: THIS public final data class A type=A
              CONST String type=kotlin.String value=', '
              CONST String type=kotlin.String value='y='
              CALL .<get-y> type=kotlin.IntArray? operator=GET_PROPERTY
                $this: THIS public final data class A type=A
              CONST String type=kotlin.String value=')'
      FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            BLOCK type=kotlin.Int operator=null
              VAR val tmp1: kotlin.Array<kotlin.Int>?
                CALL .<get-x> type=kotlin.Array<kotlin.Int>? operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
              WHEN type=kotlin.Int operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp1 type=kotlin.Array<kotlin.Int>? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CONST Int type=kotlin.Int value='0'
                else: CALL .hashCode type=kotlin.Int operator=null
                  $this: GET_VAR tmp1 type=kotlin.Array<kotlin.Int>? operator=null
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .plus type=kotlin.Int operator=null
              $this: CALL .times type=kotlin.Int operator=null
                $this: GET_VAR tmp0_result type=kotlin.Int operator=null
                other: CONST Int type=kotlin.Int value='31'
              other: BLOCK type=kotlin.Int operator=null
                VAR val tmp2: kotlin.IntArray?
                  CALL .<get-y> type=kotlin.IntArray? operator=GET_PROPERTY
                    $this: THIS public final data class A type=A
                WHEN type=kotlin.Int operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp2 type=kotlin.IntArray? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Int type=kotlin.Int value='0'
                  else: CALL .hashCode type=kotlin.Int operator=null
                    $this: GET_VAR tmp2 type=kotlin.IntArray? operator=null
          RETURN type=kotlin.Nothing from=hashCode
            GET_VAR tmp0_result type=kotlin.Int operator=null
      FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS public final data class A type=A
              arg1: GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=A
              GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: A
            TYPE_OP operator=CAST typeOperand=A
              GET_VAR other type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-x> type=kotlin.Array<kotlin.Int>? operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
                arg1: CALL .<get-x> type=kotlin.Array<kotlin.Int>? operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=A operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-y> type=kotlin.IntArray? operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
                arg1: CALL .<get-y> type=kotlin.IntArray? operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=A operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from=equals
            CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var ts: kotlin.String
          CALL .toString type=kotlin.String operator=null
            $this: CALL .<init> type=A operator=null
              x: CALL .<init> type=kotlin.Array<kotlin.Int> operator=null
                size: CONST Int type=kotlin.Int value='2'
                init: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
                  FUN local final fun <anonymous>(/*0*/ it: kotlin.Int): kotlin.Int
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                        GET_VAR it type=kotlin.Int operator=null
                  CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
              y: CALL .<init> type=kotlin.IntArray operator=null
                size: CONST Int type=kotlin.Int value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR ts type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='A(x=[0, 1], y=[0, 0, 0])'
          then: RETURN type=kotlin.Nothing from=box
            GET_VAR ts type=kotlin.String operator=null
        SET_VAR ts type=kotlin.Unit operator=EQ
          CALL .toString type=kotlin.String operator=null
            $this: CALL .<init> type=A operator=null
              x: CONST Null type=kotlin.Nothing? value='null'
              y: CALL .<init> type=kotlin.IntArray operator=null
                size: CONST Int type=kotlin.Int value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR ts type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='A(x=null, y=[0, 0, 0])'
          then: RETURN type=kotlin.Nothing from=box
            GET_VAR ts type=kotlin.String operator=null
        SET_VAR ts type=kotlin.Unit operator=EQ
          CALL .toString type=kotlin.String operator=null
            $this: CALL .<init> type=A operator=null
              x: CONST Null type=kotlin.Nothing? value='null'
              y: CONST Null type=kotlin.Nothing? value='null'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR ts type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='A(x=null, y=null)'
          then: RETURN type=kotlin.Nothing from=box
            GET_VAR ts type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
