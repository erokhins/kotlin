MODULE <test-module>
  FILE /nonTrivialFinalMemberInSuperClass.kt
    CLASS CLASS Base
      CONSTRUCTOR public constructor Base()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Base
      FUN public final override /*1*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            CONST String type=kotlin.String value='OK'
      FUN public final override /*1*/ fun hashCode(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=hashCode
            CONST Int type=kotlin.Int value='42'
      FUN public final override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=equals
            CONST Boolean type=kotlin.Boolean value='false'
    CLASS CLASS DataClass
      CONSTRUCTOR public constructor DataClass(/*0*/ field: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Base
          SET_BACKING_FIELD field type=kotlin.Unit operator=null
            receiver: THIS public final data class DataClass : Base type=DataClass
            value: GET_VAR field type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=DataClass
      PROPERTY public final val field: kotlin.String
        EXPRESSION_BODY
          GET_VAR field type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator /*synthesized*/ fun component1(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CALL .<get-field> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public final data class DataClass : Base type=DataClass
      FUN public final /*synthesized*/ fun copy(/*0*/ field: kotlin.String = ...): DataClass
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=copy
            CALL .<init> type=DataClass operator=null
              field: GET_VAR field type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val d: DataClass
          CALL .<init> type=DataClass operator=null
            field: CONST String type=kotlin.String value='x'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: GET_VAR d type=DataClass operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail toString'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .hashCode type=kotlin.Int operator=null
                $this: GET_VAR d type=DataClass operator=null
              arg1: CONST Int type=kotlin.Int value='42'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail hashCode'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .equals type=kotlin.Boolean operator=null
                $this: GET_VAR d type=DataClass operator=null
                other: GET_VAR d type=DataClass operator=null
              arg1: CONST Boolean type=kotlin.Boolean value='false'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail equals'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
