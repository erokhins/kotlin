MODULE <test-module>
  FILE /doubleParam.kt
    PROPERTY public val NAN: kotlin.Double
      EXPRESSION_BODY
        GET_BACKING_FIELD NaN type=kotlin.Double operator=GET_PROPERTY
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ x: kotlin.Double)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD x type=kotlin.Unit operator=null
            receiver: THIS public final data class A type=A
            value: GET_VAR x type=kotlin.Double operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final val x: kotlin.Double
        EXPRESSION_BODY
          GET_VAR x type=kotlin.Double operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator /*synthesized*/ fun component1(): kotlin.Double
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=component1
            CALL .<get-x> type=kotlin.Double operator=GET_PROPERTY
              $this: THIS public final data class A type=A
      FUN public final /*synthesized*/ fun copy(/*0*/ x: kotlin.Double = ...): A
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=copy
            CALL .<init> type=A operator=null
              x: GET_VAR x type=kotlin.Double operator=null
      FUN public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=toString
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='A('
              CONST String type=kotlin.String value='x='
              CALL .<get-x> type=kotlin.Double operator=GET_PROPERTY
                $this: THIS public final data class A type=A
              CONST String type=kotlin.String value=')'
      FUN public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        BLOCK_BODY
          VAR val tmp0_result: kotlin.Int
            CONST Int type=kotlin.Int value='0'
          SET_VAR tmp0_result type=kotlin.Unit operator=EQ
            CALL .hashCode type=kotlin.Int operator=null
              $this: CALL .<get-x> type=kotlin.Double operator=GET_PROPERTY
                $this: THIS public final data class A type=A
          RETURN type=kotlin.Nothing from=hashCode
            GET_VAR tmp0_result type=kotlin.Int operator=null
      FUN public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        BLOCK_BODY
          WHEN type=kotlin.Unit operator=null
            if: CALL .EQEQEQ type=kotlin.Boolean operator=EQEQEQ
              arg0: THIS public final data class A type=A
              arg1: GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='true'
          WHEN type=kotlin.Unit operator=null
            if: TYPE_OP operator=NOT_INSTANCEOF typeOperand=A
              GET_VAR other type=kotlin.Any? operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          VAR val tmp0_other_with_cast: A
            TYPE_OP operator=CAST typeOperand=A
              GET_VAR other type=kotlin.Any? operator=null
          WHEN type=kotlin.Unit operator=null
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .<get-x> type=kotlin.Double operator=GET_PROPERTY
                  $this: THIS public final data class A type=A
                arg1: CALL .<get-x> type=kotlin.Double operator=GET_PROPERTY
                  $this: GET_VAR tmp0_other_with_cast type=A operator=null
            then: RETURN type=kotlin.Nothing from=equals
              CONST Boolean type=kotlin.Boolean value='false'
          RETURN type=kotlin.Nothing from=equals
            CONST Boolean type=kotlin.Boolean value='true'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .<init> type=A operator=null
              x: CONST Double type=kotlin.Double value='0.0'
            arg1: CALL .<init> type=A operator=null
              x: CONST Double type=kotlin.Double value='-0.0'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail: +0.0 == -0.0'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .hashCode type=kotlin.Int operator=null
              $this: CALL .<init> type=A operator=null
                x: CONST Double type=kotlin.Double value='0.0'
            arg1: CALL .hashCode type=kotlin.Int operator=null
              $this: CALL .<init> type=A operator=null
                x: CONST Double type=kotlin.Double value='-0.0'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail: hash(+0.0) == hash(-0.0)'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<init> type=A operator=null
                x: CALL .<get-NAN> type=kotlin.Double operator=GET_PROPERTY
              arg1: CALL .<init> type=A operator=null
                x: CALL .<get-NAN> type=kotlin.Double operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail: NaN != NaN'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<init> type=A operator=null
                  x: CALL .<get-NAN> type=kotlin.Double operator=GET_PROPERTY
              arg1: CALL .hashCode type=kotlin.Int operator=null
                $this: CALL .<init> type=A operator=null
                  x: CALL .<get-NAN> type=kotlin.Double operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail: hash(NaN) != hash(NaN)'
        VAR val s: java.util.HashSet<A>
          CALL .<init> type=java.util.HashSet<A> operator=null
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='1'
                other: CONST Int type=kotlin.Int value='5'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val times: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Boolean operator=null
                CALL .add type=kotlin.Boolean operator=null
                  $this: GET_VAR s type=java.util.HashSet<A> operator=null
                  element: CALL .<init> type=A operator=null
                    x: CONST Double type=kotlin.Double value='3.14'
                CALL .add type=kotlin.Boolean operator=null
                  $this: GET_VAR s type=java.util.HashSet<A> operator=null
                  element: CALL .<init> type=A operator=null
                    x: CONST Double type=kotlin.Double value='0.0'
                CALL .add type=kotlin.Boolean operator=null
                  $this: GET_VAR s type=java.util.HashSet<A> operator=null
                  element: CALL .<init> type=A operator=null
                    x: CONST Double type=kotlin.Double value='-0.0'
                CALL .add type=kotlin.Boolean operator=null
                  $this: GET_VAR s type=java.util.HashSet<A> operator=null
                  element: CALL .<init> type=A operator=null
                    x: CONST Double type=kotlin.Double value='-2.72'
                CALL .add type=kotlin.Boolean operator=null
                  $this: GET_VAR s type=java.util.HashSet<A> operator=null
                  element: CALL .<init> type=A operator=null
                    x: CALL .<get-NAN> type=kotlin.Double operator=GET_PROPERTY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=NOT_IN
            arg0: CALL .contains type=kotlin.Boolean operator=NOT_IN
              $this: GET_VAR s type=java.util.HashSet<A> operator=null
              element: CALL .<init> type=A operator=null
                x: CONST Double type=kotlin.Double value='3.14'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail: 3.14 not found'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=NOT_IN
            arg0: CALL .contains type=kotlin.Boolean operator=NOT_IN
              $this: GET_VAR s type=java.util.HashSet<A> operator=null
              element: CALL .<init> type=A operator=null
                x: CONST Double type=kotlin.Double value='0.0'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail: +0.0 not found'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=NOT_IN
            arg0: CALL .contains type=kotlin.Boolean operator=NOT_IN
              $this: GET_VAR s type=java.util.HashSet<A> operator=null
              element: CALL .<init> type=A operator=null
                x: CONST Double type=kotlin.Double value='-0.0'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail: -0.0 not found'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=NOT_IN
            arg0: CALL .contains type=kotlin.Boolean operator=NOT_IN
              $this: GET_VAR s type=java.util.HashSet<A> operator=null
              element: CALL .<init> type=A operator=null
                x: CONST Double type=kotlin.Double value='-2.72'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail: -2.72 not found'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=NOT_IN
            arg0: CALL .contains type=kotlin.Boolean operator=NOT_IN
              $this: GET_VAR s type=java.util.HashSet<A> operator=null
              element: CALL .<init> type=A operator=null
                x: CALL .<get-NAN> type=kotlin.Double operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail: NaN not found'
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR s type=java.util.HashSet<A> operator=null
              arg1: CONST Int type=kotlin.Int value='5'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR s type=java.util.HashSet<A> operator=null
