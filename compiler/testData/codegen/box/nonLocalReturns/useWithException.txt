MODULE <test-module>
  FILE /useWithException.kt
    CLASS CLASS MyException
      CONSTRUCTOR public constructor MyException(/*0*/ message: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Exception
            p0: GET_VAR message type=kotlin.String operator=null
          INSTANCE_INITIALIZER_CALL classDescriptor=MyException
    CLASS CLASS Holder
      CONSTRUCTOR public constructor Holder(/*0*/ value: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD value type=kotlin.Unit operator=null
            receiver: THIS public final class Holder type=Holder
            value: GET_VAR value type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Holder
      PROPERTY public final var value: kotlin.String
        EXPRESSION_BODY
          GET_VAR value type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final operator fun plusAssign(/*0*/ s: kotlin.String?): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=PLUSEQ
            VAR val tmp0_this: Holder
              THIS public final class Holder type=Holder
            CALL .<set-value> type=kotlin.Unit operator=PLUSEQ
              $this: GET_VAR tmp0_this type=Holder operator=null
              <set-?>: CALL .plus type=kotlin.String operator=PLUSEQ
                $this: CALL .<get-value> type=kotlin.String operator=PLUSEQ
                  $this: GET_VAR tmp0_this type=Holder operator=null
                other: GET_VAR s type=kotlin.String? operator=null
          WHEN type=kotlin.Unit operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: GET_VAR s type=kotlin.String? operator=null
                arg1: CONST String type=kotlin.String value='closed'
            then: BLOCK type=kotlin.Unit operator=null
              BLOCK type=kotlin.Unit operator=PLUSEQ
                VAR val tmp1_this: Holder
                  THIS public final class Holder type=Holder
                CALL .<set-value> type=kotlin.Unit operator=PLUSEQ
                  $this: GET_VAR tmp1_this type=Holder operator=null
                  <set-?>: CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: CALL .<get-value> type=kotlin.String operator=PLUSEQ
                      $this: GET_VAR tmp1_this type=Holder operator=null
                    other: CONST String type=kotlin.String value='->'
    CLASS CLASS TestLocal
      CONSTRUCTOR public constructor TestLocal()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=TestLocal
      PROPERTY public final var status: Holder
        EXPRESSION_BODY
          CALL .<init> type=Holder operator=null
            value: CONST String type=kotlin.String value=''
      FUN private final fun underMutexFun(): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=PLUSEQ
            VAR val tmp0_this: TestLocal
              THIS public final class TestLocal : java.io.Closeable type=TestLocal
            CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
              $this: CALL .<get-status> type=Holder operator=PLUSEQ
                $this: GET_VAR tmp0_this type=TestLocal operator=null
              s: CONST String type=kotlin.String value='called'
      FUN public final fun local(): Holder
        BLOCK_BODY
          CALL .use type=kotlin.Unit operator=null
            $receiver: THIS public final class TestLocal : java.io.Closeable type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: TestLocal): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .underMutexFun type=kotlin.Unit operator=null
                      $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
              CALLABLE_REFERENCE <anonymous> type=(TestLocal) -> kotlin.Unit operator=LAMBDA
          RETURN type=kotlin.Nothing from=local
            CALL .<get-status> type=Holder operator=GET_PROPERTY
              $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
      FUN public final fun nonLocalSimple(): Holder
        BLOCK_BODY
          CALL .use type=kotlin.Nothing operator=null
            $receiver: THIS public final class TestLocal : java.io.Closeable type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  CALL .underMutexFun type=kotlin.Unit operator=null
                    $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
                  RETURN type=kotlin.Nothing from=nonLocalSimple
                    CALL .<get-status> type=Holder operator=GET_PROPERTY
                      $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
              CALLABLE_REFERENCE <anonymous> type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from=nonLocalSimple
            CALL .<init> type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public final fun nonLocalWithException(): Holder
        BLOCK_BODY
          CALL .use type=kotlin.Nothing operator=null
            $receiver: THIS public final class TestLocal : java.io.Closeable type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Nothing
                    try: BLOCK type=kotlin.Nothing operator=null
                      CALL .underMutexFun type=kotlin.Unit operator=null
                        $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
                      THROW type=kotlin.Nothing
                        CALL .<init> type=MyException operator=null
                          message: CONST String type=kotlin.String value='exception'
                    catch e: BLOCK type=kotlin.Nothing operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp0_this: TestLocal
                          THIS public final class TestLocal : java.io.Closeable type=TestLocal
                        CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
                          $this: CALL .<get-status> type=Holder operator=PLUSEQ
                            $this: GET_VAR tmp0_this type=TestLocal operator=null
                          s: BLOCK type=kotlin.String operator=EXCLEXCL
                            VAR val tmp2_notnull: kotlin.String?
                              CALL .<get-message> type=kotlin.String? operator=GET_PROPERTY
                                $this: GET_VAR e type=MyException operator=null
                            WHEN type=kotlin.String operator=null
                              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                                arg0: GET_VAR tmp2_notnull type=kotlin.String? operator=null
                                arg1: CONST Null type=kotlin.Nothing? value='null'
                              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                              else: GET_VAR tmp2_notnull type=kotlin.String? operator=null
                      RETURN type=kotlin.Nothing from=nonLocalWithException
                        CALL .<get-status> type=Holder operator=GET_PROPERTY
                          $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
              CALLABLE_REFERENCE <anonymous> type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from=nonLocalWithException
            CALL .<init> type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public final fun nonLocalWithFinally(): Holder
        BLOCK_BODY
          CALL .use type=kotlin.Nothing operator=null
            $receiver: THIS public final class TestLocal : java.io.Closeable type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Nothing
                    try: BLOCK type=kotlin.Nothing operator=null
                      CALL .underMutexFun type=kotlin.Unit operator=null
                        $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
                      RETURN type=kotlin.Nothing from=nonLocalWithFinally
                        CALL .<init> type=Holder operator=null
                          value: CONST String type=kotlin.String value='fail'
                    finally: BLOCK type=kotlin.Nothing operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp0_this: TestLocal
                          THIS public final class TestLocal : java.io.Closeable type=TestLocal
                        CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
                          $this: CALL .<get-status> type=Holder operator=PLUSEQ
                            $this: GET_VAR tmp0_this type=TestLocal operator=null
                          s: CONST String type=kotlin.String value='finally'
                      RETURN type=kotlin.Nothing from=nonLocalWithFinally
                        CALL .<get-status> type=Holder operator=GET_PROPERTY
                          $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
              CALLABLE_REFERENCE <anonymous> type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from=nonLocalWithFinally
            CALL .<init> type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public final fun nonLocalWithExceptionAndFinally(): Holder
        BLOCK_BODY
          CALL .use type=kotlin.Nothing operator=null
            $receiver: THIS public final class TestLocal : java.io.Closeable type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Nothing
                    try: BLOCK type=kotlin.Nothing operator=null
                      CALL .underMutexFun type=kotlin.Unit operator=null
                        $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
                      THROW type=kotlin.Nothing
                        CALL .<init> type=MyException operator=null
                          message: CONST String type=kotlin.String value='exception'
                    catch e: BLOCK type=kotlin.Nothing operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp0_this: TestLocal
                          THIS public final class TestLocal : java.io.Closeable type=TestLocal
                        CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
                          $this: CALL .<get-status> type=Holder operator=PLUSEQ
                            $this: GET_VAR tmp0_this type=TestLocal operator=null
                          s: CALL .<get-message> type=kotlin.String? operator=GET_PROPERTY
                            $this: GET_VAR e type=MyException operator=null
                      RETURN type=kotlin.Nothing from=nonLocalWithExceptionAndFinally
                        CALL .<get-status> type=Holder operator=GET_PROPERTY
                          $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
                    finally: BLOCK type=kotlin.Unit operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp1_this: TestLocal
                          THIS public final class TestLocal : java.io.Closeable type=TestLocal
                        CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
                          $this: CALL .<get-status> type=Holder operator=PLUSEQ
                            $this: GET_VAR tmp1_this type=TestLocal operator=null
                          s: CONST String type=kotlin.String value='finally'
              CALLABLE_REFERENCE <anonymous> type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from=nonLocalWithExceptionAndFinally
            CALL .<init> type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public final fun nonLocalWithExceptionAndFinallyWithReturn(): Holder
        BLOCK_BODY
          CALL .use type=kotlin.Nothing operator=null
            $receiver: THIS public final class TestLocal : java.io.Closeable type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Nothing
                    try: BLOCK type=kotlin.Nothing operator=null
                      CALL .underMutexFun type=kotlin.Unit operator=null
                        $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
                      THROW type=kotlin.Nothing
                        CALL .<init> type=MyException operator=null
                          message: CONST String type=kotlin.String value='exception'
                    catch e: BLOCK type=kotlin.Nothing operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp0_this: TestLocal
                          THIS public final class TestLocal : java.io.Closeable type=TestLocal
                        CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
                          $this: CALL .<get-status> type=Holder operator=PLUSEQ
                            $this: GET_VAR tmp0_this type=TestLocal operator=null
                          s: CALL .<get-message> type=kotlin.String? operator=GET_PROPERTY
                            $this: GET_VAR e type=MyException operator=null
                      RETURN type=kotlin.Nothing from=nonLocalWithExceptionAndFinallyWithReturn
                        CALL .<init> type=Holder operator=null
                          value: CONST String type=kotlin.String value='fail'
                    finally: BLOCK type=kotlin.Nothing operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp1_this: TestLocal
                          THIS public final class TestLocal : java.io.Closeable type=TestLocal
                        CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
                          $this: CALL .<get-status> type=Holder operator=PLUSEQ
                            $this: GET_VAR tmp1_this type=TestLocal operator=null
                          s: CONST String type=kotlin.String value='finally'
                      RETURN type=kotlin.Nothing from=nonLocalWithExceptionAndFinallyWithReturn
                        CALL .<get-status> type=Holder operator=GET_PROPERTY
                          $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
              CALLABLE_REFERENCE <anonymous> type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from=nonLocalWithExceptionAndFinallyWithReturn
            CALL .<init> type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public final fun nonLocalNestedWithException(): Holder
        BLOCK_BODY
          CALL .use type=kotlin.Nothing operator=null
            $receiver: THIS public final class TestLocal : java.io.Closeable type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Nothing
                    try: BLOCK type=kotlin.Nothing operator=null
                      TRY_CATCH type=kotlin.Nothing
                        try: BLOCK type=kotlin.Nothing operator=null
                          CALL .underMutexFun type=kotlin.Unit operator=null
                            $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
                          THROW type=kotlin.Nothing
                            CALL .<init> type=MyException operator=null
                              message: CONST String type=kotlin.String value='exception'
                        catch e: BLOCK type=kotlin.Nothing operator=null
                          BLOCK type=kotlin.Unit operator=PLUSEQ
                            VAR val tmp0_this: TestLocal
                              THIS public final class TestLocal : java.io.Closeable type=TestLocal
                            CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
                              $this: CALL .<get-status> type=Holder operator=PLUSEQ
                                $this: GET_VAR tmp0_this type=TestLocal operator=null
                              s: CONST String type=kotlin.String value='exception'
                          RETURN type=kotlin.Nothing from=nonLocalNestedWithException
                            CALL .<init> type=Holder operator=null
                              value: CONST String type=kotlin.String value='fail'
                        finally: BLOCK type=kotlin.Nothing operator=null
                          BLOCK type=kotlin.Unit operator=PLUSEQ
                            VAR val tmp1_this: TestLocal
                              THIS public final class TestLocal : java.io.Closeable type=TestLocal
                            CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
                              $this: CALL .<get-status> type=Holder operator=PLUSEQ
                                $this: GET_VAR tmp1_this type=TestLocal operator=null
                              s: CONST String type=kotlin.String value='finally1'
                          RETURN type=kotlin.Nothing from=nonLocalNestedWithException
                            CALL .<get-status> type=Holder operator=GET_PROPERTY
                              $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
                    finally: BLOCK type=kotlin.Unit operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp2_this: TestLocal
                          THIS public final class TestLocal : java.io.Closeable type=TestLocal
                        CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
                          $this: CALL .<get-status> type=Holder operator=PLUSEQ
                            $this: GET_VAR tmp2_this type=TestLocal operator=null
                          s: CONST String type=kotlin.String value='finally2'
              CALLABLE_REFERENCE <anonymous> type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from=nonLocalNestedWithException
            CALL .<init> type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public final fun nonLocalNestedFinally(): Holder
        BLOCK_BODY
          CALL .use type=kotlin.Nothing operator=null
            $receiver: THIS public final class TestLocal : java.io.Closeable type=TestLocal
            block: BLOCK type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: TestLocal): kotlin.Nothing
                BLOCK_BODY
                  TRY_CATCH type=kotlin.Nothing
                    try: BLOCK type=kotlin.Nothing operator=null
                      TRY_CATCH type=kotlin.Nothing
                        try: BLOCK type=kotlin.Nothing operator=null
                          CALL .underMutexFun type=kotlin.Unit operator=null
                            $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
                          RETURN type=kotlin.Nothing from=nonLocalNestedFinally
                            CALL .<get-status> type=Holder operator=GET_PROPERTY
                              $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
                        finally: BLOCK type=Holder operator=null
                          BLOCK type=kotlin.Unit operator=PLUSEQ
                            VAR val tmp0_this: TestLocal
                              THIS public final class TestLocal : java.io.Closeable type=TestLocal
                            CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
                              $this: CALL .<get-status> type=Holder operator=PLUSEQ
                                $this: GET_VAR tmp0_this type=TestLocal operator=null
                              s: CONST String type=kotlin.String value='finally1'
                          CALL .<get-status> type=Holder operator=GET_PROPERTY
                            $this: THIS public final class TestLocal : java.io.Closeable type=TestLocal
                    finally: BLOCK type=kotlin.Unit operator=null
                      BLOCK type=kotlin.Unit operator=PLUSEQ
                        VAR val tmp1_this: TestLocal
                          THIS public final class TestLocal : java.io.Closeable type=TestLocal
                        CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
                          $this: CALL .<get-status> type=Holder operator=PLUSEQ
                            $this: GET_VAR tmp1_this type=TestLocal operator=null
                          s: CONST String type=kotlin.String value='finally2'
              CALLABLE_REFERENCE <anonymous> type=(TestLocal) -> kotlin.Nothing operator=LAMBDA
          RETURN type=kotlin.Nothing from=nonLocalNestedFinally
            CALL .<init> type=Holder operator=null
              value: CONST String type=kotlin.String value='fail'
      FUN public open override /*1*/ fun close(): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=PLUSEQ
            VAR val tmp0_this: TestLocal
              THIS public final class TestLocal : java.io.Closeable type=TestLocal
            CALL .plusAssign type=kotlin.Unit operator=PLUSEQ
              $this: CALL .<get-status> type=Holder operator=PLUSEQ
                $this: GET_VAR tmp0_this type=TestLocal operator=null
              s: CONST String type=kotlin.String value='closed'
          THROW type=kotlin.Nothing
            CALL .<init> type=MyException operator=null
              message: CONST String type=kotlin.String value='error'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .assertError type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='1'
          expected: CONST String type=kotlin.String value='called->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .local type=Holder operator=null
                    $this: $RECEIVER of: <anonymous> type=TestLocal
            CALLABLE_REFERENCE <anonymous> type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL .assertError type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='2'
          expected: CONST String type=kotlin.String value='called->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .nonLocalSimple type=Holder operator=null
                    $this: $RECEIVER of: <anonymous> type=TestLocal
            CALLABLE_REFERENCE <anonymous> type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL .assertError type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='3'
          expected: CONST String type=kotlin.String value='called->exception->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .nonLocalWithException type=Holder operator=null
                    $this: $RECEIVER of: <anonymous> type=TestLocal
            CALLABLE_REFERENCE <anonymous> type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL .assertError type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='4'
          expected: CONST String type=kotlin.String value='called->finally->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .nonLocalWithFinally type=Holder operator=null
                    $this: $RECEIVER of: <anonymous> type=TestLocal
            CALLABLE_REFERENCE <anonymous> type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL .assertError type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='5'
          expected: CONST String type=kotlin.String value='called->exception->finally->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .nonLocalWithExceptionAndFinally type=Holder operator=null
                    $this: $RECEIVER of: <anonymous> type=TestLocal
            CALLABLE_REFERENCE <anonymous> type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL .assertError type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='6'
          expected: CONST String type=kotlin.String value='called->exception->finally->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .nonLocalWithExceptionAndFinallyWithReturn type=Holder operator=null
                    $this: $RECEIVER of: <anonymous> type=TestLocal
            CALLABLE_REFERENCE <anonymous> type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL .assertError type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='7'
          expected: CONST String type=kotlin.String value='called->exception->finally1->finally2->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .nonLocalNestedWithException type=Holder operator=null
                    $this: $RECEIVER of: <anonymous> type=TestLocal
            CALLABLE_REFERENCE <anonymous> type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        CALL .assertError type=kotlin.Unit operator=null
          index: CONST Int type=kotlin.Int value='8'
          expected: CONST String type=kotlin.String value='called->finally1->finally2->closed'
          l: BLOCK type=TestLocal.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun TestLocal.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .nonLocalNestedFinally type=Holder operator=null
                    $this: $RECEIVER of: <anonymous> type=TestLocal
            CALLABLE_REFERENCE <anonymous> type=TestLocal.() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
    FUN public fun assertError(/*0*/ index: kotlin.Int, /*1*/ expected: kotlin.String, /*2*/ l: TestLocal.() -> kotlin.Unit): kotlin.Unit
      BLOCK_BODY
        VAR val testLocal: TestLocal
          CALL .<init> type=TestLocal operator=null
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .invoke type=kotlin.Unit operator=INVOKE
              $this: GET_VAR l type=TestLocal.() -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
              $receiver: GET_VAR testLocal type=TestLocal operator=null
            CALL .fail type=kotlin.Nothing operator=null
              message: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='fail '
                GET_VAR index type=kotlin.Int operator=null
                CONST String type=kotlin.String value=': no error'
          catch e: BLOCK type=kotlin.Unit operator=null
            CALL .assertEquals type=kotlin.Unit operator=null
              expected: GET_VAR expected type=kotlin.String operator=null
              actual: CALL .<get-value> type=kotlin.String operator=GET_PROPERTY
                $this: CALL .<get-status> type=Holder operator=GET_PROPERTY
                  $this: GET_VAR testLocal type=TestLocal operator=null
              message: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='failed on '
                GET_VAR index type=kotlin.Int operator=null
