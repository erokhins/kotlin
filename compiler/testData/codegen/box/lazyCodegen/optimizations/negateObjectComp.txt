MODULE <test-module>
  FILE /negateObjectComp.kt
    PROPERTY public val p: kotlin.Int? = 1
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='1'
    PROPERTY public val z: kotlin.Int? = 2
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='2'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: BLOCK type=kotlin.Int operator=EXCLEXCL
                VAR val tmp0_notnull: kotlin.Int?
                  CALL .<get-p> type=kotlin.Int? operator=GET_PROPERTY
                WHEN type=kotlin.Int operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp0_notnull type=kotlin.Int? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                  else: GET_VAR tmp0_notnull type=kotlin.Int? operator=null
              arg1: BLOCK type=kotlin.Int operator=EXCLEXCL
                VAR val tmp1_notnull: kotlin.Int?
                  CALL .<get-z> type=kotlin.Int? operator=GET_PROPERTY
                WHEN type=kotlin.Int operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp1_notnull type=kotlin.Int? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                  else: GET_VAR tmp1_notnull type=kotlin.Int? operator=null
          then: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='fail'
