MODULE <test-module>
  FILE /exceptionInFieldInitializer.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ p: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD p type=kotlin.Unit operator=null
            receiver: THIS public final class A type=A
            value: GET_VAR p type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final val p: kotlin.String
        EXPRESSION_BODY
          GET_VAR p type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val prop: kotlin.String
        EXPRESSION_BODY
          THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.RuntimeException operator=null
    CLASS CLASS B
      CONSTRUCTOR public constructor B(/*0*/ p: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD p type=kotlin.Unit operator=null
            receiver: THIS public final class B type=B
            value: GET_VAR p type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      PROPERTY public final val p: kotlin.String
        EXPRESSION_BODY
          GET_VAR p type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val prop: kotlin.String
        EXPRESSION_BODY
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .<get-p> type=kotlin.String operator=GET_PROPERTY
                $this: THIS public final class B type=B
              arg1: CONST String type=kotlin.String value='test'
            then: CONST String type=kotlin.String value='OK'
            else: THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.RuntimeException operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CONST String type=kotlin.String value='fail'
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Unit operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                  arg0: CALL .<get-prop> type=kotlin.String operator=GET_PROPERTY
                    $this: CALL .<init> type=A operator=null
                      p: CONST String type=kotlin.String value='test'
                  arg1: CONST String type=kotlin.String value='OK'
              then: RETURN type=kotlin.Nothing from=box
                CONST String type=kotlin.String value='fail 1'
          catch e: BLOCK type=kotlin.Unit operator=null
            SET_VAR result type=kotlin.Unit operator=EQ
              CONST String type=kotlin.String value='OK'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR result type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 1: '
              GET_VAR result type=kotlin.String operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-prop> type=kotlin.String operator=GET_PROPERTY
                $this: CALL .<init> type=B operator=null
                  p: CONST String type=kotlin.String value='test'
              arg1: CONST String type=kotlin.String value='OK'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        SET_VAR result type=kotlin.Unit operator=EQ
          CONST String type=kotlin.String value='fail'
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Unit operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                  arg0: CALL .<get-prop> type=kotlin.String operator=GET_PROPERTY
                    $this: CALL .<init> type=B operator=null
                      p: CONST String type=kotlin.String value='fail'
                  arg1: CONST String type=kotlin.String value='OK'
              then: RETURN type=kotlin.Nothing from=box
                CONST String type=kotlin.String value='fail 3'
          catch e: BLOCK type=kotlin.Nothing operator=null
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='fail'
