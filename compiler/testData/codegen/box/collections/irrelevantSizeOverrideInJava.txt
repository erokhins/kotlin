MODULE <test-module>
  FILE /test.kt
    CLASS INTERFACE Sized
      PROPERTY public abstract val size: kotlin.Int
    CLASS CLASS A
      CONSTRUCTOR public constructor A</*0*/ T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL J
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      FUN public open override /*1*/ fun isEmpty(): kotlin.Boolean
        BLOCK_BODY
          THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.UnsupportedOperationException operator=null
      FUN public open override /*1*/ fun contains(/*0*/ element: T): kotlin.Boolean
        BLOCK_BODY
          THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.UnsupportedOperationException operator=null
      FUN public open override /*1*/ fun iterator(): kotlin.collections.Iterator<T>
        BLOCK_BODY
          THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.UnsupportedOperationException operator=null
      FUN public open override /*1*/ fun containsAll(/*0*/ elements: kotlin.collections.Collection<T>): kotlin.Boolean
        BLOCK_BODY
          THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.UnsupportedOperationException operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: A<kotlin.String>
          CALL .<init> type=A<kotlin.String> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR a type=A<kotlin.String> operator=null
              arg1: CONST Int type=kotlin.Int value='123'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        VAR val c: kotlin.collections.Collection<kotlin.String>
          GET_VAR a type=A<kotlin.String> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR c type=kotlin.collections.Collection<kotlin.String> operator=null
              arg1: CONST Int type=kotlin.Int value='123'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        VAR val sized: Sized
          GET_VAR a type=A<kotlin.String> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR sized type=Sized operator=null
              arg1: CONST Int type=kotlin.Int value='123'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 3'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
