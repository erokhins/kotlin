MODULE <test-module>
  FILE /test.kt
    CLASS CLASS MyList
      CONSTRUCTOR public constructor MyList()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=MyList
    CLASS CLASS ListImpl
      CONSTRUCTOR public constructor ListImpl()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL J
          INSTANCE_INITIALIZER_CALL classDescriptor=ListImpl
      PROPERTY public open override /*1*/ val size: kotlin.Int
        PROPERTY_GETTER public open override /*1*/ fun <get-size>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-size>
              CALL .plus type=kotlin.Int operator=PLUS
                $this: CALL .<get-size> superQualifier=J type=kotlin.Int operator=GET_PROPERTY
                  $this: THIS public final class ListImpl : J type=J
                other: CONST Int type=kotlin.Int value='1'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val impl: ListImpl
          CALL .<init> type=ListImpl operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR impl type=ListImpl operator=null
              arg1: CONST Int type=kotlin.Int value='56'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .contains type=kotlin.Boolean operator=null
              $this: GET_VAR impl type=ListImpl operator=null
              element: CONST String type=kotlin.String value='abc'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        VAR val l: kotlin.collections.List<kotlin.String>
          GET_VAR impl type=ListImpl operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR l type=kotlin.collections.List<kotlin.String> operator=null
              arg1: CONST Int type=kotlin.Int value='56'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .contains type=kotlin.Boolean operator=null
              $this: GET_VAR l type=kotlin.collections.List<kotlin.String> operator=null
              element: CONST String type=kotlin.String value='abc'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 4'
        VAR val anyList: kotlin.collections.List<kotlin.Any?>
          TYPE_OP operator=CAST typeOperand=kotlin.collections.List<kotlin.Any?>
            GET_VAR impl type=ListImpl operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR anyList type=kotlin.collections.List<kotlin.Any?> operator=null
              arg1: CONST Int type=kotlin.Int value='56'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 5'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .contains type=kotlin.Boolean operator=null
              $this: GET_VAR anyList type=kotlin.collections.List<kotlin.Any?> operator=null
              element: CONST String type=kotlin.String value='abc'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 6'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .contains type=kotlin.Boolean operator=null
            $this: GET_VAR anyList type=kotlin.collections.List<kotlin.Any?> operator=null
            element: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 7'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .contains type=kotlin.Boolean operator=null
            $this: GET_VAR anyList type=kotlin.collections.List<kotlin.Any?> operator=null
            element: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 8'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
