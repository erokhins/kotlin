MODULE <test-module>
  FILE /test.kt
    CLASS CLASS AImpl
      CONSTRUCTOR public constructor AImpl()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=AImpl
      FUN public final fun charAt(/*0*/ index: kotlin.Int): kotlin.Char
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=charAt
            CONST Char type=kotlin.Char value='A'
      FUN public final fun length(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=length
            CONST Int type=kotlin.Int value='56'
    CLASS CLASS X
      CONSTRUCTOR public constructor X()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL A
          INSTANCE_INITIALIZER_CALL classDescriptor=X
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val x: X
          CALL .<init> type=X operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-length> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR x type=X operator=null
              arg1: CONST Int type=kotlin.Int value='56'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .get type=kotlin.Char operator=GET_ARRAY_ELEMENT
                $this: GET_VAR x type=X operator=null
                index: CONST Int type=kotlin.Int value='0'
              arg1: CONST Char type=kotlin.Char value='A'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
