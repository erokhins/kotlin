MODULE <test-module>
  FILE /simpleCallBinary.kt
    CLASS ANNOTATION_CLASS Ann
      CONSTRUCTOR public constructor Ann(/*0*/ p1: kotlin.Int, /*1*/ p2: kotlin.Int, /*2*/ p3: kotlin.Int, /*3*/ p4: kotlin.Int, /*4*/ p5: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD p1 type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR p1 type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD p2 type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR p2 type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD p3 type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR p3 type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD p4 type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR p4 type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD p5 type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=Ann
            value: GET_VAR p5 type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Ann
      PROPERTY public final val p1: kotlin.Int
        EXPRESSION_BODY
          GET_VAR p1 type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val p2: kotlin.Int
        EXPRESSION_BODY
          GET_VAR p2 type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val p3: kotlin.Int
        EXPRESSION_BODY
          GET_VAR p3 type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val p4: kotlin.Int
        EXPRESSION_BODY
          GET_VAR p4 type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val p5: kotlin.Int
        EXPRESSION_BODY
          GET_VAR p5 type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    PROPERTY public const val prop1: kotlin.Int = 2
      EXPRESSION_BODY
        CALL .plus type=kotlin.Int operator=null
          $this: CONST Int type=kotlin.Int value='1'
          other: CONST Int type=kotlin.Int value='1'
    PROPERTY public const val prop2: kotlin.Int = 0
      EXPRESSION_BODY
        CALL .minus type=kotlin.Int operator=null
          $this: CONST Int type=kotlin.Int value='1'
          other: CONST Int type=kotlin.Int value='1'
    PROPERTY public const val prop3: kotlin.Int = 1
      EXPRESSION_BODY
        CALL .times type=kotlin.Int operator=null
          $this: CONST Int type=kotlin.Int value='1'
          other: CONST Int type=kotlin.Int value='1'
    PROPERTY public const val prop4: kotlin.Int = 1
      EXPRESSION_BODY
        CALL .div type=kotlin.Int operator=null
          $this: CONST Int type=kotlin.Int value='1'
          other: CONST Int type=kotlin.Int value='1'
    PROPERTY public const val prop5: kotlin.Int = 0
      EXPRESSION_BODY
        CALL .mod type=kotlin.Int operator=null
          $this: CONST Int type=kotlin.Int value='1'
          other: CONST Int type=kotlin.Int value='1'
    CLASS CLASS MyClass
      CONSTRUCTOR public constructor MyClass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=MyClass
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val annotation: Ann
          BLOCK type=Ann operator=EXCLEXCL
            VAR val tmp0_notnull: Ann!
              CALL .getAnnotation type=Ann! operator=null
                $this: CALL .<get-java> type=java.lang.Class<MyClass> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE MyClass type=kotlin.reflect.KClass<MyClass>
                p0: CALL .<get-java> type=java.lang.Class<Ann> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE Ann type=kotlin.reflect.KClass<Ann>
            WHEN type=Ann operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=Ann! operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=Ann
                GET_VAR tmp0_notnull type=Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-p1> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR annotation type=Ann operator=null
              arg1: CALL .<get-prop1> type=kotlin.Int operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 1, expected = '
              CALL .<get-prop1> type=kotlin.Int operator=GET_PROPERTY
              CONST String type=kotlin.String value=', actual = '
              CALL .<get-p1> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR annotation type=Ann operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-p2> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR annotation type=Ann operator=null
              arg1: CALL .<get-prop2> type=kotlin.Int operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 2, expected = '
              CALL .<get-prop2> type=kotlin.Int operator=GET_PROPERTY
              CONST String type=kotlin.String value=', actual = '
              CALL .<get-p2> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR annotation type=Ann operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-p3> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR annotation type=Ann operator=null
              arg1: CALL .<get-prop3> type=kotlin.Int operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 3, expected = '
              CALL .<get-prop3> type=kotlin.Int operator=GET_PROPERTY
              CONST String type=kotlin.String value=', actual = '
              CALL .<get-p3> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR annotation type=Ann operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-p4> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR annotation type=Ann operator=null
              arg1: CALL .<get-prop4> type=kotlin.Int operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 4, expected = '
              CALL .<get-prop4> type=kotlin.Int operator=GET_PROPERTY
              CONST String type=kotlin.String value=', actual = '
              CALL .<get-p4> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR annotation type=Ann operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-p5> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR annotation type=Ann operator=null
              arg1: CALL .<get-prop5> type=kotlin.Int operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 5, expected = '
              CALL .<get-prop5> type=kotlin.Int operator=GET_PROPERTY
              CONST String type=kotlin.String value=', actual = '
              CALL .<get-p5> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR annotation type=Ann operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
