MODULE <test-module>
  FILE /char.kt
    CLASS ANNOTATION_CLASS Ann
      CONSTRUCTOR public constructor Ann(/*0*/ c1: kotlin.Int)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD c1 type=kotlin.Unit operator=null
            receiver: THIS @kotlin.annotation.Retention(value = AnnotationRetention.RUNTIME) public final annotation class Ann : kotlin.Annotation type=test.Ann
            value: GET_VAR c1 type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Ann
      PROPERTY public final val c1: kotlin.Int
        EXPRESSION_BODY
          GET_VAR c1 type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS CLASS MyClass
      CONSTRUCTOR public constructor MyClass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=MyClass
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val annotation: test.Ann
          BLOCK type=test.Ann operator=EXCLEXCL
            VAR val tmp0_notnull: test.Ann!
              CALL .getAnnotation type=test.Ann! operator=null
                $this: CALL .<get-java> type=java.lang.Class<test.MyClass> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE MyClass type=kotlin.reflect.KClass<test.MyClass>
                p0: CALL .<get-java> type=java.lang.Class<test.Ann> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE Ann type=kotlin.reflect.KClass<test.Ann>
            WHEN type=test.Ann operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=test.Ann! operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=test.Ann
                GET_VAR tmp0_notnull type=test.Ann! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-c1> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR annotation type=test.Ann operator=null
              arg1: CONST Int type=kotlin.Int value='0'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail : expected = '
              CONST Int type=kotlin.Int value='1'
              CONST String type=kotlin.String value=', actual = '
              CALL .<get-c1> type=kotlin.Int operator=GET_PROPERTY
                $this: GET_VAR annotation type=test.Ann operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
