MODULE <test-module>
  FILE /noSpecialBridgeInSuperClass.kt
    PROPERTY public var result: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value=''
    CLASS CLASS AbstractFoo
      CONSTRUCTOR public constructor AbstractFoo</*0*/ K, /*1*/ V>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=AbstractFoo
      FUN public open override /*1*/ fun get(/*0*/ key: K): V?
        BLOCK_BODY
          CALL .<set-result> type=kotlin.Unit operator=EQ
            <set-?>: CONST String type=kotlin.String value='AbstractFoo'
          RETURN type=kotlin.Nothing from=get
            CONST Null type=kotlin.Nothing? value='null'
      PROPERTY public open override /*1*/ val size: kotlin.Int
        PROPERTY_GETTER public open override /*1*/ fun <get-size>(): kotlin.Int
          BLOCK_BODY
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.UnsupportedOperationException operator=null
      FUN public open override /*1*/ fun isEmpty(): kotlin.Boolean
        BLOCK_BODY
          THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.UnsupportedOperationException operator=null
      FUN public open override /*1*/ fun containsKey(/*0*/ key: K): kotlin.Boolean
        BLOCK_BODY
          THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.UnsupportedOperationException operator=null
      FUN public open override /*1*/ fun containsValue(/*0*/ value: V): kotlin.Boolean
        BLOCK_BODY
          THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.UnsupportedOperationException operator=null
      PROPERTY public open override /*1*/ val keys: kotlin.collections.Set<K>
        PROPERTY_GETTER public open override /*1*/ fun <get-keys>(): kotlin.collections.Set<K>
          BLOCK_BODY
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.UnsupportedOperationException operator=null
      PROPERTY public open override /*1*/ val values: kotlin.collections.Collection<V>
        PROPERTY_GETTER public open override /*1*/ fun <get-values>(): kotlin.collections.Collection<V>
          BLOCK_BODY
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.UnsupportedOperationException operator=null
      PROPERTY public open override /*1*/ val entries: kotlin.collections.Set<kotlin.collections.Map.Entry<K, V>>
        PROPERTY_GETTER public open override /*1*/ fun <get-entries>(): kotlin.collections.Set<kotlin.collections.Map.Entry<K, V>>
          BLOCK_BODY
            THROW type=kotlin.Nothing
              CALL .<init> type=java.lang.UnsupportedOperationException operator=null
    CLASS CLASS StringFoo
      CONSTRUCTOR public constructor StringFoo</*0*/ E>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL AbstractFoo
          INSTANCE_INITIALIZER_CALL classDescriptor=StringFoo
      FUN public open override /*1*/ fun get(/*0*/ key: kotlin.String): E?
        BLOCK_BODY
          CALL .<set-result> type=kotlin.Unit operator=EQ
            <set-?>: CONST String type=kotlin.String value='StringFoo'
          RETURN type=kotlin.Nothing from=get
            CONST Null type=kotlin.Nothing? value='null'
    CLASS CLASS IntFoo
      CONSTRUCTOR public constructor IntFoo</*0*/ E>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL AbstractFoo
          INSTANCE_INITIALIZER_CALL classDescriptor=IntFoo
      FUN public open override /*1*/ fun get(/*0*/ key: kotlin.Int): E?
        BLOCK_BODY
          CALL .<set-result> type=kotlin.Unit operator=EQ
            <set-?>: CONST String type=kotlin.String value='IntFoo'
          RETURN type=kotlin.Nothing from=get
            CONST Null type=kotlin.Nothing? value='null'
    CLASS CLASS AnyFoo
      CONSTRUCTOR public constructor AnyFoo</*0*/ E>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL AbstractFoo
          INSTANCE_INITIALIZER_CALL classDescriptor=AnyFoo
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .get type=kotlin.String? operator=null
          $this: CALL .<init> type=StringFoo<kotlin.String> operator=null
          key: CONST String type=kotlin.String value=''
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
              arg1: CONST String type=kotlin.String value='StringFoo'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 1: '
              CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
        CALL .get type=kotlin.String? operator=null
          $this: CALL .<init> type=IntFoo<kotlin.String> operator=null
          key: CONST Int type=kotlin.Int value='1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
              arg1: CONST String type=kotlin.String value='IntFoo'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 2: '
              CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
        CALL .get type=kotlin.String? operator=null
          $this: CALL .<init> type=AnyFoo<kotlin.String> operator=null
          key: CONST Null type=kotlin.Nothing? value='null'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
              arg1: CONST String type=kotlin.String value='AbstractFoo'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 3: '
              CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
