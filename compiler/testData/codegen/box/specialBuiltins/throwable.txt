MODULE <test-module>
  FILE /throwable.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        TRY_CATCH type=kotlin.Nothing
          try: BLOCK type=kotlin.Nothing operator=null
            THROW type=kotlin.Nothing
              CALL .<init> type=kotlin.Throwable operator=null
                message: CONST String type=kotlin.String value='OK'
                cause: CONST Null type=kotlin.Nothing? value='null'
          catch t: BLOCK type=kotlin.Nothing operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                  arg0: CALL .<get-cause> type=kotlin.Throwable? operator=GET_PROPERTY
                    $this: GET_VAR t type=kotlin.Throwable operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
              then: RETURN type=kotlin.Nothing from=box
                CONST String type=kotlin.String value='fail 1'
            RETURN type=kotlin.Nothing from=box
              BLOCK type=kotlin.String operator=EXCLEXCL
                VAR val tmp0_notnull: kotlin.String?
                  CALL .<get-message> type=kotlin.String? operator=GET_PROPERTY
                    $this: GET_VAR t type=kotlin.Throwable operator=null
                WHEN type=kotlin.String operator=null
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp0_notnull type=kotlin.String? operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                  else: GET_VAR tmp0_notnull type=kotlin.String? operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='fail 2'
