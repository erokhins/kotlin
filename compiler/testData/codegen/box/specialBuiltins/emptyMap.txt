MODULE <test-module>
  FILE /emptyMap.kt
    CLASS OBJECT EmptyMap
      CONSTRUCTOR private constructor EmptyMap()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=EmptyMap
      PROPERTY public open override /*1*/ val size: kotlin.Int
        PROPERTY_GETTER public open override /*1*/ fun <get-size>(): kotlin.Int
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-size>
              CONST Int type=kotlin.Int value='0'
      FUN public open override /*1*/ fun isEmpty(): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=isEmpty
            CONST Boolean type=kotlin.Boolean value='true'
      FUN public open override /*1*/ fun containsKey(/*0*/ key: kotlin.Any): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=containsKey
            CONST Boolean type=kotlin.Boolean value='false'
      FUN public open override /*1*/ fun containsValue(/*0*/ value: kotlin.Nothing): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=containsValue
            CONST Boolean type=kotlin.Boolean value='false'
      FUN public open override /*1*/ fun get(/*0*/ key: kotlin.Any): kotlin.Nothing?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=get
            CONST Null type=kotlin.Nothing? value='null'
      PROPERTY public open override /*1*/ val entries: kotlin.collections.Set<kotlin.collections.Map.Entry<kotlin.String, kotlin.Nothing>>
        PROPERTY_GETTER public open override /*1*/ fun <get-entries>(): kotlin.collections.Set<kotlin.collections.Map.Entry<kotlin.String, kotlin.Nothing>>
          BLOCK_BODY
            BLOCK type=kotlin.Nothing operator=EXCLEXCL
              VAR val tmp0_notnull: kotlin.Nothing?
                CONST Null type=kotlin.Nothing? value='null'
              WHEN type=kotlin.Nothing operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
      PROPERTY public open override /*1*/ val keys: kotlin.collections.Set<kotlin.String>
        PROPERTY_GETTER public open override /*1*/ fun <get-keys>(): kotlin.collections.Set<kotlin.String>
          BLOCK_BODY
            BLOCK type=kotlin.Nothing operator=EXCLEXCL
              VAR val tmp0_notnull: kotlin.Nothing?
                CONST Null type=kotlin.Nothing? value='null'
              WHEN type=kotlin.Nothing operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
      PROPERTY public open override /*1*/ val values: kotlin.collections.Collection<kotlin.Nothing>
        PROPERTY_GETTER public open override /*1*/ fun <get-values>(): kotlin.collections.Collection<kotlin.Nothing>
          BLOCK_BODY
            BLOCK type=kotlin.Nothing operator=EXCLEXCL
              VAR val tmp0_notnull: kotlin.Nothing?
                CONST Null type=kotlin.Nothing? value='null'
              WHEN type=kotlin.Nothing operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val n: kotlin.collections.Map<kotlin.Any?, kotlin.Any?>
          TYPE_OP operator=CAST typeOperand=kotlin.collections.Map<kotlin.Any?, kotlin.Any?>
            GET_OBJECT EmptyMap type=EmptyMap
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .get type=kotlin.Any? operator=null
                $this: GET_VAR n type=kotlin.collections.Map<kotlin.Any?, kotlin.Any?> operator=null
                key: CONST Null type=kotlin.Nothing? value='null'
              arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .containsKey type=kotlin.Boolean operator=null
            $this: GET_VAR n type=kotlin.collections.Map<kotlin.Any?, kotlin.Any?> operator=null
            key: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .containsValue type=kotlin.Boolean operator=null
            $this: GET_VAR n type=kotlin.collections.Map<kotlin.Any?, kotlin.Any?> operator=null
            value: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 3'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
