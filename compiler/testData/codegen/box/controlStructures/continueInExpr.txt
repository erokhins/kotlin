MODULE <test-module>
  FILE /continueInExpr.kt
    FUN public fun concatNonNulls(/*0*/ strings: kotlin.collections.List<kotlin.String?>): kotlin.String
      BLOCK_BODY
        VAR var result: kotlin.String
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.String?>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.String?> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR strings type=kotlin.collections.List<kotlin.String?> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String?> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val str: kotlin.String?
                CALL .next type=kotlin.String? operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String?> operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR result type=kotlin.Unit operator=PLUSEQ
                  CALL .plus type=kotlin.String operator=PLUSEQ
                    $this: GET_VAR result type=kotlin.String operator=PLUSEQ
                    other: BLOCK type=kotlin.Any? operator=ELVIS
                      VAR val tmp2_elvis_lhs: kotlin.String?
                        GET_VAR str type=kotlin.String? operator=null
                      WHEN type=kotlin.Any? operator=null
                        if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                          arg0: GET_VAR tmp2_elvis_lhs type=kotlin.String? operator=null
                          arg1: CONST Null type=kotlin.Nothing? value='null'
                        then: CONTINUE label=null loop.label=null depth=0
                        else: GET_VAR tmp2_elvis_lhs type=kotlin.String? operator=null
        RETURN type=kotlin.Nothing from=concatNonNulls
          GET_VAR result type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val test: kotlin.String
          CALL .concatNonNulls type=kotlin.String operator=null
            strings: CALL .listOf type=kotlin.collections.List<kotlin.String?> operator=null
              elements: VARARG type=Array<out String?> varargElementType=String?
                CONST String type=kotlin.String value='abc'
                CONST Null type=kotlin.Nothing? value='null'
                CONST Null type=kotlin.Nothing? value='null'
                CONST String type=kotlin.String value=''
                CONST Null type=kotlin.Nothing? value='null'
                CONST String type=kotlin.String value='def'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR test type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='abcdef'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Failed: test='
              GET_VAR test type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
