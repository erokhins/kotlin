MODULE <test-module>
  FILE /emptyFor.kt
    PROPERTY public var index: kotlin.Int
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='0'
    CLASS INTERFACE IterableIterator
      FUN public open operator fun iterator(): kotlin.collections.Iterator<kotlin.Int>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=iterator
            THIS public interface IterableIterator : kotlin.collections.Iterator<kotlin.Int> type=IterableIterator
    PROPERTY public val iterator: IterableIterator
      EXPRESSION_BODY
        BLOCK type=iterator.<no name provided> operator=OBJECT_LITERAL
          CLASS CLASS <no name provided>
            CONSTRUCTOR public constructor <no name provided>()
              BLOCK_BODY
                DELEGATING_CONSTRUCTOR_CALL Any
                INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
            FUN public open override /*1*/ fun hasNext(): kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=hasNext
                  CALL .LT0 type=kotlin.Boolean operator=LT
                    arg0: CALL .compareTo type=kotlin.Int operator=LT
                      $this: CALL .<get-index> type=kotlin.Int operator=GET_PROPERTY
                      other: CONST Int type=kotlin.Int value='5'
            FUN public open override /*1*/ fun next(): kotlin.Int
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=next
                  BLOCK type=kotlin.Int operator=POSTFIX_INCR
                    BLOCK type=kotlin.Int operator=POSTFIX_INCR
                      VAR val tmp0: kotlin.Int
                        CALL .<get-index> type=kotlin.Int operator=POSTFIX_INCR
                      CALL .<set-index> type=kotlin.Unit operator=POSTFIX_INCR
                        <set-?>: CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                          $this: GET_VAR tmp0 type=kotlin.Int operator=null
                      GET_VAR tmp0 type=kotlin.Int operator=null
          CALL .<init> type=iterator.<no name provided> operator=OBJECT_LITERAL
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='1'
                other: CONST Int type=kotlin.Int value='5'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val x: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp1_iterator: kotlin.collections.Iterator<kotlin.Int>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.Int> operator=FOR_LOOP_ITERATOR
              $this: CALL .<get-iterator> type=IterableIterator operator=GET_PROPERTY
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp1_iterator type=kotlin.collections.Iterator<kotlin.Int> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val x: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp1_iterator type=kotlin.collections.Iterator<kotlin.Int> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-index> type=kotlin.Int operator=GET_PROPERTY
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail: '
              CALL .<get-index> type=kotlin.Int operator=GET_PROPERTY
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
