MODULE <test-module>
  FILE /kt237.kt
    FUN public fun main(/*0*/ args: kotlin.Array<kotlin.String>?): kotlin.Unit
      BLOCK_BODY
        VAR val y: kotlin.Unit
          GET_OBJECT Unit type=kotlin.Unit
        CALL .<init> type=A<kotlin.Unit> operator=null
        CALL .<init> type=C<kotlin.Unit> operator=null
          value: GET_OBJECT Unit type=kotlin.Unit
        BLOCK type=kotlin.Unit? operator=SAFE_CALL
          VAR val tmp0_safe_receiver: java.io.PrintStream!
            GET_BACKING_FIELD out type=java.io.PrintStream! operator=GET_PROPERTY
          WHEN type=kotlin.Unit? operator=SAFE_CALL
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_safe_receiver type=java.io.PrintStream! operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CONST Null type=kotlin.Nothing? value='null'
            else: CALL .println type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.io.PrintStream
                GET_VAR tmp0_safe_receiver type=java.io.PrintStream! operator=null
              p0: CALL .fff type=kotlin.Unit operator=null
                x: GET_OBJECT Unit type=kotlin.Unit
        BLOCK type=kotlin.Unit? operator=SAFE_CALL
          VAR val tmp1_safe_receiver: java.io.PrintStream!
            GET_BACKING_FIELD out type=java.io.PrintStream! operator=GET_PROPERTY
          WHEN type=kotlin.Unit? operator=SAFE_CALL
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp1_safe_receiver type=java.io.PrintStream! operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CONST Null type=kotlin.Nothing? value='null'
            else: CALL .println type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.io.PrintStream
                GET_VAR tmp1_safe_receiver type=java.io.PrintStream! operator=null
              p0: CALL .id type=kotlin.Unit operator=null
                value: GET_VAR y type=kotlin.Unit operator=null
        BLOCK type=kotlin.Unit? operator=SAFE_CALL
          VAR val tmp2_safe_receiver: java.io.PrintStream!
            GET_BACKING_FIELD out type=java.io.PrintStream! operator=GET_PROPERTY
          WHEN type=kotlin.Unit? operator=SAFE_CALL
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp2_safe_receiver type=java.io.PrintStream! operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CONST Null type=kotlin.Nothing? value='null'
            else: CALL .println type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.io.PrintStream
                GET_VAR tmp2_safe_receiver type=java.io.PrintStream! operator=null
              p0: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: CALL .fff type=kotlin.Unit operator=null
                  x: CALL .id type=kotlin.Unit operator=null
                    value: GET_VAR y type=kotlin.Unit operator=null
                arg1: CALL .id type=kotlin.Unit operator=null
                  value: CALL .foreach type=kotlin.Unit operator=null
                    array: TYPE_OP operator=CAST typeOperand=kotlin.Array<kotlin.Int>
                      CALL .arrayOfNulls type=kotlin.Array<kotlin.Int?> operator=null
                        size: CONST Int type=kotlin.Int value='0'
                    action: BLOCK type=(kotlin.Int) -> kotlin.Unit operator=LAMBDA
                      FUN local final fun <anonymous>(/*0*/ e: kotlin.Int): kotlin.Unit
                        BLOCK_BODY
                          RETURN type=kotlin.Nothing from=<anonymous>
                      CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Unit operator=LAMBDA
    CLASS CLASS A
      CONSTRUCTOR public constructor A</*0*/ T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
    CLASS CLASS C
      CONSTRUCTOR public constructor C</*0*/ T>(/*0*/ value: T)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD value type=kotlin.Unit operator=null
            receiver: THIS public final class C</*0*/ T> type=C<T>
            value: GET_VAR value type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      PROPERTY public final val value: T
        EXPRESSION_BODY
          GET_VAR value type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public final fun foo(): T
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CALL .<get-value> type=T operator=GET_PROPERTY
              $this: THIS public final class C</*0*/ T> type=C<T>
    FUN public fun </*0*/ T> fff(/*0*/ x: T): T
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=fff
          GET_VAR x type=T operator=null
    FUN public fun </*0*/ T> id(/*0*/ value: T): T
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=id
          GET_VAR value type=T operator=null
    FUN public fun foreach(/*0*/ array: kotlin.Array<kotlin.Int>, /*1*/ action: (kotlin.Int) -> kotlin.Unit): kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.Int>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.Int> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR array type=kotlin.Array<kotlin.Int> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.Int> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val el: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.Int> operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL .invoke type=kotlin.Unit operator=INVOKE
                  $this: GET_VAR action type=(kotlin.Int) -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
                  p1: GET_VAR el type=kotlin.Int operator=null
    FUN public fun almostFilter(/*0*/ array: kotlin.Array<kotlin.Int>, /*1*/ action: (kotlin.Int) -> kotlin.Int): kotlin.Unit
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.Int>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.Int> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR array type=kotlin.Array<kotlin.Int> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.Int> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val el: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.Int> operator=null
              BLOCK type=kotlin.Int operator=null
                CALL .invoke type=kotlin.Int operator=INVOKE
                  $this: GET_VAR action type=(kotlin.Int) -> kotlin.Int operator=VARIABLE_AS_FUNCTION
                  p1: GET_VAR el type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: kotlin.Array<kotlin.Int>
          TYPE_OP operator=CAST typeOperand=kotlin.Array<kotlin.Int>
            CALL .arrayOfNulls type=kotlin.Array<kotlin.Int?> operator=null
              size: CONST Int type=kotlin.Int value='3'
        CALL .set type=kotlin.Unit operator=EQ
          $this: GET_VAR a type=kotlin.Array<kotlin.Int> operator=null
          index: CONST Int type=kotlin.Int value='0'
          value: CONST Int type=kotlin.Int value='0'
        CALL .set type=kotlin.Unit operator=EQ
          $this: GET_VAR a type=kotlin.Array<kotlin.Int> operator=null
          index: CONST Int type=kotlin.Int value='1'
          value: CONST Int type=kotlin.Int value='1'
        CALL .set type=kotlin.Unit operator=EQ
          $this: GET_VAR a type=kotlin.Array<kotlin.Int> operator=null
          index: CONST Int type=kotlin.Int value='2'
          value: CONST Int type=kotlin.Int value='2'
        CALL .foreach type=kotlin.Unit operator=null
          array: GET_VAR a type=kotlin.Array<kotlin.Int> operator=null
          action: BLOCK type=(kotlin.Int) -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(/*0*/ el: kotlin.Int): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  BLOCK type=kotlin.Unit? operator=SAFE_CALL
                    VAR val tmp0_safe_receiver: java.io.PrintStream!
                      GET_BACKING_FIELD out type=java.io.PrintStream! operator=GET_PROPERTY
                    WHEN type=kotlin.Unit? operator=SAFE_CALL
                      if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: GET_VAR tmp0_safe_receiver type=java.io.PrintStream! operator=null
                        arg1: CONST Null type=kotlin.Nothing? value='null'
                      then: CONST Null type=kotlin.Nothing? value='null'
                      else: CALL .println type=kotlin.Unit operator=null
                        $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.io.PrintStream
                          GET_VAR tmp0_safe_receiver type=java.io.PrintStream! operator=null
                        p0: GET_VAR el type=kotlin.Int operator=null
            CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Unit operator=LAMBDA
        CALL .almostFilter type=kotlin.Unit operator=null
          array: GET_VAR a type=kotlin.Array<kotlin.Int> operator=null
          action: BLOCK type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
            FUN local final fun <anonymous>(/*0*/ el: kotlin.Int): kotlin.Int
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  GET_VAR el type=kotlin.Int operator=null
            CALLABLE_REFERENCE <anonymous> type=(kotlin.Int) -> kotlin.Int operator=LAMBDA
        CALL .main type=kotlin.Unit operator=null
          args: CONST Null type=kotlin.Nothing? value='null'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
