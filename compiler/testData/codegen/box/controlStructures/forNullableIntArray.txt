MODULE <test-module>
  FILE /forNullableIntArray.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val b: kotlin.Array<kotlin.Int?>
          CALL .arrayOfNulls type=kotlin.Array<kotlin.Int?> operator=null
            size: CONST Int type=kotlin.Int value='5'
        VAR var i: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        VAR var sum: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        WHILE label=null operator=WHILE_LOOP
          condition: CALL .LT0 type=kotlin.Boolean operator=LT
            arg0: CALL .compareTo type=kotlin.Int operator=LT
              $this: GET_VAR i type=kotlin.Int operator=null
              other: CONST Int type=kotlin.Int value='5'
          body: BLOCK type=kotlin.Unit operator=null
            CALL .set type=kotlin.Unit operator=EQ
              $this: GET_VAR b type=kotlin.Array<kotlin.Int?> operator=null
              index: GET_VAR i type=kotlin.Int operator=null
              value: BLOCK type=kotlin.Int operator=POSTFIX_INCR
                VAR val tmp0: kotlin.Int
                  GET_VAR i type=kotlin.Int operator=POSTFIX_INCR
                SET_VAR i type=kotlin.Unit operator=POSTFIX_INCR
                  CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                    $this: GET_VAR tmp0 type=kotlin.Int operator=null
                GET_VAR tmp0 type=kotlin.Int operator=null
        SET_VAR sum type=kotlin.Unit operator=EQ
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp1_iterator: kotlin.collections.Iterator<kotlin.Int?>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.Int?> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR b type=kotlin.Array<kotlin.Int?> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp1_iterator type=kotlin.collections.Iterator<kotlin.Int?> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val el: kotlin.Int?
                CALL .next type=kotlin.Int? operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp1_iterator type=kotlin.collections.Iterator<kotlin.Int?> operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR sum type=kotlin.Unit operator=EQ
                  CALL .plus type=kotlin.Int operator=PLUS
                    $this: GET_VAR sum type=kotlin.Int operator=null
                    other: BLOCK type=kotlin.Int operator=ELVIS
                      VAR val tmp2_elvis_lhs: kotlin.Int?
                        GET_VAR el type=kotlin.Int? operator=null
                      WHEN type=kotlin.Int operator=null
                        if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                          arg0: GET_VAR tmp2_elvis_lhs type=kotlin.Int? operator=null
                          arg1: CONST Null type=kotlin.Nothing? value='null'
                        then: CONST Int type=kotlin.Int value='0'
                        else: GET_VAR tmp2_elvis_lhs type=kotlin.Int? operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR sum type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='10'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='b failed'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
