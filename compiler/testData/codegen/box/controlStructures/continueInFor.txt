MODULE <test-module>
  FILE /continueInFor.kt
    FUN public fun for_int_range(): kotlin.Int
      BLOCK_BODY
        VAR var c: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='1'
                other: CONST Int type=kotlin.Int value='10'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
                    arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                      $this: GET_VAR c type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='5'
                  then: CONTINUE label=null loop.label=null depth=0
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp1: kotlin.Int
                    GET_VAR c type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR c type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=for_int_range
          GET_VAR c type=kotlin.Int operator=null
    FUN public fun for_byte_range(): kotlin.Int
      BLOCK_BODY
        VAR var c: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        VAR val from: kotlin.Byte = 1.toByte()
          CONST Byte type=kotlin.Byte value='1'
        VAR val to: kotlin.Byte = 10.toByte()
          CONST Byte type=kotlin.Byte value='10'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: GET_VAR from type=kotlin.Byte operator=null
                other: GET_VAR to type=kotlin.Byte operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
                    arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                      $this: GET_VAR c type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='5'
                  then: CONTINUE label=null loop.label=null depth=0
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp1: kotlin.Int
                    GET_VAR c type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR c type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=for_byte_range
          GET_VAR c type=kotlin.Int operator=null
    FUN public fun for_long_range(): kotlin.Int
      BLOCK_BODY
        VAR var c: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        VAR val from: kotlin.Long = 1.toLong()
          CONST Long type=kotlin.Long value='1'
        VAR val to: kotlin.Long = 10.toLong()
          CONST Long type=kotlin.Long value='10'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.LongIterator
            CALL .iterator type=kotlin.collections.LongIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.LongRange operator=RANGE
                $this: GET_VAR from type=kotlin.Long operator=null
                other: GET_VAR to type=kotlin.Long operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.LongIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Long
                CALL .next type=kotlin.Long operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.LongIterator operator=null
              BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
                    arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                      $this: GET_VAR c type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='5'
                  then: CONTINUE label=null loop.label=null depth=0
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp1: kotlin.Int
                    GET_VAR c type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR c type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=for_long_range
          GET_VAR c type=kotlin.Int operator=null
    FUN public fun for_int_list(): kotlin.Int
      BLOCK_BODY
        VAR val a: java.util.ArrayList<kotlin.Int>
          CALL .<init> type=java.util.ArrayList<kotlin.Int> operator=null
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Int> operator=null
          element: CONST Int type=kotlin.Int value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Int> operator=null
          element: CONST Int type=kotlin.Int value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Int> operator=null
          element: CONST Int type=kotlin.Int value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Int> operator=null
          element: CONST Int type=kotlin.Int value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Int> operator=null
          element: CONST Int type=kotlin.Int value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Int> operator=null
          element: CONST Int type=kotlin.Int value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Int> operator=null
          element: CONST Int type=kotlin.Int value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Int> operator=null
          element: CONST Int type=kotlin.Int value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Int> operator=null
          element: CONST Int type=kotlin.Int value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Int> operator=null
          element: CONST Int type=kotlin.Int value='0'
        VAR var c: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.MutableIterator<kotlin.Int>
            CALL .iterator type=kotlin.collections.MutableIterator<kotlin.Int> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR a type=java.util.ArrayList<kotlin.Int> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<kotlin.Int> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<kotlin.Int> operator=null
              BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
                    arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                      $this: GET_VAR c type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='5'
                  then: CONTINUE label=null loop.label=null depth=0
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp1: kotlin.Int
                    GET_VAR c type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR c type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=for_int_list
          GET_VAR c type=kotlin.Int operator=null
    FUN public fun for_byte_list(): kotlin.Int
      BLOCK_BODY
        VAR val a: java.util.ArrayList<kotlin.Byte>
          CALL .<init> type=java.util.ArrayList<kotlin.Byte> operator=null
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Byte> operator=null
          element: CONST Byte type=kotlin.Byte value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Byte> operator=null
          element: CONST Byte type=kotlin.Byte value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Byte> operator=null
          element: CONST Byte type=kotlin.Byte value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Byte> operator=null
          element: CONST Byte type=kotlin.Byte value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Byte> operator=null
          element: CONST Byte type=kotlin.Byte value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Byte> operator=null
          element: CONST Byte type=kotlin.Byte value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Byte> operator=null
          element: CONST Byte type=kotlin.Byte value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Byte> operator=null
          element: CONST Byte type=kotlin.Byte value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Byte> operator=null
          element: CONST Byte type=kotlin.Byte value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Byte> operator=null
          element: CONST Byte type=kotlin.Byte value='0'
        VAR var c: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.MutableIterator<kotlin.Byte>
            CALL .iterator type=kotlin.collections.MutableIterator<kotlin.Byte> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR a type=java.util.ArrayList<kotlin.Byte> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<kotlin.Byte> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Byte
                CALL .next type=kotlin.Byte operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<kotlin.Byte> operator=null
              BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
                    arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                      $this: GET_VAR c type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='5'
                  then: CONTINUE label=null loop.label=null depth=0
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp1: kotlin.Int
                    GET_VAR c type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR c type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=for_byte_list
          GET_VAR c type=kotlin.Int operator=null
    FUN public fun for_long_list(): kotlin.Int
      BLOCK_BODY
        VAR val a: java.util.ArrayList<kotlin.Long>
          CALL .<init> type=java.util.ArrayList<kotlin.Long> operator=null
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Long> operator=null
          element: CONST Long type=kotlin.Long value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Long> operator=null
          element: CONST Long type=kotlin.Long value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Long> operator=null
          element: CONST Long type=kotlin.Long value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Long> operator=null
          element: CONST Long type=kotlin.Long value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Long> operator=null
          element: CONST Long type=kotlin.Long value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Long> operator=null
          element: CONST Long type=kotlin.Long value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Long> operator=null
          element: CONST Long type=kotlin.Long value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Long> operator=null
          element: CONST Long type=kotlin.Long value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Long> operator=null
          element: CONST Long type=kotlin.Long value='0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Long> operator=null
          element: CONST Long type=kotlin.Long value='0'
        VAR var c: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.MutableIterator<kotlin.Long>
            CALL .iterator type=kotlin.collections.MutableIterator<kotlin.Long> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR a type=java.util.ArrayList<kotlin.Long> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<kotlin.Long> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Long
                CALL .next type=kotlin.Long operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<kotlin.Long> operator=null
              BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
                    arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                      $this: GET_VAR c type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='5'
                  then: CONTINUE label=null loop.label=null depth=0
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp1: kotlin.Int
                    GET_VAR c type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR c type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=for_long_list
          GET_VAR c type=kotlin.Int operator=null
    FUN public fun for_double_list(): kotlin.Int
      BLOCK_BODY
        VAR val a: java.util.ArrayList<kotlin.Double>
          CALL .<init> type=java.util.ArrayList<kotlin.Double> operator=null
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Double> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Double> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Double> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Double> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Double> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Double> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Double> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Double> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Double> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Double> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        VAR var c: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.MutableIterator<kotlin.Double>
            CALL .iterator type=kotlin.collections.MutableIterator<kotlin.Double> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR a type=java.util.ArrayList<kotlin.Double> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<kotlin.Double> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Double
                CALL .next type=kotlin.Double operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<kotlin.Double> operator=null
              BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
                    arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                      $this: GET_VAR c type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='5'
                  then: CONTINUE label=null loop.label=null depth=0
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp1: kotlin.Int
                    GET_VAR c type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR c type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=for_double_list
          GET_VAR c type=kotlin.Int operator=null
    FUN public fun for_object_list(): kotlin.Int
      BLOCK_BODY
        VAR val a: java.util.ArrayList<kotlin.Any>
          CALL .<init> type=java.util.ArrayList<kotlin.Any> operator=null
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Any> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Any> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Any> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Any> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Any> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Any> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Any> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Any> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Any> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        CALL .add type=kotlin.Boolean operator=null
          $this: GET_VAR a type=java.util.ArrayList<kotlin.Any> operator=null
          element: CONST Double type=kotlin.Double value='0.0'
        VAR var c: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.MutableIterator<kotlin.Any>
            CALL .iterator type=kotlin.collections.MutableIterator<kotlin.Any> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR a type=java.util.ArrayList<kotlin.Any> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<kotlin.Any> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Any
                CALL .next type=kotlin.Any operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.MutableIterator<kotlin.Any> operator=null
              BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
                    arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                      $this: GET_VAR c type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='5'
                  then: CONTINUE label=null loop.label=null depth=0
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp1: kotlin.Int
                    GET_VAR c type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR c type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=for_object_list
          GET_VAR c type=kotlin.Int operator=null
    FUN public fun for_str_array(): kotlin.Int
      BLOCK_BODY
        VAR val a: kotlin.Array<kotlin.String?>
          CALL .arrayOfNulls type=kotlin.Array<kotlin.String?> operator=null
            size: CONST Int type=kotlin.Int value='10'
        VAR var c: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<kotlin.String?>
            CALL .iterator type=kotlin.collections.Iterator<kotlin.String?> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR a type=kotlin.Array<kotlin.String?> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String?> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.String?
                CALL .next type=kotlin.String? operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<kotlin.String?> operator=null
              BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
                    arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                      $this: GET_VAR c type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='5'
                  then: CONTINUE label=null loop.label=null depth=0
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp1: kotlin.Int
                    GET_VAR c type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR c type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=for_str_array
          GET_VAR c type=kotlin.Int operator=null
    FUN public fun for_intarray(): kotlin.Int
      BLOCK_BODY
        VAR val a: kotlin.IntArray
          CALL .<init> type=kotlin.IntArray operator=null
            size: CONST Int type=kotlin.Int value='10'
        VAR var c: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR a type=kotlin.IntArray operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .GTEQ0 type=kotlin.Boolean operator=GTEQ
                    arg0: CALL .compareTo type=kotlin.Int operator=GTEQ
                      $this: GET_VAR c type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='5'
                  then: CONTINUE label=null loop.label=null depth=0
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp1: kotlin.Int
                    GET_VAR c type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR c type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=for_intarray
          GET_VAR c type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .for_int_range type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .for_byte_range type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .for_long_range type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .for_intarray type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 4'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .for_str_array type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 5'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .for_int_list type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 6'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .for_byte_list type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 7'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .for_long_list type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 8'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .for_double_list type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='5'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 9'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
