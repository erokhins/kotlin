MODULE <test-module>
  FILE /doWhileWithContinue.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var i: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        DO_WHILE label=null operator=DO_WHILE_LOOP
          body: BLOCK type=kotlin.Unit operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL .GT0 type=kotlin.Boolean operator=GT
                arg0: CALL .compareTo type=kotlin.Int operator=GT
                  $this: BLOCK type=kotlin.Int operator=POSTFIX_INCR
                    VAR val tmp0: kotlin.Int
                      GET_VAR i type=kotlin.Int operator=POSTFIX_INCR
                    SET_VAR i type=kotlin.Unit operator=POSTFIX_INCR
                      CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                        $this: GET_VAR tmp0 type=kotlin.Int operator=null
                    GET_VAR tmp0 type=kotlin.Int operator=null
                  other: CONST Int type=kotlin.Int value='100'
              then: BREAK label=null loop.label=null depth=0
            CONTINUE label=null loop.label=null depth=0
          condition: CONST Boolean type=kotlin.Boolean value='false'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR i type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 1, expected 1, but '
              GET_VAR i type=kotlin.Int operator=null
        SET_VAR i type=kotlin.Unit operator=EQ
          CONST Int type=kotlin.Int value='0'
        DO_WHILE label=null operator=DO_WHILE_LOOP
          body: BLOCK type=kotlin.Unit operator=null
            WHEN type=kotlin.Unit operator=IF
              if: CALL .GT0 type=kotlin.Boolean operator=GT
                arg0: CALL .compareTo type=kotlin.Int operator=GT
                  $this: BLOCK type=kotlin.Int operator=POSTFIX_INCR
                    VAR val tmp1: kotlin.Int
                      GET_VAR i type=kotlin.Int operator=POSTFIX_INCR
                    SET_VAR i type=kotlin.Unit operator=POSTFIX_INCR
                      CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                        $this: GET_VAR tmp1 type=kotlin.Int operator=null
                    GET_VAR tmp1 type=kotlin.Int operator=null
                  other: CONST Int type=kotlin.Int value='100'
              then: BREAK label=null loop.label=null depth=0
            CONTINUE label=null loop.label=null depth=0
          condition: CALL .LT0 type=kotlin.Boolean operator=LT
            arg0: CALL .compareTo type=kotlin.Int operator=LT
              $this: GET_VAR i type=kotlin.Int operator=null
              other: CONST Int type=kotlin.Int value='10'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR i type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='10'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 2, expected 10, but '
              GET_VAR i type=kotlin.Int operator=null
        SET_VAR i type=kotlin.Unit operator=EQ
          CONST Int type=kotlin.Int value='0'
        DO_WHILE label=null operator=DO_WHILE_LOOP
          body: CONTINUE label=null loop.label=null depth=0
          condition: CALL .LT0 type=kotlin.Boolean operator=LT
            arg0: CALL .compareTo type=kotlin.Int operator=LT
              $this: BLOCK type=kotlin.Int operator=POSTFIX_INCR
                VAR val tmp2: kotlin.Int
                  GET_VAR i type=kotlin.Int operator=POSTFIX_INCR
                SET_VAR i type=kotlin.Unit operator=POSTFIX_INCR
                  CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                    $this: GET_VAR tmp2 type=kotlin.Int operator=null
                GET_VAR tmp2 type=kotlin.Int operator=null
              other: CONST Int type=kotlin.Int value='10'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR i type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='11'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail 3, expected 11, but '
              GET_VAR i type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
