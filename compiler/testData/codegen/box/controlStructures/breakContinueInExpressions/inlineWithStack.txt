MODULE <test-module>
  FILE /inlineWithStack.kt
    FUN public inline fun bar(/*0*/ block: () -> kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=bar
          CALL .invoke type=kotlin.String operator=INVOKE
            $this: GET_VAR block type=() -> kotlin.String operator=VARIABLE_AS_FUNCTION
    FUN public inline fun bar2(): kotlin.String
      BLOCK_BODY
        WHILE label=null operator=WHILE_LOOP
          condition: CONST Boolean type=kotlin.Boolean value='true'
          body: BREAK label=null loop.label=null depth=0
        RETURN type=kotlin.Nothing from=bar2
          CALL .bar type=kotlin.String operator=null
            block: BLOCK type=() -> kotlin.Nothing operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Nothing
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=bar2
                    CONST String type=kotlin.String value='def'
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Nothing operator=LAMBDA
    FUN public fun foobar(/*0*/ x: kotlin.String, /*1*/ y: kotlin.String, /*2*/ z: kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foobar
          CALL .plus type=kotlin.String operator=PLUS
            $this: CALL .plus type=kotlin.String operator=PLUS
              $this: GET_VAR x type=kotlin.String operator=null
              other: GET_VAR y type=kotlin.String operator=null
            other: GET_VAR z type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val test: kotlin.String
          CALL .foobar type=kotlin.String operator=null
            x: CONST String type=kotlin.String value='abc'
            y: CALL .bar2 type=kotlin.String operator=null
            z: CONST String type=kotlin.String value='ghi'
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR test type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='abcdefghi'
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Failed, test='
              GET_VAR test type=kotlin.String operator=null
