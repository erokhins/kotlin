MODULE <test-module>
  FILE /kt513.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      FUN public final infix fun </*0*/ T> java.util.ArrayList<T>.add3(/*0*/ el: T): kotlin.Boolean
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=add3
            CALL .add type=kotlin.Boolean operator=null
              $this: $RECEIVER of: add3 type=java.util.ArrayList<T>
              element: GET_VAR el type=T operator=null
      FUN public final fun test(/*0*/ list: java.util.ArrayList<kotlin.Int>): kotlin.Unit
        BLOCK_BODY
          BLOCK type=kotlin.Unit operator=FOR_LOOP
            VAR val tmp0_iterator: kotlin.collections.IntIterator
              CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
                $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                  $this: CONST Int type=kotlin.Int value='1'
                  other: CONST Int type=kotlin.Int value='10'
            WHILE label=null operator=FOR_LOOP_INNER_WHILE
              condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
                $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
                VAR val i: kotlin.Int
                  CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                    $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
                BLOCK type=kotlin.Boolean operator=null
                  CALL .add3 type=kotlin.Boolean operator=null
                    $this: THIS public final class A type=A
                    $receiver: GET_VAR list type=java.util.ArrayList<kotlin.Int> operator=null
                    el: GET_VAR i type=kotlin.Int operator=null
    FUN public infix fun </*0*/ T> java.util.ArrayList<T>.add2(/*0*/ el: T): kotlin.Boolean
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=add2
          CALL .add type=kotlin.Boolean operator=null
            $this: $RECEIVER of: add2 type=java.util.ArrayList<T>
            element: GET_VAR el type=T operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR var list: java.util.ArrayList<kotlin.Int>
          CALL .<init> type=java.util.ArrayList<kotlin.Int> operator=null
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='1'
                other: CONST Int type=kotlin.Int value='10'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val i: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Boolean operator=null
                CALL .add type=kotlin.Boolean operator=null
                  $this: GET_VAR list type=java.util.ArrayList<kotlin.Int> operator=null
                  element: GET_VAR i type=kotlin.Int operator=null
                CALL .add2 type=kotlin.Boolean operator=null
                  $receiver: GET_VAR list type=java.util.ArrayList<kotlin.Int> operator=null
                  el: GET_VAR i type=kotlin.Int operator=null
        CALL .test type=kotlin.Unit operator=null
          $this: CALL .<init> type=A operator=null
          list: GET_VAR list type=java.util.ArrayList<kotlin.Int> operator=null
        BLOCK type=kotlin.Unit? operator=SAFE_CALL
          VAR val tmp1_safe_receiver: java.io.PrintStream!
            GET_BACKING_FIELD out type=java.io.PrintStream! operator=GET_PROPERTY
          WHEN type=kotlin.Unit? operator=SAFE_CALL
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp1_safe_receiver type=java.io.PrintStream! operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CONST Null type=kotlin.Nothing? value='null'
            else: CALL .println type=kotlin.Unit operator=null
              $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.io.PrintStream
                GET_VAR tmp1_safe_receiver type=java.io.PrintStream! operator=null
              p0: GET_VAR list type=java.util.ArrayList<kotlin.Int> operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
