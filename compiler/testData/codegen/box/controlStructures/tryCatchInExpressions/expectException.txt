MODULE <test-module>
  FILE /expectException.kt
    FUN public inline fun fails(/*0*/ block: () -> kotlin.Unit): kotlin.Throwable?
      BLOCK_BODY
        VAR var thrown: kotlin.Throwable?
          CONST Null type=kotlin.Nothing? value='null'
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Unit operator=null
            CALL .invoke type=kotlin.Unit operator=INVOKE
              $this: GET_VAR block type=() -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
          catch e: BLOCK type=kotlin.Unit operator=null
            SET_VAR thrown type=kotlin.Unit operator=EQ
              GET_VAR e type=kotlin.Throwable operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: GET_VAR thrown type=kotlin.Throwable? operator=null
            arg1: CONST Null type=kotlin.Nothing? value='null'
          then: THROW type=kotlin.Nothing
            CALL .<init> type=java.lang.Exception operator=null
              p0: CONST String type=kotlin.String value='Expected an exception to be thrown'
        RETURN type=kotlin.Nothing from=fails
          GET_VAR thrown type=kotlin.Throwable? operator=null
    FUN public inline fun throwIt(/*0*/ msg: kotlin.String): kotlin.Unit
      BLOCK_BODY
        THROW type=kotlin.Nothing
          CALL .<init> type=java.lang.Exception operator=null
            p0: GET_VAR msg type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .fails type=kotlin.Throwable? operator=null
          block: BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .throwIt type=kotlin.Unit operator=null
                    msg: CONST String type=kotlin.String value='oops!'
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
        VAR var x: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        TRY_CATCH type=kotlin.Any?
          try: BLOCK type=kotlin.Throwable? operator=null
            CALL .fails type=kotlin.Throwable? operator=null
              block: BLOCK type=() -> kotlin.Unit operator=LAMBDA
                FUN local final fun <anonymous>(): kotlin.Unit
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      SET_VAR x type=kotlin.Unit operator=EQ
                        CONST Int type=kotlin.Int value='1'
                CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
          catch e: BLOCK type=kotlin.Unit operator=null
            SET_VAR x type=kotlin.Unit operator=EQ
              CONST Int type=kotlin.Int value='2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR x type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='2'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Failed: x=='
              GET_VAR x type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
