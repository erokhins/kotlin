MODULE <test-module>
  FILE /inlineTryExpr.kt
    FUN public inline fun </*0*/ T> tryOrElse(/*0*/ f1: () -> T, /*1*/ f2: () -> T): T
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=tryOrElse
          TRY_CATCH type=T
            try: BLOCK type=T operator=null
              CALL .invoke type=T operator=INVOKE
                $this: GET_VAR f1 type=() -> T operator=VARIABLE_AS_FUNCTION
            catch e: BLOCK type=T operator=null
              CALL .invoke type=T operator=INVOKE
                $this: GET_VAR f2 type=() -> T operator=VARIABLE_AS_FUNCTION
    FUN public fun testIt(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=testIt
          CALL .plus type=kotlin.String operator=PLUS
            $this: CALL .plus type=kotlin.String operator=PLUS
              $this: CONST String type=kotlin.String value='abc'
              other: CALL .tryOrElse type=kotlin.String operator=null
                f1: BLOCK type=() -> kotlin.String operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.String
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                        TRY_CATCH type=kotlin.String
                          try: BLOCK type=kotlin.String operator=null
                            CONST String type=kotlin.String value='def'
                          catch e: BLOCK type=kotlin.String operator=null
                            CONST String type=kotlin.String value='oops!'
                  CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
                f2: BLOCK type=() -> kotlin.String operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.String
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CONST String type=kotlin.String value='hmmm...'
                  CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
            other: CONST String type=kotlin.String value='ghi'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val test: kotlin.String
          CALL .testIt type=kotlin.String operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR test type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='abcdefghi'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Failed, test=='
              GET_VAR test type=kotlin.String operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
