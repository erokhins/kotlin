MODULE <test-module>
  FILE /splitTryCorner2.kt
    FUN public fun shouldReturn11(): kotlin.Int
      BLOCK_BODY
        VAR var x: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        WHILE label=null operator=WHILE_LOOP
          condition: CONST Boolean type=kotlin.Boolean value='true'
          body: BLOCK type=kotlin.Int operator=null
            TRY_CATCH type=kotlin.Int
              try: BLOCK type=kotlin.Int operator=null
                WHEN type=kotlin.Int operator=IF
                  if: CALL .LT0 type=kotlin.Boolean operator=LT
                    arg0: CALL .compareTo type=kotlin.Int operator=LT
                      $this: GET_VAR x type=kotlin.Int operator=null
                      other: CONST Int type=kotlin.Int value='10'
                  then: BLOCK type=kotlin.Int operator=POSTFIX_INCR
                    VAR val tmp0: kotlin.Int
                      GET_VAR x type=kotlin.Int operator=POSTFIX_INCR
                    SET_VAR x type=kotlin.Unit operator=POSTFIX_INCR
                      CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                        $this: GET_VAR tmp0 type=kotlin.Int operator=null
                    GET_VAR tmp0 type=kotlin.Int operator=null
                  else: BREAK label=null loop.label=null depth=0
              finally: BLOCK type=kotlin.Int operator=null
                BLOCK type=kotlin.Int operator=POSTFIX_INCR
                  VAR val tmp1: kotlin.Int
                    GET_VAR x type=kotlin.Int operator=POSTFIX_INCR
                  SET_VAR x type=kotlin.Unit operator=POSTFIX_INCR
                    CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                      $this: GET_VAR tmp1 type=kotlin.Int operator=null
                  GET_VAR tmp1 type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=shouldReturn11
          GET_VAR x type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val test: kotlin.Int
          CALL .shouldReturn11 type=kotlin.Int operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR test type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='11'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Failed, test='
              GET_VAR test type=kotlin.Int operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
