MODULE <test-module>
  FILE /unmatchedInlineMarkers.kt
    FUN public inline fun catchAll(/*0*/ x: kotlin.String, /*1*/ block: () -> kotlin.Unit): kotlin.String
      BLOCK_BODY
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Unit operator=null
            CALL .invoke type=kotlin.Unit operator=INVOKE
              $this: GET_VAR block type=() -> kotlin.Unit operator=VARIABLE_AS_FUNCTION
          catch e: BLOCK type=kotlin.Unit operator=null
        RETURN type=kotlin.Nothing from=catchAll
          GET_VAR x type=kotlin.String operator=null
    FUN public inline fun throwIt(/*0*/ msg: kotlin.String): kotlin.Unit
      BLOCK_BODY
        THROW type=kotlin.Nothing
          CALL .<init> type=java.lang.Exception operator=null
            p0: GET_VAR msg type=kotlin.String operator=null
    FUN public inline fun bar(/*0*/ x: kotlin.String): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=bar
          CALL .plus type=kotlin.String operator=PLUS
            $this: GET_VAR x type=kotlin.String operator=null
            other: CALL .catchAll type=kotlin.String operator=null
              x: CONST String type=kotlin.String value=''
              block: BLOCK type=() -> kotlin.Unit operator=LAMBDA
                FUN local final fun <anonymous>(): kotlin.Unit
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .throwIt type=kotlin.Unit operator=null
                        msg: CONST String type=kotlin.String value='oops!'
                CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          CALL .bar type=kotlin.String operator=null
            x: CONST String type=kotlin.String value='OK'
