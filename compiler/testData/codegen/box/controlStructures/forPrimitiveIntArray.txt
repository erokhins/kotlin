MODULE <test-module>
  FILE /forPrimitiveIntArray.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: kotlin.IntArray
          CALL .<init> type=kotlin.IntArray operator=null
            size: CONST Int type=kotlin.Int value='5'
        VAR var i: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        VAR var sum: kotlin.Int
          CONST Int type=kotlin.Int value='0'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='0'
                other: CONST Int type=kotlin.Int value='4'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val el: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                CALL .set type=kotlin.Unit operator=EQ
                  $this: GET_VAR a type=kotlin.IntArray operator=null
                  index: GET_VAR i type=kotlin.Int operator=null
                  value: BLOCK type=kotlin.Int operator=POSTFIX_INCR
                    VAR val tmp1: kotlin.Int
                      GET_VAR i type=kotlin.Int operator=POSTFIX_INCR
                    SET_VAR i type=kotlin.Unit operator=POSTFIX_INCR
                      CALL .inc type=kotlin.Int operator=POSTFIX_INCR
                        $this: GET_VAR tmp1 type=kotlin.Int operator=null
                    GET_VAR tmp1 type=kotlin.Int operator=null
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp2_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: GET_VAR a type=kotlin.IntArray operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp2_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val el: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp2_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                SET_VAR sum type=kotlin.Unit operator=EQ
                  CALL .plus type=kotlin.Int operator=PLUS
                    $this: GET_VAR sum type=kotlin.Int operator=null
                    other: GET_VAR el type=kotlin.Int operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR sum type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='10'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='a failed'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
