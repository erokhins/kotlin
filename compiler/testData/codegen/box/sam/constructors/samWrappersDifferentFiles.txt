MODULE <test-module>
  FILE /1/wrapped.kt
    FUN public fun getWrapped1(): java.lang.Runnable
      BLOCK_BODY
        VAR val f: () -> kotlin.Unit
          BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from=getWrapped1
          CALL .Runnable type=java.lang.Runnable operator=null
            function: GET_VAR f type=() -> kotlin.Unit operator=null
  FILE /2/wrapped2.kt
    FUN public fun getWrapped2(): java.lang.Runnable
      BLOCK_BODY
        VAR val f: () -> kotlin.Unit
          BLOCK type=() -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from=getWrapped2
          CALL .Runnable type=java.lang.Runnable operator=null
            function: GET_VAR f type=() -> kotlin.Unit operator=null
  FILE /box.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val class1: java.lang.Class<java.lang.Runnable>
          CALL .<get-javaClass> type=java.lang.Class<java.lang.Runnable> operator=GET_PROPERTY
            $receiver: CALL .getWrapped1 type=java.lang.Runnable operator=null
        VAR val class2: java.lang.Class<java.lang.Runnable>
          CALL .<get-javaClass> type=java.lang.Class<java.lang.Runnable> operator=GET_PROPERTY
            $receiver: CALL .getWrapped2 type=java.lang.Runnable operator=null
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                arg0: GET_VAR class1 type=java.lang.Class<java.lang.Runnable> operator=null
                arg1: GET_VAR class2 type=java.lang.Class<java.lang.Runnable> operator=null
            then: CONST String type=kotlin.String value='OK'
            else: STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Same class: '
              GET_VAR class1 type=java.lang.Class<java.lang.Runnable> operator=null
