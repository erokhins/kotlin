MODULE <test-module>
  FILE /capturePackageFields.kt
    PROPERTY @kotlin.jvm.JvmField() public val publicField: kotlin.String = "1"
      EXPRESSION_BODY
        CONST String type=kotlin.String value='1'
    PROPERTY @kotlin.jvm.JvmField() internal val internalField: kotlin.String = "23"
      EXPRESSION_BODY
        CONST String type=kotlin.String value='23'
    FUN public fun test(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=test
          CALL .invoke type=kotlin.String operator=null
            $this: BLOCK type=() -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .plus type=kotlin.String operator=PLUS
                      $this: CALL .<get-publicField> type=kotlin.String operator=GET_PROPERTY
                      other: CALL .<get-internalField> type=kotlin.String operator=GET_PROPERTY
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .test type=kotlin.String operator=null
              arg1: CONST String type=kotlin.String value='123'
            then: RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
