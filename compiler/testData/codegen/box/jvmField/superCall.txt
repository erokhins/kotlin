MODULE <test-module>
  FILE /superCall.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY @kotlin.jvm.JvmField() public final val publicField: kotlin.String = "1"
        EXPRESSION_BODY
          CONST String type=kotlin.String value='1'
      PROPERTY @kotlin.jvm.JvmField() internal final val internalField: kotlin.String = "2"
        EXPRESSION_BODY
          CONST String type=kotlin.String value='2'
      PROPERTY @kotlin.jvm.JvmField() protected final val protectedfield: kotlin.String = "3"
        EXPRESSION_BODY
          CONST String type=kotlin.String value='3'
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL A
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      FUN public final fun test(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=test
            CALL .plus type=kotlin.String operator=PLUS
              $this: CALL .plus type=kotlin.String operator=PLUS
                $this: CALL .<get-publicField> superQualifier=A type=kotlin.String operator=GET_PROPERTY
                  $this: THIS public final class B : A type=A
                other: CALL .<get-internalField> superQualifier=A type=kotlin.String operator=GET_PROPERTY
                  $this: THIS public final class B : A type=A
              other: CALL .<get-protectedfield> superQualifier=A type=kotlin.String operator=GET_PROPERTY
                $this: THIS public final class B : A type=A
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: CALL .test type=kotlin.String operator=null
                $this: CALL .<init> type=B operator=null
              arg1: CONST String type=kotlin.String value='123'
            then: RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='OK'
            else: CONST String type=kotlin.String value='fail'
