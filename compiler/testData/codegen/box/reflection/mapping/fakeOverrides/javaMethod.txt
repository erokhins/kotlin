MODULE <test-module>
  FILE /javaMethod.kt
    CLASS CLASS TestBase
      CONSTRUCTOR public constructor TestBase()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=TestBase
      FUN public final fun id(): kotlin.Long
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=id
            CONST Long type=kotlin.Long value='0'
    CLASS CLASS TestChild
      CONSTRUCTOR public constructor TestChild()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL TestBase
          INSTANCE_INITIALIZER_CALL classDescriptor=TestChild
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .<get-javaMethod> type=java.lang.reflect.Method? operator=GET_PROPERTY
              $receiver: CALL .first type=kotlin.reflect.KFunction<*> operator=null
                $receiver: CALL .<get-memberFunctions> type=kotlin.collections.Collection<kotlin.reflect.KFunction<*>> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE TestChild type=kotlin.reflect.KClass<TestChild>
                predicate: BLOCK type=(kotlin.reflect.KFunction<*>) -> kotlin.Boolean operator=LAMBDA
                  FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KFunction<*>): kotlin.Boolean
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                        CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                          arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                            $this: GET_VAR it type=kotlin.reflect.KFunction<*> operator=null
                          arg1: CONST String type=kotlin.String value='id'
                  CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KFunction<*>) -> kotlin.Boolean operator=LAMBDA
            arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='No method for TestChild.id()'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
