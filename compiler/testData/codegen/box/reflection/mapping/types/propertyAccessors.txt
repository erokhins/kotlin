MODULE <test-module>
  FILE /propertyAccessors.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ foo: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD foo type=kotlin.Unit operator=null
            receiver: THIS public final class A type=A
            value: GET_VAR foo type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY private final var foo: kotlin.String
        EXPRESSION_BODY
          GET_VAR foo type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS OBJECT O
      CONSTRUCTOR private constructor O()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=O
      PROPERTY @kotlin.jvm.JvmStatic() private final var bar: kotlin.String
        EXPRESSION_BODY
          CONST String type=kotlin.String value=''
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val foo: kotlin.reflect.KMutableProperty<*>
          TYPE_OP operator=CAST typeOperand=kotlin.reflect.KMutableProperty<*>
            CALL .single type=kotlin.reflect.KCallable<*> operator=null
              $receiver: CALL .<get-members> type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
                $this: CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
              predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                          $this: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
                        arg1: CONST String type=kotlin.String value='foo'
                CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<java.lang.Class<A>> operator=null
            element: CALL .<get-java> type=java.lang.Class<A> operator=GET_PROPERTY
              $receiver: CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
          actual: CALL .map type=kotlin.collections.List<java.lang.reflect.Type> operator=null
            $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: GET_VAR foo type=kotlin.reflect.KMutableProperty<*> operator=null
            transform: BLOCK type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KParameter): java.lang.reflect.Type
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-javaType> type=java.lang.reflect.Type operator=GET_PROPERTY
                      $receiver: CALL .<get-type> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KParameter operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<java.lang.Class<A>> operator=null
            element: CALL .<get-java> type=java.lang.Class<A> operator=GET_PROPERTY
              $receiver: CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
          actual: CALL .map type=kotlin.collections.List<java.lang.reflect.Type> operator=null
            $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: CALL .<get-getter> type=kotlin.reflect.KProperty.Getter<kotlin.Any?> operator=GET_PROPERTY
                $this: GET_VAR foo type=kotlin.reflect.KMutableProperty<*> operator=null
            transform: BLOCK type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KParameter): java.lang.reflect.Type
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-javaType> type=java.lang.reflect.Type operator=GET_PROPERTY
                      $receiver: CALL .<get-type> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KParameter operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<java.lang.Class<out kotlin.Any>> operator=null
            elements: VARARG type=Array<out Class<out Any>> varargElementType=Class<out Any>
              CALL .<get-java> type=java.lang.Class<A> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
              CALL .<get-java> type=java.lang.Class<kotlin.String> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE String type=kotlin.reflect.KClass<kotlin.String>
          actual: CALL .map type=kotlin.collections.List<java.lang.reflect.Type> operator=null
            $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: CALL .<get-setter> type=kotlin.reflect.KMutableProperty.Setter<out kotlin.Any?> operator=GET_PROPERTY
                $this: GET_VAR foo type=kotlin.reflect.KMutableProperty<*> operator=null
            transform: BLOCK type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KParameter): java.lang.reflect.Type
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-javaType> type=java.lang.reflect.Type operator=GET_PROPERTY
                      $receiver: CALL .<get-type> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KParameter operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
        VAR val bar: kotlin.reflect.KMutableProperty<*>
          TYPE_OP operator=CAST typeOperand=kotlin.reflect.KMutableProperty<*>
            CALL .single type=kotlin.reflect.KCallable<*> operator=null
              $receiver: CALL .<get-members> type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
                $this: CLASS_REFERENCE O type=kotlin.reflect.KClass<O>
              predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                          $this: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
                        arg1: CONST String type=kotlin.String value='bar'
                CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<java.lang.Class<O>> operator=null
            element: CALL .<get-java> type=java.lang.Class<O> operator=GET_PROPERTY
              $receiver: CLASS_REFERENCE O type=kotlin.reflect.KClass<O>
          actual: CALL .map type=kotlin.collections.List<java.lang.reflect.Type> operator=null
            $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: GET_VAR bar type=kotlin.reflect.KMutableProperty<*> operator=null
            transform: BLOCK type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KParameter): java.lang.reflect.Type
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-javaType> type=java.lang.reflect.Type operator=GET_PROPERTY
                      $receiver: CALL .<get-type> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KParameter operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<java.lang.Class<O>> operator=null
            element: CALL .<get-java> type=java.lang.Class<O> operator=GET_PROPERTY
              $receiver: CLASS_REFERENCE O type=kotlin.reflect.KClass<O>
          actual: CALL .map type=kotlin.collections.List<java.lang.reflect.Type> operator=null
            $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: CALL .<get-getter> type=kotlin.reflect.KProperty.Getter<kotlin.Any?> operator=GET_PROPERTY
                $this: GET_VAR bar type=kotlin.reflect.KMutableProperty<*> operator=null
            transform: BLOCK type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KParameter): java.lang.reflect.Type
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-javaType> type=java.lang.reflect.Type operator=GET_PROPERTY
                      $receiver: CALL .<get-type> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KParameter operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<java.lang.Class<out kotlin.Any>> operator=null
            elements: VARARG type=Array<out Class<out Any>> varargElementType=Class<out Any>
              CALL .<get-java> type=java.lang.Class<O> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE O type=kotlin.reflect.KClass<O>
              CALL .<get-java> type=java.lang.Class<kotlin.String> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE String type=kotlin.reflect.KClass<kotlin.String>
          actual: CALL .map type=kotlin.collections.List<java.lang.reflect.Type> operator=null
            $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: CALL .<get-setter> type=kotlin.reflect.KMutableProperty.Setter<out kotlin.Any?> operator=GET_PROPERTY
                $this: GET_VAR bar type=kotlin.reflect.KMutableProperty<*> operator=null
            transform: BLOCK type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KParameter): java.lang.reflect.Type
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-javaType> type=java.lang.reflect.Type operator=GET_PROPERTY
                      $receiver: CALL .<get-type> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KParameter operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KParameter) -> java.lang.reflect.Type operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
