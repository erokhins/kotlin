MODULE <test-module>
  FILE /supertypes.kt
    CLASS CLASS Klass
      CONSTRUCTOR public constructor Klass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Klass
    CLASS INTERFACE Interface
    CLASS INTERFACE Interface2
    CLASS CLASS A
      CONSTRUCTOR public constructor A</*0*/ Z>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Klass
          INSTANCE_INITIALIZER_CALL classDescriptor=A
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Unit operator=DESTRUCTURING_DECLARATION
          VAR val tmp0_container: kotlin.collections.List<java.lang.reflect.Type>
            CALL .map type=kotlin.collections.List<java.lang.reflect.Type> operator=null
              $receiver: CALL .<get-supertypes> type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
                $this: CLASS_REFERENCE A type=kotlin.reflect.KClass<A<*>>
              transform: BLOCK type=(kotlin.reflect.KType) -> java.lang.reflect.Type operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KType): java.lang.reflect.Type
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .<get-javaType> type=java.lang.reflect.Type operator=GET_PROPERTY
                        $receiver: GET_VAR it type=kotlin.reflect.KType operator=null
                CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KType) -> java.lang.reflect.Type operator=LAMBDA
          VAR val i: java.lang.reflect.Type
            CALL .component1 type=java.lang.reflect.Type operator=COMPONENT_N(index=1)
              $receiver: GET_VAR tmp0_container type=kotlin.collections.List<java.lang.reflect.Type> operator=null
          VAR val k: java.lang.reflect.Type
            CALL .component2 type=java.lang.reflect.Type operator=COMPONENT_N(index=2)
              $receiver: GET_VAR tmp0_container type=kotlin.collections.List<java.lang.reflect.Type> operator=null
          VAR val i2: java.lang.reflect.Type
            CALL .component3 type=java.lang.reflect.Type operator=COMPONENT_N(index=3)
              $receiver: GET_VAR tmp0_container type=kotlin.collections.List<java.lang.reflect.Type> operator=null
        BLOCK type=java.lang.reflect.ParameterizedType operator=ELVIS
          VAR val tmp1_elvis_lhs: java.lang.reflect.ParameterizedType?
            TYPE_OP operator=SAFE_CAST typeOperand=java.lang.reflect.ParameterizedType
              GET_VAR i type=java.lang.reflect.Type operator=null
          WHEN type=java.lang.reflect.ParameterizedType operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp1_elvis_lhs type=java.lang.reflect.ParameterizedType? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .fail type=kotlin.Nothing operator=null
              message: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='Not a parameterized type: '
                GET_VAR i type=java.lang.reflect.Type operator=null
            else: GET_VAR tmp1_elvis_lhs type=java.lang.reflect.ParameterizedType? operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .<get-java> type=java.lang.Class<Interface<*, *>> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Interface type=kotlin.reflect.KClass<Interface<*, *>>
          actual: CALL .<get-rawType> type=java.lang.reflect.Type! operator=GET_PROPERTY
            $receiver: TYPE_OP operator=IMPLICIT_CAST typeOperand=java.lang.reflect.ParameterizedType
              GET_VAR i type=java.lang.reflect.Type operator=null
        VAR val args: kotlin.Array<(out) java.lang.reflect.Type!>!
          CALL .<get-actualTypeArguments> type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=GET_PROPERTY
            $receiver: TYPE_OP operator=IMPLICIT_CAST typeOperand=java.lang.reflect.ParameterizedType
              GET_VAR i type=java.lang.reflect.Type operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .<get-java> type=java.lang.Class<kotlin.String> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE String type=kotlin.reflect.KClass<kotlin.String>
          actual: CALL .get type=java.lang.reflect.Type! operator=GET_ARRAY_ELEMENT
            $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.reflect.Type!>
              TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Type!>
                GET_VAR args type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=null
            index: CONST Int type=kotlin.Int value='0'
          message: STRING_CONCATENATION type=kotlin.String
            CONST String type=kotlin.String value='Not String: '
            CALL .get type=java.lang.reflect.Type! operator=GET_ARRAY_ELEMENT
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.reflect.Type!>
                TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Type!>
                  GET_VAR args type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=null
              index: CONST Int type=kotlin.Int value='0'
        CALL .assertTrue type=kotlin.Unit operator=null
          actual: CALL .let type=kotlin.Boolean operator=null
            $receiver: CALL .get type=java.lang.reflect.Type! operator=GET_ARRAY_ELEMENT
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.reflect.Type!>
                TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Type!>
                  GET_VAR args type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=null
              index: CONST Int type=kotlin.Int value='1'
            block: BLOCK type=(java.lang.reflect.Type!) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: java.lang.reflect.Type!): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    WHEN type=kotlin.Boolean operator=ANDAND
                      if: WHEN type=kotlin.Boolean operator=ANDAND
                        if: TYPE_OP operator=INSTANCEOF typeOperand=java.lang.reflect.TypeVariable<*>
                          GET_VAR it type=java.lang.reflect.Type! operator=null
                        then: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                          arg0: CALL .<get-name> type=kotlin.String! operator=GET_PROPERTY
                            $receiver: TYPE_OP operator=IMPLICIT_CAST typeOperand=java.lang.reflect.TypeVariable<*>
                              TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                                GET_VAR it type=java.lang.reflect.Type! operator=null
                          arg1: CONST String type=kotlin.String value='Z'
                        else: CONST Boolean type=kotlin.Boolean value='false'
                      then: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: CALL .<get-genericDeclaration> type=java.lang.reflect.GenericDeclaration! operator=GET_PROPERTY
                          $receiver: TYPE_OP operator=IMPLICIT_CAST typeOperand=java.lang.reflect.TypeVariable<*>
                            TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                              GET_VAR it type=java.lang.reflect.Type! operator=null
                        arg1: CALL .<get-java> type=java.lang.Class<A<*>> operator=GET_PROPERTY
                          $receiver: CLASS_REFERENCE A type=kotlin.reflect.KClass<A<*>>
                      else: CONST Boolean type=kotlin.Boolean value='false'
              CALLABLE_REFERENCE <anonymous> type=(java.lang.reflect.Type!) -> kotlin.Boolean operator=LAMBDA
          message: STRING_CONCATENATION type=kotlin.String
            CONST String type=kotlin.String value='Not Z: '
            CALL .get type=java.lang.reflect.Type! operator=GET_ARRAY_ELEMENT
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.reflect.Type!>
                TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Type!>
                  GET_VAR args type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=null
              index: CONST Int type=kotlin.Int value='1'
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .<get-java> type=java.lang.Class<Klass> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Klass type=kotlin.reflect.KClass<Klass>
          actual: GET_VAR k type=java.lang.reflect.Type operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .<get-java> type=java.lang.Class<Interface2> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Interface2 type=kotlin.reflect.KClass<Interface2>
          actual: GET_VAR i2 type=java.lang.reflect.Type operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
