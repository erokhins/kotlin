MODULE <test-module>
  FILE /simpleSupertypes.kt
    CLASS CLASS Simple
      CONSTRUCTOR public constructor Simple()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Simple
    CLASS CLASS OneClass
      CONSTRUCTOR public constructor OneClass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Simple
          INSTANCE_INITIALIZER_CALL classDescriptor=OneClass
    CLASS INTERFACE Interface
    CLASS INTERFACE Interface2
    CLASS CLASS ClassAndTwoInterfaces
      CONSTRUCTOR public constructor ClassAndTwoInterfaces()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Simple
          INSTANCE_INITIALIZER_CALL classDescriptor=ClassAndTwoInterfaces
    FUN public fun any(): kotlin.Any
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun simple(): Simple
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun interface_(): Interface
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun interface2(): Interface2
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .with type=kotlin.Unit operator=null
          receiver: CLASS_REFERENCE Simple type=kotlin.reflect.KClass<Simple>
          block: BLOCK type=kotlin.reflect.KClass<Simple>.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun kotlin.reflect.KClass<Simple>.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CALL .listOf type=kotlin.collections.List<kotlin.reflect.KType> operator=null
                    element: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                      $this: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
                  actual: CALL .<get-supertypes> type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
                    $this: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<Simple>
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CALL .listOf type=kotlin.collections.List<kotlin.reflect.KClass<kotlin.Any>> operator=null
                    element: CLASS_REFERENCE Any type=kotlin.reflect.KClass<kotlin.Any>
                  actual: CALL .<get-superclasses> type=kotlin.collections.List<kotlin.reflect.KClass<*>> operator=GET_PROPERTY
                    $receiver: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<Simple>
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CALL .setOf type=kotlin.collections.Set<kotlin.reflect.KType> operator=null
                    element: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                      $this: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
                  actual: CALL .toSet type=kotlin.collections.Set<kotlin.reflect.KType> operator=null
                    $receiver: CALL .<get-allSupertypes> type=kotlin.collections.Collection<kotlin.reflect.KType> operator=GET_PROPERTY
                      $receiver: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<Simple>
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .assertEquals type=kotlin.Unit operator=null
                    expected: CALL .setOf type=kotlin.collections.Set<kotlin.reflect.KClass<kotlin.Any>> operator=null
                      element: CLASS_REFERENCE Any type=kotlin.reflect.KClass<kotlin.Any>
                    actual: CALL .toSet type=kotlin.collections.Set<kotlin.reflect.KClass<*>> operator=null
                      $receiver: CALL .<get-allSuperclasses> type=kotlin.collections.Collection<kotlin.reflect.KClass<*>> operator=GET_PROPERTY
                        $receiver: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<Simple>
            CALLABLE_REFERENCE <anonymous> type=kotlin.reflect.KClass<Simple>.() -> kotlin.Unit operator=LAMBDA
        CALL .with type=kotlin.Unit operator=null
          receiver: CLASS_REFERENCE OneClass type=kotlin.reflect.KClass<OneClass>
          block: BLOCK type=kotlin.reflect.KClass<OneClass>.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun kotlin.reflect.KClass<OneClass>.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CALL .listOf type=kotlin.collections.List<kotlin.reflect.KType> operator=null
                    element: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                      $this: CALLABLE_REFERENCE simple type=kotlin.reflect.KFunction0<Simple> operator=null
                  actual: CALL .<get-supertypes> type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
                    $this: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<OneClass>
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CALL .listOf type=kotlin.collections.List<kotlin.reflect.KClass<Simple>> operator=null
                    element: CLASS_REFERENCE Simple type=kotlin.reflect.KClass<Simple>
                  actual: CALL .<get-superclasses> type=kotlin.collections.List<kotlin.reflect.KClass<*>> operator=GET_PROPERTY
                    $receiver: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<OneClass>
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CALL .setOf type=kotlin.collections.Set<kotlin.reflect.KType> operator=null
                    elements: VARARG type=Array<out KType> varargElementType=KType
                      CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: CALLABLE_REFERENCE simple type=kotlin.reflect.KFunction0<Simple> operator=null
                      CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
                  actual: CALL .toSet type=kotlin.collections.Set<kotlin.reflect.KType> operator=null
                    $receiver: CALL .<get-allSupertypes> type=kotlin.collections.Collection<kotlin.reflect.KType> operator=GET_PROPERTY
                      $receiver: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<OneClass>
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .assertEquals type=kotlin.Unit operator=null
                    expected: CALL .setOf type=kotlin.collections.Set<kotlin.reflect.KClass<out kotlin.Any>> operator=null
                      elements: VARARG type=Array<out KClass<out Any>> varargElementType=KClass<out Any>
                        CLASS_REFERENCE Simple type=kotlin.reflect.KClass<Simple>
                        CLASS_REFERENCE Any type=kotlin.reflect.KClass<kotlin.Any>
                    actual: CALL .toSet type=kotlin.collections.Set<kotlin.reflect.KClass<*>> operator=null
                      $receiver: CALL .<get-allSuperclasses> type=kotlin.collections.Collection<kotlin.reflect.KClass<*>> operator=GET_PROPERTY
                        $receiver: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<OneClass>
            CALLABLE_REFERENCE <anonymous> type=kotlin.reflect.KClass<OneClass>.() -> kotlin.Unit operator=LAMBDA
        CALL .with type=kotlin.Unit operator=null
          receiver: CLASS_REFERENCE Interface type=kotlin.reflect.KClass<Interface>
          block: BLOCK type=kotlin.reflect.KClass<Interface>.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun kotlin.reflect.KClass<Interface>.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CALL .listOf type=kotlin.collections.List<kotlin.reflect.KType> operator=null
                    element: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                      $this: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
                  actual: CALL .<get-supertypes> type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
                    $this: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<Interface>
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CALL .listOf type=kotlin.collections.List<kotlin.reflect.KClass<kotlin.Any>> operator=null
                    element: CLASS_REFERENCE Any type=kotlin.reflect.KClass<kotlin.Any>
                  actual: CALL .<get-superclasses> type=kotlin.collections.List<kotlin.reflect.KClass<*>> operator=GET_PROPERTY
                    $receiver: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<Interface>
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CALL .setOf type=kotlin.collections.Set<kotlin.reflect.KType> operator=null
                    element: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                      $this: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
                  actual: CALL .toSet type=kotlin.collections.Set<kotlin.reflect.KType> operator=null
                    $receiver: CALL .<get-allSupertypes> type=kotlin.collections.Collection<kotlin.reflect.KType> operator=GET_PROPERTY
                      $receiver: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<Interface>
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .assertEquals type=kotlin.Unit operator=null
                    expected: CALL .setOf type=kotlin.collections.Set<kotlin.reflect.KClass<kotlin.Any>> operator=null
                      element: CLASS_REFERENCE Any type=kotlin.reflect.KClass<kotlin.Any>
                    actual: CALL .toSet type=kotlin.collections.Set<kotlin.reflect.KClass<*>> operator=null
                      $receiver: CALL .<get-allSuperclasses> type=kotlin.collections.Collection<kotlin.reflect.KClass<*>> operator=GET_PROPERTY
                        $receiver: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<Interface>
            CALLABLE_REFERENCE <anonymous> type=kotlin.reflect.KClass<Interface>.() -> kotlin.Unit operator=LAMBDA
        CALL .with type=kotlin.Unit operator=null
          receiver: CLASS_REFERENCE ClassAndTwoInterfaces type=kotlin.reflect.KClass<ClassAndTwoInterfaces>
          block: BLOCK type=kotlin.reflect.KClass<ClassAndTwoInterfaces>.() -> kotlin.Unit operator=LAMBDA
            FUN local final fun kotlin.reflect.KClass<ClassAndTwoInterfaces>.<anonymous>(): kotlin.Unit
              BLOCK_BODY
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CALL .listOf type=kotlin.collections.List<kotlin.reflect.KType> operator=null
                    elements: VARARG type=Array<out KType> varargElementType=KType
                      CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: CALLABLE_REFERENCE interface_ type=kotlin.reflect.KFunction0<Interface> operator=null
                      CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: CALLABLE_REFERENCE simple type=kotlin.reflect.KFunction0<Simple> operator=null
                      CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: CALLABLE_REFERENCE interface2 type=kotlin.reflect.KFunction0<Interface2> operator=null
                  actual: CALL .<get-supertypes> type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
                    $this: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<ClassAndTwoInterfaces>
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CALL .listOf type=kotlin.collections.List<kotlin.reflect.KClass<out kotlin.Any>> operator=null
                    elements: VARARG type=Array<out KClass<out Any>> varargElementType=KClass<out Any>
                      CLASS_REFERENCE Interface type=kotlin.reflect.KClass<Interface>
                      CLASS_REFERENCE Simple type=kotlin.reflect.KClass<Simple>
                      CLASS_REFERENCE Interface2 type=kotlin.reflect.KClass<Interface2>
                  actual: CALL .<get-superclasses> type=kotlin.collections.List<kotlin.reflect.KClass<*>> operator=GET_PROPERTY
                    $receiver: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<ClassAndTwoInterfaces>
                CALL .assertEquals type=kotlin.Unit operator=null
                  expected: CALL .setOf type=kotlin.collections.Set<kotlin.reflect.KType> operator=null
                    elements: VARARG type=Array<out KType> varargElementType=KType
                      CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: CALLABLE_REFERENCE interface_ type=kotlin.reflect.KFunction0<Interface> operator=null
                      CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: CALLABLE_REFERENCE simple type=kotlin.reflect.KFunction0<Simple> operator=null
                      CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: CALLABLE_REFERENCE interface2 type=kotlin.reflect.KFunction0<Interface2> operator=null
                      CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
                  actual: CALL .toSet type=kotlin.collections.Set<kotlin.reflect.KType> operator=null
                    $receiver: CALL .<get-allSupertypes> type=kotlin.collections.Collection<kotlin.reflect.KType> operator=GET_PROPERTY
                      $receiver: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<ClassAndTwoInterfaces>
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .assertEquals type=kotlin.Unit operator=null
                    expected: CALL .setOf type=kotlin.collections.Set<kotlin.reflect.KClass<out kotlin.Any>> operator=null
                      elements: VARARG type=Array<out KClass<out Any>> varargElementType=KClass<out Any>
                        CLASS_REFERENCE Interface type=kotlin.reflect.KClass<Interface>
                        CLASS_REFERENCE Simple type=kotlin.reflect.KClass<Simple>
                        CLASS_REFERENCE Interface2 type=kotlin.reflect.KClass<Interface2>
                        CLASS_REFERENCE Any type=kotlin.reflect.KClass<kotlin.Any>
                    actual: CALL .toSet type=kotlin.collections.Set<kotlin.reflect.KClass<*>> operator=null
                      $receiver: CALL .<get-allSuperclasses> type=kotlin.collections.Collection<kotlin.reflect.KClass<*>> operator=GET_PROPERTY
                        $receiver: $RECEIVER of: <anonymous> type=kotlin.reflect.KClass<ClassAndTwoInterfaces>
            CALLABLE_REFERENCE <anonymous> type=kotlin.reflect.KClass<ClassAndTwoInterfaces>.() -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
