MODULE <test-module>
  FILE /builtInClassSupertypes.kt
    FUN public inline fun </*0*/ reified T : kotlin.Any> check(/*0*/ vararg callables: kotlin.reflect.KCallable<*> /*kotlin.Array<out kotlin.reflect.KCallable<*>>*/): kotlin.Unit
      BLOCK_BODY
        VAR val types: kotlin.collections.List<kotlin.reflect.KType>
          CALL .map type=kotlin.collections.List<kotlin.reflect.KType> operator=null
            $receiver: GET_VAR callables type=kotlin.Array<out kotlin.reflect.KCallable<*>> operator=null
            transform: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.reflect.KType operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KCallable<*>): kotlin.reflect.KType
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                      $this: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KCallable<*>) -> kotlin.reflect.KType operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR types type=kotlin.collections.List<kotlin.reflect.KType> operator=null
          actual: CALL .<get-supertypes> type=kotlin.collections.List<kotlin.reflect.KType> operator=GET_PROPERTY
            $this: CLASS_REFERENCE T type=kotlin.reflect.KClass<T>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .map type=kotlin.collections.List<kotlin.reflect.KClass<*>> operator=null
            $receiver: GET_VAR types type=kotlin.collections.List<kotlin.reflect.KType> operator=null
            transform: BLOCK type=(kotlin.reflect.KType) -> kotlin.reflect.KClass<*> operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KType): kotlin.reflect.KClass<*>
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    TYPE_OP operator=CAST typeOperand=kotlin.reflect.KClass<*>
                      CALL .<get-classifier> type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KType operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KType) -> kotlin.reflect.KClass<*> operator=LAMBDA
          actual: CALL .<get-superclasses> type=kotlin.collections.List<kotlin.reflect.KClass<*>> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE T type=kotlin.reflect.KClass<T>
    FUN public inline fun </*0*/ reified T : kotlin.Any> checkAll(/*0*/ vararg callables: kotlin.reflect.KCallable<*> /*kotlin.Array<out kotlin.reflect.KCallable<*>>*/): kotlin.Unit
      BLOCK_BODY
        VAR val types: kotlin.collections.List<kotlin.reflect.KType>
          CALL .map type=kotlin.collections.List<kotlin.reflect.KType> operator=null
            $receiver: GET_VAR callables type=kotlin.Array<out kotlin.reflect.KCallable<*>> operator=null
            transform: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.reflect.KType operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KCallable<*>): kotlin.reflect.KType
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                      $this: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KCallable<*>) -> kotlin.reflect.KType operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .toSet type=kotlin.collections.Set<kotlin.reflect.KType> operator=null
            $receiver: GET_VAR types type=kotlin.collections.List<kotlin.reflect.KType> operator=null
          actual: CALL .toSet type=kotlin.collections.Set<kotlin.reflect.KType> operator=null
            $receiver: CALL .<get-allSupertypes> type=kotlin.collections.Collection<kotlin.reflect.KType> operator=GET_PROPERTY
              $receiver: CLASS_REFERENCE T type=kotlin.reflect.KClass<T>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .toSet type=kotlin.collections.Set<kotlin.reflect.KClass<*>> operator=null
            $receiver: CALL .map type=kotlin.collections.List<kotlin.reflect.KClass<*>> operator=null
              $receiver: GET_VAR types type=kotlin.collections.List<kotlin.reflect.KType> operator=null
              transform: BLOCK type=(kotlin.reflect.KType) -> kotlin.reflect.KClass<*> operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KType): kotlin.reflect.KClass<*>
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      TYPE_OP operator=CAST typeOperand=kotlin.reflect.KClass<*>
                        CALL .<get-classifier> type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
                          $this: GET_VAR it type=kotlin.reflect.KType operator=null
                CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KType) -> kotlin.reflect.KClass<*> operator=LAMBDA
          actual: CALL .toSet type=kotlin.collections.Set<kotlin.reflect.KClass<*>> operator=null
            $receiver: CALL .<get-allSuperclasses> type=kotlin.collections.Collection<kotlin.reflect.KClass<*>> operator=GET_PROPERTY
              $receiver: CLASS_REFERENCE T type=kotlin.reflect.KClass<T>
    FUN public fun comparableOfString(): kotlin.Comparable<kotlin.String>
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun charSequence(): kotlin.CharSequence
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun serializable(): java.io.Serializable
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun any(): kotlin.Any
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun number(): kotlin.Number
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun comparableOfInt(): kotlin.Comparable<kotlin.Int>
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun cloneable(): kotlin.Cloneable
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .check type=kotlin.Unit operator=null
        CALL .checkAll type=kotlin.Unit operator=null
        CALL .check type=kotlin.Unit operator=null
          callables: VARARG type=Array<out KCallable<*>> varargElementType=KCallable<*>
            CALLABLE_REFERENCE comparableOfString type=kotlin.reflect.KFunction0<kotlin.Comparable<kotlin.String>> operator=null
            CALLABLE_REFERENCE charSequence type=kotlin.reflect.KFunction0<kotlin.CharSequence> operator=null
            CALLABLE_REFERENCE serializable type=kotlin.reflect.KFunction0<java.io.Serializable> operator=null
        CALL .checkAll type=kotlin.Unit operator=null
          callables: VARARG type=Array<out KCallable<*>> varargElementType=KCallable<*>
            CALLABLE_REFERENCE comparableOfString type=kotlin.reflect.KFunction0<kotlin.Comparable<kotlin.String>> operator=null
            CALLABLE_REFERENCE charSequence type=kotlin.reflect.KFunction0<kotlin.CharSequence> operator=null
            CALLABLE_REFERENCE serializable type=kotlin.reflect.KFunction0<java.io.Serializable> operator=null
            CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
        CALL .check type=kotlin.Unit operator=null
          callables: VARARG type=Array<out KCallable<*>> varargElementType=KCallable<*>
            CALLABLE_REFERENCE number type=kotlin.reflect.KFunction0<kotlin.Number> operator=null
            CALLABLE_REFERENCE comparableOfInt type=kotlin.reflect.KFunction0<kotlin.Comparable<kotlin.Int>> operator=null
            CALLABLE_REFERENCE serializable type=kotlin.reflect.KFunction0<java.io.Serializable> operator=null
        CALL .checkAll type=kotlin.Unit operator=null
          callables: VARARG type=Array<out KCallable<*>> varargElementType=KCallable<*>
            CALLABLE_REFERENCE number type=kotlin.reflect.KFunction0<kotlin.Number> operator=null
            CALLABLE_REFERENCE comparableOfInt type=kotlin.reflect.KFunction0<kotlin.Comparable<kotlin.Int>> operator=null
            CALLABLE_REFERENCE serializable type=kotlin.reflect.KFunction0<java.io.Serializable> operator=null
            CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
        CALL .check type=kotlin.Unit operator=null
          callables: VARARG type=Array<out KCallable<*>> varargElementType=KCallable<*>
            CALLABLE_REFERENCE cloneable type=kotlin.reflect.KFunction0<kotlin.Cloneable> operator=null
            CALLABLE_REFERENCE serializable type=kotlin.reflect.KFunction0<java.io.Serializable> operator=null
        CALL .checkAll type=kotlin.Unit operator=null
          callables: VARARG type=Array<out KCallable<*>> varargElementType=KCallable<*>
            CALLABLE_REFERENCE cloneable type=kotlin.reflect.KFunction0<kotlin.Cloneable> operator=null
            CALLABLE_REFERENCE serializable type=kotlin.reflect.KFunction0<java.io.Serializable> operator=null
            CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
