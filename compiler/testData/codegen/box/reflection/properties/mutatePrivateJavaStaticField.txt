MODULE <test-module>
  FILE /K.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val a: J
          CALL .<init> type=J operator=null
        VAR val p: kotlin.reflect.KMutableProperty0<kotlin.String>
          TYPE_OP operator=CAST typeOperand=kotlin.reflect.KMutableProperty0<kotlin.String>
            CALL .single type=kotlin.reflect.KCallable<*> operator=null
              $receiver: CALL .<get-members> type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
                $this: CLASS_REFERENCE J type=kotlin.reflect.KClass<J>
              predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                          $this: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
                        arg1: CONST String type=kotlin.String value='result'
                CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
        CALL .<set-isAccessible> type=kotlin.Unit operator=EQ
          $receiver: GET_VAR p type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
          value: CONST Boolean type=kotlin.Boolean value='true'
        CALL .set type=kotlin.Unit operator=null
          $this: GET_VAR p type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
          value: CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from=box
          CALL .get type=kotlin.String operator=null
            $this: GET_VAR p type=kotlin.reflect.KMutableProperty0<kotlin.String> operator=null
