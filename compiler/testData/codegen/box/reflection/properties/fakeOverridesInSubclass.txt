MODULE <test-module>
  FILE /fakeOverridesInSubclass.kt
    CLASS CLASS Super
      CONSTRUCTOR public constructor Super(/*0*/ r: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD r type=kotlin.Unit operator=null
            receiver: THIS public open class Super type=Super
            value: GET_VAR r type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Super
      PROPERTY public final val r: kotlin.String
        EXPRESSION_BODY
          GET_VAR r type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS CLASS Sub
      CONSTRUCTOR public constructor Sub(/*0*/ r: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Super
            r: GET_VAR r type=kotlin.String operator=null
          INSTANCE_INITIALIZER_CALL classDescriptor=Sub
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val props: kotlin.collections.Collection<kotlin.reflect.KProperty1<Sub, *>>
          CALL .<get-declaredMemberProperties> type=kotlin.collections.Collection<kotlin.reflect.KProperty1<Sub, *>> operator=GET_PROPERTY
            $receiver: CALL .<get-kotlin> type=kotlin.reflect.KClass<Sub> operator=GET_PROPERTY
              $receiver: CALL .<get-java> type=java.lang.Class<Sub> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE Sub type=kotlin.reflect.KClass<Sub>
        WHEN type=kotlin.Unit operator=IF
          if: CALL .not type=kotlin.Boolean operator=EXCL
            $this: CALL .isEmpty type=kotlin.Boolean operator=null
              $this: GET_VAR props type=kotlin.collections.Collection<kotlin.reflect.KProperty1<Sub, *>> operator=null
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Fail '
              GET_VAR props type=kotlin.collections.Collection<kotlin.reflect.KProperty1<Sub, *>> operator=null
        VAR val allProps: kotlin.collections.Collection<kotlin.reflect.KProperty1<Sub, *>>
          CALL .<get-memberProperties> type=kotlin.collections.Collection<kotlin.reflect.KProperty1<Sub, *>> operator=GET_PROPERTY
            $receiver: CALL .<get-kotlin> type=kotlin.reflect.KClass<Sub> operator=GET_PROPERTY
              $receiver: CALL .<get-java> type=java.lang.Class<Sub> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE Sub type=kotlin.reflect.KClass<Sub>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<kotlin.String> operator=null
            element: CONST String type=kotlin.String value='r'
          actual: CALL .map type=kotlin.collections.List<kotlin.String> operator=null
            $receiver: GET_VAR allProps type=kotlin.collections.Collection<kotlin.reflect.KProperty1<Sub, *>> operator=null
            transform: BLOCK type=(kotlin.reflect.KProperty1<Sub, *>) -> kotlin.String operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KProperty1<Sub, *>): kotlin.String
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                      $this: GET_VAR it type=kotlin.reflect.KProperty1<Sub, *> operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KProperty1<Sub, *>) -> kotlin.String operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          TYPE_OP operator=CAST typeOperand=kotlin.String
            CALL .get type=kotlin.Any? operator=null
              $this: CALL .single type=kotlin.reflect.KProperty1<Sub, *> operator=null
                $receiver: GET_VAR allProps type=kotlin.collections.Collection<kotlin.reflect.KProperty1<Sub, *>> operator=null
              receiver: CALL .<init> type=Sub operator=null
                r: CONST String type=kotlin.String value='OK'
