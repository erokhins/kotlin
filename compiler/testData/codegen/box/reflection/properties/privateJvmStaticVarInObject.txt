MODULE <test-module>
  FILE /privateJvmStaticVarInObject.kt
    CLASS OBJECT Obj
      CONSTRUCTOR private constructor Obj()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Obj
      PROPERTY @kotlin.jvm.JvmStatic() private final var result: kotlin.String
        EXPRESSION_BODY
          CONST String type=kotlin.String value='Fail'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val p: kotlin.reflect.KMutableProperty1<kotlin.Any?, kotlin.String>
          TYPE_OP operator=CAST typeOperand=kotlin.reflect.KMutableProperty1<kotlin.Any?, kotlin.String>
            CALL .single type=kotlin.reflect.KCallable<*> operator=null
              $receiver: CALL .<get-members> type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
                $this: CLASS_REFERENCE Obj type=kotlin.reflect.KClass<Obj>
              predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                          $this: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
                        arg1: CONST String type=kotlin.String value='result'
                CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
        CALL .<set-isAccessible> type=kotlin.Unit operator=EQ
          $receiver: GET_VAR p type=kotlin.reflect.KMutableProperty1<kotlin.Any?, kotlin.String> operator=null
          value: CONST Boolean type=kotlin.Boolean value='true'
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .set type=kotlin.Unit operator=null
              $this: GET_VAR p type=kotlin.reflect.KMutableProperty1<kotlin.Any?, kotlin.String> operator=null
              receiver: CONST Null type=kotlin.Nothing? value='null'
              value: CONST String type=kotlin.String value='OK'
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='Fail: set should check that first argument is Obj'
          catch e: BLOCK type=kotlin.Unit operator=null
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .get type=kotlin.String operator=null
              $this: GET_VAR p type=kotlin.reflect.KMutableProperty1<kotlin.Any?, kotlin.String> operator=null
              receiver: CONST Null type=kotlin.Nothing? value='null'
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='Fail: get should check that first argument is Obj'
          catch e: BLOCK type=kotlin.Unit operator=null
        CALL .set type=kotlin.Unit operator=null
          $this: GET_VAR p type=kotlin.reflect.KMutableProperty1<kotlin.Any?, kotlin.String> operator=null
          receiver: GET_OBJECT Obj type=Obj
          value: CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from=box
          CALL .get type=kotlin.String operator=null
            $this: GET_VAR p type=kotlin.reflect.KMutableProperty1<kotlin.Any?, kotlin.String> operator=null
            receiver: GET_OBJECT Obj type=Obj
