MODULE <test-module>
  FILE /getExtensionPropertiesMutableVsReadonly.kt
    PROPERTY public var storage: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value='before'
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final val kotlin.String.readonly: kotlin.String
        PROPERTY_GETTER public final fun kotlin.String.<get-readonly>(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-readonly>
              $RECEIVER of: readonly type=kotlin.String
      PROPERTY public final var kotlin.String.mutable: kotlin.String
        PROPERTY_GETTER public final fun kotlin.String.<get-mutable>(): kotlin.String
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=<get-mutable>
              CALL .<get-storage> type=kotlin.String operator=GET_PROPERTY
        PROPERTY_SETTER public final fun kotlin.String.<set-mutable>(/*0*/ value: kotlin.String): kotlin.Unit
          BLOCK_BODY
            CALL .<set-storage> type=kotlin.Unit operator=EQ
              <set-?>: GET_VAR value type=kotlin.String operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val props: kotlin.collections.Collection<kotlin.reflect.KProperty2<A, *, *>>
          CALL .<get-memberExtensionProperties> type=kotlin.collections.Collection<kotlin.reflect.KProperty2<A, *, *>> operator=GET_PROPERTY
            $receiver: CALL .<get-kotlin> type=kotlin.reflect.KClass<A> operator=GET_PROPERTY
              $receiver: CALL .<get-java> type=java.lang.Class<A> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
        VAR val readonly: kotlin.reflect.KProperty2<A, *, *>
          CALL .single type=kotlin.reflect.KProperty2<A, *, *> operator=null
            $receiver: GET_VAR props type=kotlin.collections.Collection<kotlin.reflect.KProperty2<A, *, *>> operator=null
            predicate: BLOCK type=(kotlin.reflect.KProperty2<A, *, *>) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KProperty2<A, *, *>): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KProperty2<A, *, *> operator=null
                      arg1: CONST String type=kotlin.String value='readonly'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KProperty2<A, *, *>) -> kotlin.Boolean operator=LAMBDA
        CALL .assert type=kotlin.Unit operator=null
          value: TYPE_OP operator=NOT_INSTANCEOF typeOperand=kotlin.reflect.KMutableProperty2<A, *, *>
            GET_VAR readonly type=kotlin.reflect.KProperty2<A, *, *> operator=null
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='Fail 1: '
                    GET_VAR readonly type=kotlin.reflect.KProperty2<A, *, *> operator=null
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
        VAR val mutable: kotlin.reflect.KProperty2<A, *, *>
          CALL .single type=kotlin.reflect.KProperty2<A, *, *> operator=null
            $receiver: GET_VAR props type=kotlin.collections.Collection<kotlin.reflect.KProperty2<A, *, *>> operator=null
            predicate: BLOCK type=(kotlin.reflect.KProperty2<A, *, *>) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KProperty2<A, *, *>): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KProperty2<A, *, *> operator=null
                      arg1: CONST String type=kotlin.String value='mutable'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KProperty2<A, *, *>) -> kotlin.Boolean operator=LAMBDA
        CALL .assert type=kotlin.Unit operator=null
          value: TYPE_OP operator=INSTANCEOF typeOperand=kotlin.reflect.KMutableProperty2<A, *, *>
            GET_VAR mutable type=kotlin.reflect.KProperty2<A, *, *> operator=null
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='Fail 2: '
                    GET_VAR mutable type=kotlin.reflect.KProperty2<A, *, *> operator=null
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
        VAR val a: A
          CALL .<init> type=A operator=null
        TYPE_OP operator=CAST typeOperand=kotlin.reflect.KMutableProperty2<A, kotlin.String, kotlin.String>
          GET_VAR mutable type=kotlin.reflect.KProperty2<A, *, *> operator=null
        CALL .assert type=kotlin.Unit operator=null
          value: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALL .get type=kotlin.String operator=null
              $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.reflect.KProperty2<A, kotlin.String, kotlin.String>
                GET_VAR mutable type=kotlin.reflect.KProperty2<A, *, *> operator=null
              receiver1: GET_VAR a type=A operator=null
              receiver2: CONST String type=kotlin.String value=''
            arg1: CONST String type=kotlin.String value='before'
          lazyMessage: BLOCK type=() -> kotlin.String operator=LAMBDA
            FUN local final fun <anonymous>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value='Fail 3: '
                    CALL .get type=kotlin.String operator=null
                      $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.reflect.KProperty2<A, kotlin.String, kotlin.String>
                        GET_VAR mutable type=kotlin.reflect.KProperty2<A, *, *> operator=null
                      receiver1: GET_VAR a type=A operator=null
                      receiver2: CONST String type=kotlin.String value=''
            CALLABLE_REFERENCE <anonymous> type=() -> kotlin.String operator=LAMBDA
        CALL .set type=kotlin.Unit operator=null
          $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.reflect.KMutableProperty2<A, kotlin.String, kotlin.String>
            GET_VAR mutable type=kotlin.reflect.KProperty2<A, *, *> operator=null
          receiver1: GET_VAR a type=A operator=null
          receiver2: CONST String type=kotlin.String value=''
          value: CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from=box
          CALL .get type=kotlin.String operator=null
            $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.reflect.KProperty2<A, kotlin.String, kotlin.String>
              GET_VAR mutable type=kotlin.reflect.KProperty2<A, *, *> operator=null
            receiver1: GET_VAR a type=A operator=null
            receiver2: CONST String type=kotlin.String value=''
