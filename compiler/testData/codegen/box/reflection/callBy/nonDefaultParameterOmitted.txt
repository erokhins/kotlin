MODULE <test-module>
  FILE /nonDefaultParameterOmitted.kt
    FUN public fun foo(/*0*/ x: kotlin.Int, /*1*/ y: kotlin.Int = ...): kotlin.Int
      y: EXPRESSION_BODY
        CONST Int type=kotlin.Int value='2'
      BLOCK_BODY
        RETURN type=kotlin.Nothing from=foo
          CALL .plus type=kotlin.Int operator=PLUS
            $this: GET_VAR x type=kotlin.Int operator=null
            other: GET_VAR y type=kotlin.Int operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .callBy type=kotlin.Int operator=null
              $this: CALLABLE_REFERENCE foo type=kotlin.reflect.KFunction2<kotlin.Int, kotlin.Int, kotlin.Int> operator=null
              args: CALL .mapOf type=kotlin.collections.Map<kotlin.reflect.KParameter, kotlin.Any?> operator=null
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='Fail: IllegalArgumentException must have been thrown'
          catch e: BLOCK type=kotlin.Unit operator=null
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .callBy type=kotlin.Int operator=null
              $this: CALLABLE_REFERENCE foo type=kotlin.reflect.KFunction2<kotlin.Int, kotlin.Int, kotlin.Int> operator=null
              args: CALL .mapOf type=kotlin.collections.Map<kotlin.reflect.KParameter, kotlin.Int> operator=null
                pair: CALL .to type=kotlin.Pair<kotlin.reflect.KParameter, kotlin.Int> operator=null
                  $receiver: CALL .last type=kotlin.reflect.KParameter operator=null
                    $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
                      $this: CALLABLE_REFERENCE foo type=kotlin.reflect.KFunction2<kotlin.Int, kotlin.Int, kotlin.Int> operator=null
                  that: CONST Int type=kotlin.Int value='1'
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='Fail: IllegalArgumentException must have been thrown'
          catch e: BLOCK type=kotlin.Unit operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
