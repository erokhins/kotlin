MODULE <test-module>
  FILE /jvmStaticInObjectIncorrectReceiver.kt
    CLASS OBJECT Obj
      CONSTRUCTOR private constructor Obj()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Obj
      FUN @kotlin.jvm.JvmStatic() public final fun foo(/*0*/ s: kotlin.String): kotlin.Unit
        BLOCK_BODY
      FUN @kotlin.jvm.JvmStatic() public final fun bar(): kotlin.Unit
        BLOCK_BODY
      FUN @kotlin.jvm.JvmStatic() public final fun sly(/*0*/ obj: Obj): kotlin.Unit
        BLOCK_BODY
      FUN public final operator fun get(/*0*/ name: kotlin.String): kotlin.reflect.KCallable<*>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=get
            CALL .single type=kotlin.reflect.KCallable<*> operator=null
              $receiver: CALL .<get-members> type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
                $this: CLASS_REFERENCE Obj type=kotlin.reflect.KClass<Obj>
              predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                          $this: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
                        arg1: GET_VAR name type=kotlin.String operator=null
                CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .call type=kotlin.Any? operator=null
          $this: CALL .get type=kotlin.reflect.KCallable<*> operator=GET_ARRAY_ELEMENT
            $this: GET_OBJECT Obj type=Obj
            name: CONST String type=kotlin.String value='foo'
          args: VARARG type=Array<out Any?> varargElementType=Any?
            GET_OBJECT Obj type=Obj
            CONST String type=kotlin.String value=''
        CALL .call type=kotlin.Any? operator=null
          $this: CALL .get type=kotlin.reflect.KCallable<*> operator=GET_ARRAY_ELEMENT
            $this: GET_OBJECT Obj type=Obj
            name: CONST String type=kotlin.String value='bar'
          args: VARARG type=Array<out Any?> varargElementType=Any?
            GET_OBJECT Obj type=Obj
        CALL .call type=kotlin.Any? operator=null
          $this: CALL .get type=kotlin.reflect.KCallable<*> operator=GET_ARRAY_ELEMENT
            $this: GET_OBJECT Obj type=Obj
            name: CONST String type=kotlin.String value='sly'
          args: VARARG type=Array<out Any?> varargElementType=Any?
            GET_OBJECT Obj type=Obj
            GET_OBJECT Obj type=Obj
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .call type=kotlin.Any? operator=null
              $this: CALL .get type=kotlin.reflect.KCallable<*> operator=GET_ARRAY_ELEMENT
                $this: GET_OBJECT Obj type=Obj
                name: CONST String type=kotlin.String value='foo'
              args: VARARG type=Array<out Any?> varargElementType=Any?
                CONST Null type=kotlin.Nothing? value='null'
                CONST String type=kotlin.String value=''
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='Fail foo'
          catch e: BLOCK type=kotlin.Unit operator=null
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .call type=kotlin.Any? operator=null
              $this: CALL .get type=kotlin.reflect.KCallable<*> operator=GET_ARRAY_ELEMENT
                $this: GET_OBJECT Obj type=Obj
                name: CONST String type=kotlin.String value='bar'
              args: VARARG type=Array<out Any?> varargElementType=Any?
                CONST String type=kotlin.String value=''
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='Fail bar'
          catch e: BLOCK type=kotlin.Unit operator=null
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .call type=kotlin.Any? operator=null
              $this: CALL .get type=kotlin.reflect.KCallable<*> operator=GET_ARRAY_ELEMENT
                $this: GET_OBJECT Obj type=Obj
                name: CONST String type=kotlin.String value='sly'
              args: VARARG type=Array<out Any?> varargElementType=Any?
                GET_OBJECT Obj type=Obj
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='Fail sly 1'
          catch e: BLOCK type=kotlin.Unit operator=null
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .call type=kotlin.Any? operator=null
              $this: CALL .get type=kotlin.reflect.KCallable<*> operator=GET_ARRAY_ELEMENT
                $this: GET_OBJECT Obj type=Obj
                name: CONST String type=kotlin.String value='sly'
              args: VARARG type=Array<out Any?> varargElementType=Any?
                CONST Null type=kotlin.Nothing? value='null'
                GET_OBJECT Obj type=Obj
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='Fail sly 2'
          catch e: BLOCK type=kotlin.Unit operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
