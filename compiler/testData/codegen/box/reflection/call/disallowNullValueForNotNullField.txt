MODULE <test-module>
  FILE /disallowNullValueForNotNullField.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY private final var foo: kotlin.String
        EXPRESSION_BODY
          CONST String type=kotlin.String value=''
    CLASS OBJECT O
      CONSTRUCTOR private constructor O()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=O
      PROPERTY @kotlin.jvm.JvmStatic() private final var bar: kotlin.String
        EXPRESSION_BODY
          CONST String type=kotlin.String value=''
    CLASS CLASS CounterTest
      CONSTRUCTOR public constructor CounterTest</*0*/ T>(/*0*/ t: T)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=CounterTest
      PROPERTY private final var baz: kotlin.String?
        EXPRESSION_BODY
          CONST String type=kotlin.String value=''
      PROPERTY private final var generic: T
        EXPRESSION_BODY
          GET_VAR t type=T operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val p: kotlin.reflect.KMutableProperty1<A, kotlin.String?>
          TYPE_OP operator=CAST typeOperand=kotlin.reflect.KMutableProperty1<A, kotlin.String?>
            CALL .single type=kotlin.reflect.KProperty1<A, *> operator=null
              $receiver: CALL .<get-memberProperties> type=kotlin.collections.Collection<kotlin.reflect.KProperty1<A, *>> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
        CALL .<set-isAccessible> type=kotlin.Unit operator=EQ
          $receiver: GET_VAR p type=kotlin.reflect.KMutableProperty1<A, kotlin.String?> operator=null
          value: CONST Boolean type=kotlin.Boolean value='true'
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .call type=kotlin.Unit operator=null
              $this: CALL .<get-setter> type=kotlin.reflect.KMutableProperty1.Setter<A, kotlin.String?> operator=GET_PROPERTY
                $this: GET_VAR p type=kotlin.reflect.KMutableProperty1<A, kotlin.String?> operator=null
              args: VARARG type=Array<out Any?> varargElementType=Any?
                CALL .<init> type=A operator=null
                CONST Null type=kotlin.Nothing? value='null'
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='Fail: exception should have been thrown'
          catch e: BLOCK type=kotlin.Unit operator=null
        VAR val o: kotlin.reflect.KMutableProperty1<O, kotlin.String?>
          TYPE_OP operator=CAST typeOperand=kotlin.reflect.KMutableProperty1<O, kotlin.String?>
            CALL .single type=kotlin.reflect.KProperty1<O, *> operator=null
              $receiver: CALL .<get-memberProperties> type=kotlin.collections.Collection<kotlin.reflect.KProperty1<O, *>> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE O type=kotlin.reflect.KClass<O>
        CALL .<set-isAccessible> type=kotlin.Unit operator=EQ
          $receiver: GET_VAR o type=kotlin.reflect.KMutableProperty1<O, kotlin.String?> operator=null
          value: CONST Boolean type=kotlin.Boolean value='true'
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .call type=kotlin.Unit operator=null
              $this: CALL .<get-setter> type=kotlin.reflect.KMutableProperty1.Setter<O, kotlin.String?> operator=GET_PROPERTY
                $this: GET_VAR o type=kotlin.reflect.KMutableProperty1<O, kotlin.String?> operator=null
              args: VARARG type=Array<out Any?> varargElementType=Any?
                GET_OBJECT O type=O
                CONST Null type=kotlin.Nothing? value='null'
            RETURN type=kotlin.Nothing from=box
              CONST String type=kotlin.String value='Fail: exception should have been thrown'
          catch e: BLOCK type=kotlin.Unit operator=null
        VAR val c: kotlin.reflect.KMutableProperty1<CounterTest<*>, kotlin.String?>
          TYPE_OP operator=CAST typeOperand=kotlin.reflect.KMutableProperty1<CounterTest<*>, kotlin.String?>
            CALL .single type=kotlin.reflect.KProperty1<CounterTest<*>, *> operator=null
              $receiver: CALL .<get-memberProperties> type=kotlin.collections.Collection<kotlin.reflect.KProperty1<CounterTest<*>, *>> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE CounterTest type=kotlin.reflect.KClass<CounterTest<*>>
              predicate: BLOCK type=(kotlin.reflect.KProperty1<CounterTest<*>, *>) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KProperty1<CounterTest<*>, *>): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                          $this: GET_VAR it type=kotlin.reflect.KProperty1<CounterTest<*>, *> operator=null
                        arg1: CONST String type=kotlin.String value='baz'
                CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KProperty1<CounterTest<*>, *>) -> kotlin.Boolean operator=LAMBDA
        CALL .<set-isAccessible> type=kotlin.Unit operator=EQ
          $receiver: GET_VAR c type=kotlin.reflect.KMutableProperty1<CounterTest<*>, kotlin.String?> operator=null
          value: CONST Boolean type=kotlin.Boolean value='true'
        CALL .call type=kotlin.Unit operator=null
          $this: CALL .<get-setter> type=kotlin.reflect.KMutableProperty1.Setter<CounterTest<*>, kotlin.String?> operator=GET_PROPERTY
            $this: GET_VAR c type=kotlin.reflect.KMutableProperty1<CounterTest<*>, kotlin.String?> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CALL .<init> type=CounterTest<kotlin.String> operator=null
              t: CONST String type=kotlin.String value=''
            CONST Null type=kotlin.Nothing? value='null'
        VAR val d: kotlin.reflect.KMutableProperty1<CounterTest<*>, kotlin.String?>
          TYPE_OP operator=CAST typeOperand=kotlin.reflect.KMutableProperty1<CounterTest<*>, kotlin.String?>
            CALL .single type=kotlin.reflect.KProperty1<CounterTest<*>, *> operator=null
              $receiver: CALL .<get-memberProperties> type=kotlin.collections.Collection<kotlin.reflect.KProperty1<CounterTest<*>, *>> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE CounterTest type=kotlin.reflect.KClass<CounterTest<*>>
              predicate: BLOCK type=(kotlin.reflect.KProperty1<CounterTest<*>, *>) -> kotlin.Boolean operator=LAMBDA
                FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KProperty1<CounterTest<*>, *>): kotlin.Boolean
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from=<anonymous>
                      CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                        arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                          $this: GET_VAR it type=kotlin.reflect.KProperty1<CounterTest<*>, *> operator=null
                        arg1: CONST String type=kotlin.String value='generic'
                CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KProperty1<CounterTest<*>, *>) -> kotlin.Boolean operator=LAMBDA
        CALL .<set-isAccessible> type=kotlin.Unit operator=EQ
          $receiver: GET_VAR d type=kotlin.reflect.KMutableProperty1<CounterTest<*>, kotlin.String?> operator=null
          value: CONST Boolean type=kotlin.Boolean value='true'
        CALL .call type=kotlin.Unit operator=null
          $this: CALL .<get-setter> type=kotlin.reflect.KMutableProperty1.Setter<CounterTest<*>, kotlin.String?> operator=GET_PROPERTY
            $this: GET_VAR d type=kotlin.reflect.KMutableProperty1<CounterTest<*>, kotlin.String?> operator=null
          args: VARARG type=Array<out Any?> varargElementType=Any?
            CALL .<init> type=CounterTest<kotlin.String> operator=null
              t: CONST String type=kotlin.String value=''
            CONST Null type=kotlin.Nothing? value='null'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
