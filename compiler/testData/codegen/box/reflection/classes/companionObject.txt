MODULE <test-module>
  FILE /companionObject.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      CLASS OBJECT C
        CONSTRUCTOR private constructor C()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=C
    CLASS ENUM_CLASS E
      CONSTRUCTOR private constructor E()
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL Enum super
          INSTANCE_INITIALIZER_CALL classDescriptor=E
      ENUM_ENTRY enum entry ENTRY
        init: ENUM_CONSTRUCTOR_CALL E ENTRY
      CLASS OBJECT Companion
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Companion
      FUN public final /*synthesized*/ fun values(): kotlin.Array<E>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): E
        SYNTHETIC_BODY kind=ENUM_VALUEOF
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val obj: kotlin.reflect.KClass<*>?
          CALL .<get-companionObject> type=kotlin.reflect.KClass<*>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
        CALL .assertNotNull type=kotlin.reflect.KClass<*> operator=null
          actual: GET_VAR obj type=kotlin.reflect.KClass<*>? operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='C'
          actual: CALL .<get-simpleName> type=kotlin.String? operator=GET_PROPERTY
            $this: BLOCK type=kotlin.reflect.KClass<*> operator=EXCLEXCL
              VAR val tmp0_notnull: kotlin.reflect.KClass<*>?
                GET_VAR obj type=kotlin.reflect.KClass<*>? operator=null
              WHEN type=kotlin.reflect.KClass<*> operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp0_notnull type=kotlin.reflect.KClass<*>? operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                else: GET_VAR tmp0_notnull type=kotlin.reflect.KClass<*>? operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT C type=A.C
          actual: CALL .<get-companionObjectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT C type=A.C
          actual: CALL .<get-objectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $this: GET_VAR obj type=kotlin.reflect.KClass<*>? operator=null
        CALL .assertNull type=kotlin.Unit operator=null
          actual: CALL .<get-companionObject> type=kotlin.reflect.KClass<*>? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE C type=kotlin.reflect.KClass<A.C>
        CALL .assertNull type=kotlin.Unit operator=null
          actual: CALL .<get-companionObjectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE C type=kotlin.reflect.KClass<A.C>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=E.Companion
          actual: CALL .<get-companionObjectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE E type=kotlin.reflect.KClass<E>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.String.Companion
          actual: CALL .<get-companionObjectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE String type=kotlin.reflect.KClass<kotlin.String>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.String.Companion
          actual: CALL .<get-objectInstance> type=kotlin.String.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE Companion type=kotlin.reflect.KClass<kotlin.String.Companion>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Enum.Companion
          actual: CALL .<get-companionObjectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Enum type=kotlin.reflect.KClass<kotlin.Enum<*>>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Enum.Companion
          actual: CALL .<get-objectInstance> type=kotlin.Enum.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE Companion type=kotlin.reflect.KClass<kotlin.Enum.Companion>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Double.Companion
          actual: CALL .<get-companionObjectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Double type=kotlin.reflect.KClass<kotlin.Double>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Double.Companion
          actual: CALL .<get-objectInstance> type=kotlin.Double.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE Companion type=kotlin.reflect.KClass<kotlin.Double.Companion>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Float.Companion
          actual: CALL .<get-companionObjectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Float type=kotlin.reflect.KClass<kotlin.Float>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Float.Companion
          actual: CALL .<get-objectInstance> type=kotlin.Float.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE Companion type=kotlin.reflect.KClass<kotlin.Float.Companion>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Int.Companion
          actual: CALL .<get-companionObjectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Int type=kotlin.reflect.KClass<kotlin.Int>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Int.Companion
          actual: CALL .<get-objectInstance> type=kotlin.Int.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE Companion type=kotlin.reflect.KClass<kotlin.Int.Companion>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Long.Companion
          actual: CALL .<get-companionObjectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Long type=kotlin.reflect.KClass<kotlin.Long>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Long.Companion
          actual: CALL .<get-objectInstance> type=kotlin.Long.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE Companion type=kotlin.reflect.KClass<kotlin.Long.Companion>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Short.Companion
          actual: CALL .<get-companionObjectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Short type=kotlin.reflect.KClass<kotlin.Short>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Short.Companion
          actual: CALL .<get-objectInstance> type=kotlin.Short.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE Companion type=kotlin.reflect.KClass<kotlin.Short.Companion>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Byte.Companion
          actual: CALL .<get-companionObjectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Byte type=kotlin.reflect.KClass<kotlin.Byte>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Byte.Companion
          actual: CALL .<get-objectInstance> type=kotlin.Byte.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE Companion type=kotlin.reflect.KClass<kotlin.Byte.Companion>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Char.Companion
          actual: CALL .<get-companionObjectInstance> type=kotlin.Any? operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Char type=kotlin.reflect.KClass<kotlin.Char>
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_OBJECT Companion type=kotlin.Char.Companion
          actual: CALL .<get-objectInstance> type=kotlin.Char.Companion? operator=GET_PROPERTY
            $this: CLASS_REFERENCE Companion type=kotlin.reflect.KClass<kotlin.Char.Companion>
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
