MODULE <test-module>
  FILE /instanceExtensionReceiverAndValueParameters.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      FUN public final fun kotlin.String.memExt(/*0*/ param: kotlin.Int): kotlin.Unit
        BLOCK_BODY
    FUN public fun topLevel(): kotlin.Unit
      BLOCK_BODY
    FUN public fun kotlin.Int.ext(/*0*/ vararg o: kotlin.Any /*kotlin.Array<out kotlin.Any>*/): kotlin.Unit
      BLOCK_BODY
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .let type=kotlin.Unit operator=null
          $receiver: CALL .single type=kotlin.reflect.KCallable<*> operator=null
            $receiver: CALL .<get-members> type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
              $this: CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
            predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
                      arg1: CONST String type=kotlin.String value='memExt'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
          block: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KCallable<*>): kotlin.Unit
              BLOCK_BODY
                CALL .assertNotNull type=kotlin.reflect.KParameter operator=null
                  actual: CALL .<get-instanceParameter> type=kotlin.reflect.KParameter? operator=GET_PROPERTY
                    $receiver: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
                CALL .assertNotNull type=kotlin.reflect.KParameter operator=null
                  actual: CALL .<get-extensionReceiverParameter> type=kotlin.reflect.KParameter? operator=GET_PROPERTY
                    $receiver: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .assertEquals type=kotlin.Unit operator=null
                    expected: CONST Int type=kotlin.Int value='1'
                    actual: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                      $this: CALL .<get-valueParameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
                        $receiver: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
            CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KCallable<*>) -> kotlin.Unit operator=LAMBDA
        CALL .let type=kotlin.Unit operator=null
          $receiver: CALLABLE_REFERENCE topLevel type=kotlin.reflect.KFunction0<kotlin.Unit> operator=null
          block: BLOCK type=(kotlin.reflect.KFunction0<kotlin.Unit>) -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KFunction0<kotlin.Unit>): kotlin.Unit
              BLOCK_BODY
                CALL .assertNull type=kotlin.Unit operator=null
                  actual: CALL .<get-instanceParameter> type=kotlin.reflect.KParameter? operator=GET_PROPERTY
                    $receiver: GET_VAR it type=kotlin.reflect.KFunction0<kotlin.Unit> operator=null
                CALL .assertNull type=kotlin.Unit operator=null
                  actual: CALL .<get-extensionReceiverParameter> type=kotlin.reflect.KParameter? operator=GET_PROPERTY
                    $receiver: GET_VAR it type=kotlin.reflect.KFunction0<kotlin.Unit> operator=null
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .assertEquals type=kotlin.Unit operator=null
                    expected: CONST Int type=kotlin.Int value='0'
                    actual: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                      $this: CALL .<get-valueParameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
                        $receiver: GET_VAR it type=kotlin.reflect.KFunction0<kotlin.Unit> operator=null
            CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KFunction0<kotlin.Unit>) -> kotlin.Unit operator=LAMBDA
        CALL .let type=kotlin.Unit operator=null
          $receiver: CALLABLE_REFERENCE ext type=kotlin.reflect.KFunction2<kotlin.Int, kotlin.Array<out kotlin.Any>, kotlin.Unit> operator=null
          block: BLOCK type=(kotlin.reflect.KFunction2<kotlin.Int, kotlin.Array<out kotlin.Any>, kotlin.Unit>) -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KFunction2<kotlin.Int, kotlin.Array<out kotlin.Any>, kotlin.Unit>): kotlin.Unit
              BLOCK_BODY
                CALL .assertNull type=kotlin.Unit operator=null
                  actual: CALL .<get-instanceParameter> type=kotlin.reflect.KParameter? operator=GET_PROPERTY
                    $receiver: GET_VAR it type=kotlin.reflect.KFunction2<kotlin.Int, kotlin.Array<out kotlin.Any>, kotlin.Unit> operator=null
                CALL .assertNotNull type=kotlin.reflect.KParameter operator=null
                  actual: CALL .<get-extensionReceiverParameter> type=kotlin.reflect.KParameter? operator=GET_PROPERTY
                    $receiver: GET_VAR it type=kotlin.reflect.KFunction2<kotlin.Int, kotlin.Array<out kotlin.Any>, kotlin.Unit> operator=null
                RETURN type=kotlin.Nothing from=<anonymous>
                  CALL .assertEquals type=kotlin.Unit operator=null
                    expected: CONST Int type=kotlin.Int value='1'
                    actual: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                      $this: CALL .<get-valueParameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
                        $receiver: GET_VAR it type=kotlin.reflect.KFunction2<kotlin.Int, kotlin.Array<out kotlin.Any>, kotlin.Unit> operator=null
            CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KFunction2<kotlin.Int, kotlin.Array<out kotlin.Any>, kotlin.Unit>) -> kotlin.Unit operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
