MODULE <test-module>
  FILE /parameterNamesAndNullability.kt
    FUN public fun lambda(): kotlin.Unit
      BLOCK_BODY
        VAR val f: (kotlin.Int, kotlin.String?) -> kotlin.Unit
          BLOCK type=(kotlin.Int, kotlin.String?) -> kotlin.Unit operator=LAMBDA
            FUN local final fun <anonymous>(/*0*/ x: kotlin.Int, /*1*/ y: kotlin.String?): kotlin.Unit
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<anonymous>
            CALLABLE_REFERENCE <anonymous> type=(kotlin.Int, kotlin.String?) -> kotlin.Unit operator=LAMBDA
        VAR val g: kotlin.reflect.KFunction<kotlin.Unit>
          BLOCK type=kotlin.reflect.KFunction<kotlin.Unit> operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.reflect.KFunction<kotlin.Unit>?
              CALL .reflect type=kotlin.reflect.KFunction<kotlin.Unit>? operator=null
                $receiver: GET_VAR f type=(kotlin.Int, kotlin.String?) -> kotlin.Unit operator=null
            WHEN type=kotlin.reflect.KFunction<kotlin.Unit> operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=kotlin.reflect.KFunction<kotlin.Unit>? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR tmp0_notnull type=kotlin.reflect.KFunction<kotlin.Unit>? operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='<anonymous>'
          actual: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
            $this: GET_VAR g type=kotlin.reflect.KFunction<kotlin.Unit> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<kotlin.String> operator=null
            elements: VARARG type=Array<out String> varargElementType=String
              CONST String type=kotlin.String value='x'
              CONST String type=kotlin.String value='y'
          actual: CALL .map type=kotlin.collections.List<kotlin.String?> operator=null
            $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: GET_VAR g type=kotlin.reflect.KFunction<kotlin.Unit> operator=null
            transform: BLOCK type=(kotlin.reflect.KParameter) -> kotlin.String? operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KParameter): kotlin.String?
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-name> type=kotlin.String? operator=GET_PROPERTY
                      $this: GET_VAR it type=kotlin.reflect.KParameter operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KParameter) -> kotlin.String? operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<kotlin.Boolean> operator=null
            elements: VARARG type=Array<out Boolean> varargElementType=Boolean
              CONST Boolean type=kotlin.Boolean value='false'
              CONST Boolean type=kotlin.Boolean value='true'
          actual: CALL .map type=kotlin.collections.List<kotlin.Boolean> operator=null
            $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: GET_VAR g type=kotlin.reflect.KFunction<kotlin.Unit> operator=null
            transform: BLOCK type=(kotlin.reflect.KParameter) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KParameter): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-isMarkedNullable> type=kotlin.Boolean operator=GET_PROPERTY
                      $this: CALL .<get-type> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KParameter operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KParameter) -> kotlin.Boolean operator=LAMBDA
    FUN public fun funExpr(): kotlin.Unit
      BLOCK_BODY
        VAR val f: (kotlin.Int, kotlin.String?) -> kotlin.Unit
          BLOCK type=(kotlin.Int, kotlin.String?) -> kotlin.Unit operator=ANONYMOUS_FUNCTION
            FUN local final fun <no name provided>(/*0*/ x: kotlin.Int, /*1*/ y: kotlin.String?): kotlin.Unit
              BLOCK_BODY
            CALLABLE_REFERENCE <no name provided> type=(kotlin.Int, kotlin.String?) -> kotlin.Unit operator=ANONYMOUS_FUNCTION
        VAR val g: kotlin.reflect.KFunction<kotlin.Unit>
          BLOCK type=kotlin.reflect.KFunction<kotlin.Unit> operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.reflect.KFunction<kotlin.Unit>?
              CALL .reflect type=kotlin.reflect.KFunction<kotlin.Unit>? operator=null
                $receiver: GET_VAR f type=(kotlin.Int, kotlin.String?) -> kotlin.Unit operator=null
            WHEN type=kotlin.reflect.KFunction<kotlin.Unit> operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=kotlin.reflect.KFunction<kotlin.Unit>? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR tmp0_notnull type=kotlin.reflect.KFunction<kotlin.Unit>? operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST String type=kotlin.String value='<no name provided>'
          actual: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
            $this: GET_VAR g type=kotlin.reflect.KFunction<kotlin.Unit> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<kotlin.String> operator=null
            elements: VARARG type=Array<out String> varargElementType=String
              CONST String type=kotlin.String value='x'
              CONST String type=kotlin.String value='y'
          actual: CALL .map type=kotlin.collections.List<kotlin.String?> operator=null
            $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: GET_VAR g type=kotlin.reflect.KFunction<kotlin.Unit> operator=null
            transform: BLOCK type=(kotlin.reflect.KParameter) -> kotlin.String? operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KParameter): kotlin.String?
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-name> type=kotlin.String? operator=GET_PROPERTY
                      $this: GET_VAR it type=kotlin.reflect.KParameter operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KParameter) -> kotlin.String? operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<kotlin.Boolean> operator=null
            elements: VARARG type=Array<out Boolean> varargElementType=Boolean
              CONST Boolean type=kotlin.Boolean value='false'
              CONST Boolean type=kotlin.Boolean value='true'
          actual: CALL .map type=kotlin.collections.List<kotlin.Boolean> operator=null
            $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
              $this: GET_VAR g type=kotlin.reflect.KFunction<kotlin.Unit> operator=null
            transform: BLOCK type=(kotlin.reflect.KParameter) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KParameter): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-isMarkedNullable> type=kotlin.Boolean operator=GET_PROPERTY
                      $this: CALL .<get-type> type=kotlin.reflect.KType operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KParameter operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KParameter) -> kotlin.Boolean operator=LAMBDA
    FUN public fun extensionFunExpr(): kotlin.Unit
      BLOCK_BODY
        VAR val f: kotlin.String.() -> kotlin.String
          BLOCK type=kotlin.String.() -> kotlin.String operator=ANONYMOUS_FUNCTION
            FUN local final fun kotlin.String.<no name provided>(): kotlin.String
              BLOCK_BODY
                RETURN type=kotlin.Nothing from=<no name provided>
                  $RECEIVER of: <no name provided> type=kotlin.String
            CALLABLE_REFERENCE <no name provided> type=kotlin.String.() -> kotlin.String operator=ANONYMOUS_FUNCTION
        VAR val g: kotlin.reflect.KFunction<kotlin.String>
          BLOCK type=kotlin.reflect.KFunction<kotlin.String> operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.reflect.KFunction<kotlin.String>?
              CALL .reflect type=kotlin.reflect.KFunction<kotlin.String>? operator=null
                $receiver: GET_VAR f type=kotlin.String.() -> kotlin.String operator=null
            WHEN type=kotlin.reflect.KFunction<kotlin.String> operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=kotlin.reflect.KFunction<kotlin.String>? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR tmp0_notnull type=kotlin.reflect.KFunction<kotlin.String>? operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_ENUM_VALUE EXTENSION_RECEIVER type=kotlin.reflect.KParameter.Kind
          actual: CALL .<get-kind> type=kotlin.reflect.KParameter.Kind operator=GET_PROPERTY
            $this: CALL .single type=kotlin.reflect.KParameter operator=null
              $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
                $this: GET_VAR g type=kotlin.reflect.KFunction<kotlin.String> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CONST Null type=kotlin.Nothing? value='null'
          actual: CALL .<get-name> type=kotlin.String? operator=GET_PROPERTY
            $this: CALL .single type=kotlin.reflect.KParameter operator=null
              $receiver: CALL .<get-parameters> type=kotlin.collections.List<kotlin.reflect.KParameter> operator=GET_PROPERTY
                $this: GET_VAR g type=kotlin.reflect.KFunction<kotlin.String> operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .lambda type=kotlin.Unit operator=null
        CALL .funExpr type=kotlin.Unit operator=null
        CALL .extensionFunExpr type=kotlin.Unit operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
