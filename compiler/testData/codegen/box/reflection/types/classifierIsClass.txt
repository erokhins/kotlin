MODULE <test-module>
  FILE /classifierIsClass.kt
    CLASS CLASS Outer
      CONSTRUCTOR public constructor Outer</*0*/ O>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Outer
      CLASS CLASS Nested
        CONSTRUCTOR public constructor Nested()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Nested
      CLASS CLASS Inner
        CONSTRUCTOR public constructor Inner()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Inner
    FUN public fun outer(): Outer<kotlin.String>
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun nested(): Outer.Nested
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun inner(): Outer<kotlin.Int>.Inner
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun array(): kotlin.Array<kotlin.String>
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CLASS_REFERENCE Outer type=kotlin.reflect.KClass<Outer<*>>
          actual: CALL .<get-classifier> type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
            $this: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
              $this: CALLABLE_REFERENCE outer type=kotlin.reflect.KFunction0<Outer<kotlin.String>> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CLASS_REFERENCE Nested type=kotlin.reflect.KClass<Outer.Nested>
          actual: CALL .<get-classifier> type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
            $this: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
              $this: CALLABLE_REFERENCE nested type=kotlin.reflect.KFunction0<Outer.Nested> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CLASS_REFERENCE Inner type=kotlin.reflect.KClass<Outer<*>.Inner>
          actual: CALL .<get-classifier> type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
            $this: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
              $this: CALLABLE_REFERENCE inner type=kotlin.reflect.KFunction0<Outer<kotlin.Int>.Inner> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CLASS_REFERENCE Array type=kotlin.reflect.KClass<kotlin.Array<kotlin.String>>
          actual: CALL .<get-classifier> type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
            $this: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
              $this: CALLABLE_REFERENCE array type=kotlin.reflect.KFunction0<kotlin.Array<kotlin.String>> operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
