MODULE <test-module>
  FILE /typeArguments.kt
    FUN public fun string(): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    CLASS CLASS Fourple
      CONSTRUCTOR public constructor Fourple</*0*/ A, /*1*/ B, /*2*/ C, /*3*/ D>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Fourple
    FUN public fun projections(): Fourple<kotlin.String, in kotlin.String, out kotlin.String, *>
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun array(): kotlin.Array<out kotlin.Number>
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun list(): kotlin.collections.List<kotlin.String>
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val string: kotlin.reflect.KType
          CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: CALLABLE_REFERENCE string type=kotlin.reflect.KFunction0<kotlin.String> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
          actual: CALL .<get-arguments> type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=GET_PROPERTY
            $this: GET_VAR string type=kotlin.reflect.KType operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=null
            elements: VARARG type=Array<out KTypeProjection> varargElementType=KTypeProjection
              CALL .invariant type=kotlin.reflect.KTypeProjection operator=null
                $this: GET_OBJECT Companion type=kotlin.reflect.KTypeProjection.Companion
                type: GET_VAR string type=kotlin.reflect.KType operator=null
              CALL .contravariant type=kotlin.reflect.KTypeProjection operator=null
                $this: GET_OBJECT Companion type=kotlin.reflect.KTypeProjection.Companion
                type: GET_VAR string type=kotlin.reflect.KType operator=null
              CALL .covariant type=kotlin.reflect.KTypeProjection operator=null
                $this: GET_OBJECT Companion type=kotlin.reflect.KTypeProjection.Companion
                type: GET_VAR string type=kotlin.reflect.KType operator=null
              CALL .<get-STAR> type=kotlin.reflect.KTypeProjection operator=GET_PROPERTY
                $this: GET_OBJECT Companion type=kotlin.reflect.KTypeProjection.Companion
          actual: CALL .<get-arguments> type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=GET_PROPERTY
            $this: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
              $this: CALLABLE_REFERENCE projections type=kotlin.reflect.KFunction0<Fourple<kotlin.String, in kotlin.String, out kotlin.String, *>> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<kotlin.reflect.KType?> operator=null
            elements: VARARG type=Array<out KType?> varargElementType=KType?
              GET_VAR string type=kotlin.reflect.KType operator=null
              GET_VAR string type=kotlin.reflect.KType operator=null
              GET_VAR string type=kotlin.reflect.KType operator=null
              CONST Null type=kotlin.Nothing? value='null'
          actual: CALL .map type=kotlin.collections.List<kotlin.reflect.KType?> operator=null
            $receiver: CALL .<get-arguments> type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=GET_PROPERTY
              $this: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                $this: CALLABLE_REFERENCE projections type=kotlin.reflect.KFunction0<Fourple<kotlin.String, in kotlin.String, out kotlin.String, *>> operator=null
            transform: CALLABLE_REFERENCE type type=kotlin.reflect.KProperty1<kotlin.reflect.KTypeProjection, kotlin.reflect.KType?> operator=null
        VAR val outNumber: kotlin.reflect.KTypeProjection
          CALL .single type=kotlin.reflect.KTypeProjection operator=null
            $receiver: CALL .<get-arguments> type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=GET_PROPERTY
              $this: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                $this: CALLABLE_REFERENCE array type=kotlin.reflect.KFunction0<kotlin.Array<out kotlin.Number>> operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_ENUM_VALUE OUT type=kotlin.reflect.KVariance
          actual: CALL .<get-variance> type=kotlin.reflect.KVariance? operator=GET_PROPERTY
            $this: GET_VAR outNumber type=kotlin.reflect.KTypeProjection operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CLASS_REFERENCE Number type=kotlin.reflect.KClass<kotlin.Number>
          actual: BLOCK type=kotlin.reflect.KClassifier? operator=SAFE_CALL
            VAR val tmp0_safe_receiver: kotlin.reflect.KType?
              CALL .<get-type> type=kotlin.reflect.KType? operator=GET_PROPERTY
                $this: GET_VAR outNumber type=kotlin.reflect.KTypeProjection operator=null
            WHEN type=kotlin.reflect.KClassifier? operator=SAFE_CALL
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_safe_receiver type=kotlin.reflect.KType? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CONST Null type=kotlin.Nothing? value='null'
              else: CALL .<get-classifier> type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
                $this: GET_VAR tmp0_safe_receiver type=kotlin.reflect.KType? operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_ENUM_VALUE INVARIANT type=kotlin.reflect.KVariance
          actual: CALL .<get-variance> type=kotlin.reflect.KVariance? operator=GET_PROPERTY
            $this: CALL .single type=kotlin.reflect.KTypeProjection operator=null
              $receiver: CALL .<get-arguments> type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=GET_PROPERTY
                $this: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                  $this: CALLABLE_REFERENCE list type=kotlin.reflect.KFunction0<kotlin.collections.List<kotlin.String>> operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
