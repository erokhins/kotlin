MODULE <test-module>
  FILE /innerGenericArguments.kt
    CLASS CLASS Outer
      CONSTRUCTOR public constructor Outer</*0*/ A, /*1*/ B>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Outer
      CLASS CLASS Inner
        CONSTRUCTOR public constructor Inner</*0*/ C, /*1*/ D>()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Inner
        CLASS CLASS Innermost
          CONSTRUCTOR public constructor Innermost</*0*/ E, /*1*/ F>()
            BLOCK_BODY
              DELEGATING_CONSTRUCTOR_CALL Any
              INSTANCE_INITIALIZER_CALL classDescriptor=Innermost
    FUN public fun foo(): Outer<kotlin.Int, kotlin.Number>.Inner<kotlin.String, kotlin.Float>.Innermost<kotlin.Any, kotlin.Any?>
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val types: kotlin.collections.List<kotlin.reflect.KType>
          CALL .map type=kotlin.collections.List<kotlin.reflect.KType> operator=null
            $receiver: CALL .<get-arguments> type=kotlin.collections.List<kotlin.reflect.KTypeProjection> operator=GET_PROPERTY
              $this: CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
                $this: CALLABLE_REFERENCE foo type=kotlin.reflect.KFunction0<Outer<kotlin.Int, kotlin.Number>.Inner<kotlin.String, kotlin.Float>.Innermost<kotlin.Any, kotlin.Any?>> operator=null
            transform: BLOCK type=(kotlin.reflect.KTypeProjection) -> kotlin.reflect.KType operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KTypeProjection): kotlin.reflect.KType
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    BLOCK type=kotlin.reflect.KType operator=EXCLEXCL
                      VAR val tmp0_notnull: kotlin.reflect.KType?
                        CALL .<get-type> type=kotlin.reflect.KType? operator=GET_PROPERTY
                          $this: GET_VAR it type=kotlin.reflect.KTypeProjection operator=null
                      WHEN type=kotlin.reflect.KType operator=null
                        if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                          arg0: GET_VAR tmp0_notnull type=kotlin.reflect.KType? operator=null
                          arg1: CONST Null type=kotlin.Nothing? value='null'
                        then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                        else: GET_VAR tmp0_notnull type=kotlin.reflect.KType? operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KTypeProjection) -> kotlin.reflect.KType operator=LAMBDA
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .listOf type=kotlin.collections.List<kotlin.reflect.KClass<out kotlin.Any>> operator=null
            elements: VARARG type=Array<out KClass<out Any>> varargElementType=KClass<out Any>
              CLASS_REFERENCE Any type=kotlin.reflect.KClass<kotlin.Any>
              CLASS_REFERENCE Any type=kotlin.reflect.KClass<kotlin.Any>
              CLASS_REFERENCE String type=kotlin.reflect.KClass<kotlin.String>
              CLASS_REFERENCE Float type=kotlin.reflect.KClass<kotlin.Float>
              CLASS_REFERENCE Int type=kotlin.reflect.KClass<kotlin.Int>
              CLASS_REFERENCE Number type=kotlin.reflect.KClass<kotlin.Number>
          actual: CALL .map type=kotlin.collections.List<kotlin.reflect.KClassifier?> operator=null
            $receiver: GET_VAR types type=kotlin.collections.List<kotlin.reflect.KType> operator=null
            transform: BLOCK type=(kotlin.reflect.KType) -> kotlin.reflect.KClassifier? operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KType): kotlin.reflect.KClassifier?
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .<get-classifier> type=kotlin.reflect.KClassifier? operator=GET_PROPERTY
                      $this: GET_VAR it type=kotlin.reflect.KType operator=null
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KType) -> kotlin.reflect.KClassifier? operator=LAMBDA
        CALL .assertFalse type=kotlin.Unit operator=null
          actual: CALL .<get-isMarkedNullable> type=kotlin.Boolean operator=GET_PROPERTY
            $this: CALL .get type=kotlin.reflect.KType operator=GET_ARRAY_ELEMENT
              $this: GET_VAR types type=kotlin.collections.List<kotlin.reflect.KType> operator=null
              index: CONST Int type=kotlin.Int value='0'
        CALL .assertTrue type=kotlin.Unit operator=null
          actual: CALL .<get-isMarkedNullable> type=kotlin.Boolean operator=GET_PROPERTY
            $this: CALL .get type=kotlin.reflect.KType operator=GET_ARRAY_ELEMENT
              $this: GET_VAR types type=kotlin.collections.List<kotlin.reflect.KType> operator=null
              index: CONST Int type=kotlin.Int value='1'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
