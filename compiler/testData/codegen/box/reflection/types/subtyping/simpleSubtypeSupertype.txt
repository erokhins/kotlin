MODULE <test-module>
  FILE /simpleSubtypeSupertype.kt
    FUN public fun check(/*0*/ subCallable: kotlin.reflect.KCallable<*>, /*1*/ superCallable: kotlin.reflect.KCallable<*>, /*2*/ shouldBeSubtype: kotlin.Boolean): kotlin.Unit
      BLOCK_BODY
        VAR val subtype: kotlin.reflect.KType
          CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: GET_VAR subCallable type=kotlin.reflect.KCallable<*> operator=null
        VAR val supertype: kotlin.reflect.KType
          CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: GET_VAR superCallable type=kotlin.reflect.KCallable<*> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: GET_VAR shouldBeSubtype type=kotlin.Boolean operator=null
          then: BLOCK type=kotlin.Unit operator=null
            CALL .assertTrue type=kotlin.Unit operator=null
              actual: CALL .isSubtypeOf type=kotlin.Boolean operator=null
                $receiver: GET_VAR subtype type=kotlin.reflect.KType operator=null
                other: GET_VAR supertype type=kotlin.reflect.KType operator=null
            CALL .assertTrue type=kotlin.Unit operator=null
              actual: CALL .isSupertypeOf type=kotlin.Boolean operator=null
                $receiver: GET_VAR supertype type=kotlin.reflect.KType operator=null
                other: GET_VAR subtype type=kotlin.reflect.KType operator=null
          else: BLOCK type=kotlin.Unit operator=null
            CALL .assertFalse type=kotlin.Unit operator=null
              actual: CALL .isSubtypeOf type=kotlin.Boolean operator=null
                $receiver: GET_VAR subtype type=kotlin.reflect.KType operator=null
                other: GET_VAR supertype type=kotlin.reflect.KType operator=null
            CALL .assertFalse type=kotlin.Unit operator=null
              actual: CALL .isSupertypeOf type=kotlin.Boolean operator=null
                $receiver: GET_VAR supertype type=kotlin.reflect.KType operator=null
                other: GET_VAR subtype type=kotlin.reflect.KType operator=null
    CLASS CLASS O
      CONSTRUCTOR public constructor O()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=O
    CLASS CLASS X
      CONSTRUCTOR public constructor X()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL O
          INSTANCE_INITIALIZER_CALL classDescriptor=X
    FUN public fun any(): kotlin.Any
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun string(): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun nullableString(): kotlin.String?
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun int(): kotlin.Int
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun nothing(): kotlin.Nothing
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun nullableNothing(): kotlin.Nothing?
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun function2(): (kotlin.Any, kotlin.Any) -> kotlin.Any
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun function3(): (kotlin.Any, kotlin.Any, kotlin.Any) -> kotlin.Any
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
          superCallable: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE int type=kotlin.reflect.KFunction0<kotlin.Int> operator=null
          superCallable: CALLABLE_REFERENCE int type=kotlin.reflect.KFunction0<kotlin.Int> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE nothing type=kotlin.reflect.KFunction0<kotlin.Nothing> operator=null
          superCallable: CALLABLE_REFERENCE nothing type=kotlin.reflect.KFunction0<kotlin.Nothing> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE nullableNothing type=kotlin.reflect.KFunction0<kotlin.Nothing?> operator=null
          superCallable: CALLABLE_REFERENCE nullableNothing type=kotlin.reflect.KFunction0<kotlin.Nothing?> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE string type=kotlin.reflect.KFunction0<kotlin.String> operator=null
          superCallable: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE nullableString type=kotlin.reflect.KFunction0<kotlin.String?> operator=null
          superCallable: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='false'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE int type=kotlin.reflect.KFunction0<kotlin.Int> operator=null
          superCallable: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE <init> type=kotlin.reflect.KFunction0<O> operator=null
          superCallable: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE <init> type=kotlin.reflect.KFunction0<X> operator=null
          superCallable: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE nothing type=kotlin.reflect.KFunction0<kotlin.Nothing> operator=null
          superCallable: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE nothing type=kotlin.reflect.KFunction0<kotlin.Nothing> operator=null
          superCallable: CALLABLE_REFERENCE string type=kotlin.reflect.KFunction0<kotlin.String> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE nothing type=kotlin.reflect.KFunction0<kotlin.Nothing> operator=null
          superCallable: CALLABLE_REFERENCE nullableString type=kotlin.reflect.KFunction0<kotlin.String?> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE nullableNothing type=kotlin.reflect.KFunction0<kotlin.Nothing?> operator=null
          superCallable: CALLABLE_REFERENCE nullableString type=kotlin.reflect.KFunction0<kotlin.String?> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE nullableNothing type=kotlin.reflect.KFunction0<kotlin.Nothing?> operator=null
          superCallable: CALLABLE_REFERENCE string type=kotlin.reflect.KFunction0<kotlin.String> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='false'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE string type=kotlin.reflect.KFunction0<kotlin.String> operator=null
          superCallable: CALLABLE_REFERENCE nullableString type=kotlin.reflect.KFunction0<kotlin.String?> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE nullableString type=kotlin.reflect.KFunction0<kotlin.String?> operator=null
          superCallable: CALLABLE_REFERENCE string type=kotlin.reflect.KFunction0<kotlin.String> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='false'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE <init> type=kotlin.reflect.KFunction0<X> operator=null
          superCallable: CALLABLE_REFERENCE <init> type=kotlin.reflect.KFunction0<O> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='true'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE <init> type=kotlin.reflect.KFunction0<O> operator=null
          superCallable: CALLABLE_REFERENCE <init> type=kotlin.reflect.KFunction0<X> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='false'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE int type=kotlin.reflect.KFunction0<kotlin.Int> operator=null
          superCallable: CALLABLE_REFERENCE string type=kotlin.reflect.KFunction0<kotlin.String> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='false'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE string type=kotlin.reflect.KFunction0<kotlin.String> operator=null
          superCallable: CALLABLE_REFERENCE int type=kotlin.reflect.KFunction0<kotlin.Int> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='false'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
          superCallable: CALLABLE_REFERENCE string type=kotlin.reflect.KFunction0<kotlin.String> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='false'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE any type=kotlin.reflect.KFunction0<kotlin.Any> operator=null
          superCallable: CALLABLE_REFERENCE nullableString type=kotlin.reflect.KFunction0<kotlin.String?> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='false'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE function2 type=kotlin.reflect.KFunction0<(kotlin.Any, kotlin.Any) -> kotlin.Any> operator=null
          superCallable: CALLABLE_REFERENCE function3 type=kotlin.reflect.KFunction0<(kotlin.Any, kotlin.Any, kotlin.Any) -> kotlin.Any> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='false'
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE function3 type=kotlin.reflect.KFunction0<(kotlin.Any, kotlin.Any, kotlin.Any) -> kotlin.Any> operator=null
          superCallable: CALLABLE_REFERENCE function2 type=kotlin.reflect.KFunction0<(kotlin.Any, kotlin.Any) -> kotlin.Any> operator=null
          shouldBeSubtype: CONST Boolean type=kotlin.Boolean value='false'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
