MODULE <test-module>
  FILE /K.kt
    FUN public fun string(): kotlin.String
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun nullableString(): kotlin.String?
      BLOCK_BODY
        BLOCK type=kotlin.Nothing operator=EXCLEXCL
          VAR val tmp0_notnull: kotlin.Nothing?
            CONST Null type=kotlin.Nothing? value='null'
          WHEN type=kotlin.Nothing operator=null
            if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
              arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
            then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
            else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun check(/*0*/ subCallable: kotlin.reflect.KCallable<*>, /*1*/ superCallable: kotlin.reflect.KCallable<*>): kotlin.Unit
      BLOCK_BODY
        VAR val subtype: kotlin.reflect.KType
          CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: GET_VAR subCallable type=kotlin.reflect.KCallable<*> operator=null
        VAR val supertype: kotlin.reflect.KType
          CALL .<get-returnType> type=kotlin.reflect.KType operator=GET_PROPERTY
            $this: GET_VAR superCallable type=kotlin.reflect.KCallable<*> operator=null
        CALL .assertTrue type=kotlin.Unit operator=null
          actual: CALL .isSubtypeOf type=kotlin.Boolean operator=null
            $receiver: GET_VAR subtype type=kotlin.reflect.KType operator=null
            other: GET_VAR supertype type=kotlin.reflect.KType operator=null
        CALL .assertTrue type=kotlin.Unit operator=null
          actual: CALL .isSupertypeOf type=kotlin.Boolean operator=null
            $receiver: GET_VAR supertype type=kotlin.reflect.KType operator=null
            other: GET_VAR subtype type=kotlin.reflect.KType operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE string type=kotlin.reflect.KFunction0<kotlin.String> operator=null
          superCallable: CALLABLE_REFERENCE platformString type=kotlin.reflect.KFunction1<J, kotlin.String!> operator=null
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE platformString type=kotlin.reflect.KFunction1<J, kotlin.String!> operator=null
          superCallable: CALLABLE_REFERENCE string type=kotlin.reflect.KFunction0<kotlin.String> operator=null
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE nullableString type=kotlin.reflect.KFunction0<kotlin.String?> operator=null
          superCallable: CALLABLE_REFERENCE platformString type=kotlin.reflect.KFunction1<J, kotlin.String!> operator=null
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE platformString type=kotlin.reflect.KFunction1<J, kotlin.String!> operator=null
          superCallable: CALLABLE_REFERENCE nullableString type=kotlin.reflect.KFunction0<kotlin.String?> operator=null
        CALL .check type=kotlin.Unit operator=null
          subCallable: CALLABLE_REFERENCE platformString type=kotlin.reflect.KFunction1<J, kotlin.String!> operator=null
          superCallable: CALLABLE_REFERENCE platformString type=kotlin.reflect.KFunction1<J, kotlin.String!> operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
