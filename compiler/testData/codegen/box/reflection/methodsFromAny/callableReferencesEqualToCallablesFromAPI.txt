MODULE <test-module>
  FILE /callableReferencesEqualToCallablesFromAPI.kt
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      FUN public final fun foo(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            CONST String type=kotlin.String value='foo'
      PROPERTY public final val bar: kotlin.String = "bar"
        EXPRESSION_BODY
          CONST String type=kotlin.String value='bar'
    FUN public fun checkEqual(/*0*/ x: kotlin.Any, /*1*/ y: kotlin.Any): kotlin.Unit
      BLOCK_BODY
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR x type=kotlin.Any operator=null
          actual: GET_VAR y type=kotlin.Any operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR y type=kotlin.Any operator=null
          actual: GET_VAR x type=kotlin.Any operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .hashCode type=kotlin.Int operator=null
            $this: GET_VAR x type=kotlin.Any operator=null
          actual: CALL .hashCode type=kotlin.Int operator=null
            $this: GET_VAR y type=kotlin.Any operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .checkEqual type=kotlin.Unit operator=null
          x: CALLABLE_REFERENCE foo type=kotlin.reflect.KFunction1<A, kotlin.String> operator=null
          y: CALL .single type=kotlin.reflect.KCallable<*> operator=null
            $receiver: CALL .<get-members> type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
              $this: CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
            predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
                      arg1: CONST String type=kotlin.String value='foo'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
        CALL .checkEqual type=kotlin.Unit operator=null
          x: CALLABLE_REFERENCE bar type=kotlin.reflect.KProperty1<A, kotlin.String> operator=null
          y: CALL .single type=kotlin.reflect.KCallable<*> operator=null
            $receiver: CALL .<get-members> type=kotlin.collections.Collection<kotlin.reflect.KCallable<*>> operator=GET_PROPERTY
              $this: CLASS_REFERENCE A type=kotlin.reflect.KClass<A>
            predicate: BLOCK type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
              FUN local final fun <anonymous>(/*0*/ it: kotlin.reflect.KCallable<*>): kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                      arg0: CALL .<get-name> type=kotlin.String operator=GET_PROPERTY
                        $this: GET_VAR it type=kotlin.reflect.KCallable<*> operator=null
                      arg1: CONST String type=kotlin.String value='bar'
              CALLABLE_REFERENCE <anonymous> type=(kotlin.reflect.KCallable<*>) -> kotlin.Boolean operator=LAMBDA
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
