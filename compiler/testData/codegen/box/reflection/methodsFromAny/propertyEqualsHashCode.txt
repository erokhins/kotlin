MODULE <test-module>
  FILE /propertyEqualsHashCode.kt
    PROPERTY public val top: kotlin.Int = 42
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='42'
    PROPERTY public var top2: kotlin.Int
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='-23'
    PROPERTY public val kotlin.Int.intExt: kotlin.Int
      PROPERTY_GETTER public fun kotlin.Int.<get-intExt>(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=<get-intExt>
            $RECEIVER of: intExt type=kotlin.Int
    PROPERTY public val kotlin.Char.charExt: kotlin.Int
      PROPERTY_GETTER public fun kotlin.Char.<get-charExt>(): kotlin.Int
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=<get-charExt>
            CALL .toInt type=kotlin.Int operator=null
              $this: $RECEIVER of: charExt type=kotlin.Char
    CLASS CLASS A
      CONSTRUCTOR public constructor A(/*0*/ mem: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD mem type=kotlin.Unit operator=null
            receiver: THIS public final class A type=A
            value: GET_VAR mem type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      PROPERTY public final var mem: kotlin.String
        EXPRESSION_BODY
          GET_VAR mem type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS CLASS B
      CONSTRUCTOR public constructor B(/*0*/ mem: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD mem type=kotlin.Unit operator=null
            receiver: THIS public final class B type=B
            value: GET_VAR mem type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      PROPERTY public final var mem: kotlin.String
        EXPRESSION_BODY
          GET_VAR mem type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun checkEqual(/*0*/ x: kotlin.Any, /*1*/ y: kotlin.Any): kotlin.Unit
      BLOCK_BODY
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: GET_VAR x type=kotlin.Any operator=null
          actual: GET_VAR y type=kotlin.Any operator=null
        CALL .assertEquals type=kotlin.Unit operator=null
          expected: CALL .hashCode type=kotlin.Int operator=null
            $this: GET_VAR x type=kotlin.Any operator=null
          actual: CALL .hashCode type=kotlin.Int operator=null
            $this: GET_VAR y type=kotlin.Any operator=null
          message: STRING_CONCATENATION type=kotlin.String
            CONST String type=kotlin.String value='Elements are equal but their hash codes are not: '
            CALL .hashCode type=kotlin.Int operator=null
              $this: GET_VAR x type=kotlin.Any operator=null
            CONST String type=kotlin.String value=' != '
            CALL .hashCode type=kotlin.Int operator=null
              $this: GET_VAR y type=kotlin.Any operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .checkEqual type=kotlin.Unit operator=null
          x: CALLABLE_REFERENCE top type=kotlin.reflect.KProperty0<kotlin.Int> operator=null
          y: CALLABLE_REFERENCE top type=kotlin.reflect.KProperty0<kotlin.Int> operator=null
        CALL .checkEqual type=kotlin.Unit operator=null
          x: CALLABLE_REFERENCE top2 type=kotlin.reflect.KMutableProperty0<kotlin.Int> operator=null
          y: CALLABLE_REFERENCE top2 type=kotlin.reflect.KMutableProperty0<kotlin.Int> operator=null
        CALL .checkEqual type=kotlin.Unit operator=null
          x: CALLABLE_REFERENCE intExt type=kotlin.reflect.KProperty1<kotlin.Int, kotlin.Int> operator=null
          y: CALLABLE_REFERENCE intExt type=kotlin.reflect.KProperty1<kotlin.Int, kotlin.Int> operator=null
        CALL .checkEqual type=kotlin.Unit operator=null
          x: CALLABLE_REFERENCE mem type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
          y: CALLABLE_REFERENCE mem type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
        CALL .assertFalse type=kotlin.Unit operator=null
          actual: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALLABLE_REFERENCE top type=kotlin.reflect.KProperty0<kotlin.Int> operator=null
            arg1: CALLABLE_REFERENCE top2 type=kotlin.reflect.KMutableProperty0<kotlin.Int> operator=null
        CALL .assertFalse type=kotlin.Unit operator=null
          actual: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALLABLE_REFERENCE intExt type=kotlin.reflect.KProperty1<kotlin.Int, kotlin.Int> operator=null
            arg1: CALLABLE_REFERENCE charExt type=kotlin.reflect.KProperty1<kotlin.Char, kotlin.Int> operator=null
        CALL .assertFalse type=kotlin.Unit operator=null
          actual: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
            arg0: CALLABLE_REFERENCE mem type=kotlin.reflect.KMutableProperty1<A, kotlin.String> operator=null
            arg1: CALLABLE_REFERENCE mem type=kotlin.reflect.KMutableProperty1<B, kotlin.String> operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
