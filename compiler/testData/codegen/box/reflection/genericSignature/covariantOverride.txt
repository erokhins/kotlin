MODULE <test-module>
  FILE /covariantOverride.kt
    CLASS INTERFACE A
      FUN public abstract fun foo(): kotlin.collections.Collection<kotlin.Any>
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      FUN public open override /*1*/ fun foo(): kotlin.collections.Collection<kotlin.String>
        BLOCK_BODY
          BLOCK type=kotlin.Nothing operator=EXCLEXCL
            VAR val tmp0_notnull: kotlin.Nothing?
              CONST Null type=kotlin.Nothing? value='null'
            WHEN type=kotlin.Nothing operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: GET_VAR tmp0_notnull type=kotlin.Nothing? operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val clazz: java.lang.Class<B>
          CALL .<get-java> type=java.lang.Class<B> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE B type=kotlin.reflect.KClass<B>
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  CALL .<get-genericReturnType> type=java.lang.reflect.Type! operator=GET_PROPERTY
                    $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                      CALL .first type=java.lang.reflect.Method! operator=null
                        $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Method!>
                          CALL .<get-declaredMethods> type=kotlin.Array<(out) java.lang.reflect.Method!>! operator=GET_PROPERTY
                            $receiver: GET_VAR clazz type=java.lang.Class<B> operator=null
              arg1: CONST String type=kotlin.String value='java.util.Collection<java.lang.String>'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: CALL .filter type=kotlin.collections.List<java.lang.reflect.Method!> operator=null
                  $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Method!>
                    CALL .<get-methods> type=kotlin.Array<(out) java.lang.reflect.Method!>! operator=GET_PROPERTY
                      $receiver: GET_VAR clazz type=java.lang.Class<B> operator=null
                  predicate: BLOCK type=(java.lang.reflect.Method!) -> kotlin.Boolean operator=LAMBDA
                    FUN local final fun <anonymous>(/*0*/ it: java.lang.reflect.Method!): kotlin.Boolean
                      BLOCK_BODY
                        RETURN type=kotlin.Nothing from=<anonymous>
                          CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                            arg0: CALL .<get-name> type=kotlin.String! operator=GET_PROPERTY
                              $receiver: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                                GET_VAR it type=java.lang.reflect.Method! operator=null
                            arg1: CONST String type=kotlin.String value='foo'
                    CALLABLE_REFERENCE <anonymous> type=(java.lang.reflect.Method!) -> kotlin.Boolean operator=LAMBDA
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
