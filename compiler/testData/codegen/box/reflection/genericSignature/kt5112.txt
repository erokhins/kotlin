MODULE <test-module>
  FILE /kt5112.kt
    CLASS CLASS G
      CONSTRUCTOR public constructor G</*0*/ T>(/*0*/ s: T)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD s type=kotlin.Unit operator=null
            receiver: THIS public final class G</*0*/ T> type=test.G<T>
            value: GET_VAR s type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=G
      PROPERTY public final val s: T
        EXPRESSION_BODY
          GET_VAR s type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS INTERFACE ErrorsJvmTrait
      CLASS OBJECT Companion
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Companion
        PROPERTY public final val param: test.G<kotlin.String>
          EXPRESSION_BODY
            CALL .<init> type=test.G<kotlin.String> operator=null
              s: CONST String type=kotlin.String value='STRING'
    CLASS CLASS ErrorsJvmClass
      CONSTRUCTOR public constructor ErrorsJvmClass()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=ErrorsJvmClass
      CLASS OBJECT Companion
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Companion
        PROPERTY @kotlin.jvm.JvmField() public final val param: test.G<kotlin.String>
          EXPRESSION_BODY
            CALL .<init> type=test.G<kotlin.String> operator=null
              s: CONST String type=kotlin.String value='STRING'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val genericTypeInClassObject: java.lang.reflect.Type!
          CALL .getGenericType type=java.lang.reflect.Type! operator=null
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
              CALL .getDeclaredField type=java.lang.reflect.Field! operator=null
                $this: CALL .<get-javaClass> type=java.lang.Class<test.ErrorsJvmTrait.Companion> operator=GET_PROPERTY
                  $receiver: GET_OBJECT Companion type=test.ErrorsJvmTrait.Companion
                p0: CONST String type=kotlin.String value='param'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  GET_VAR genericTypeInClassObject type=java.lang.reflect.Type! operator=null
              arg1: CONST String type=kotlin.String value='test.G<java.lang.String>'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail1: '
              GET_VAR genericTypeInClassObject type=java.lang.reflect.Type! operator=null
        VAR val genericTypeInClass: java.lang.reflect.Type!
          CALL .getGenericType type=java.lang.reflect.Type! operator=null
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Field
              CALL .getField type=java.lang.reflect.Field! operator=null
                $this: CALL .<get-java> type=java.lang.Class<test.ErrorsJvmClass> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE ErrorsJvmClass type=kotlin.reflect.KClass<test.ErrorsJvmClass>
                p0: CONST String type=kotlin.String value='param'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  GET_VAR genericTypeInClass type=java.lang.reflect.Type! operator=null
              arg1: CONST String type=kotlin.String value='test.G<java.lang.String>'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail1: genericTypeInClass'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
