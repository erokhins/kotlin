MODULE <test-module>
  FILE /genericMethodSignature.kt
    CLASS CLASS Z
      CONSTRUCTOR public constructor Z</*0*/ T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Z
    CLASS CLASS TParam
      CONSTRUCTOR public constructor TParam()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=TParam
    CLASS CLASS Zout
      CONSTRUCTOR public constructor Zout</*0*/ out T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Zout
    CLASS CLASS Zin
      CONSTRUCTOR public constructor Zin</*0*/ in T>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Zin
    CLASS CLASS Params
      CONSTRUCTOR public constructor Params(/*0*/ methodIndex: kotlin.Int, /*1*/ paramClass: java.lang.Class<*>, /*2*/ expectedReturnType: kotlin.String, /*3*/ expecedParamType: kotlin.String)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD methodIndex type=kotlin.Unit operator=null
            receiver: THIS public final class Params type=Params
            value: GET_VAR methodIndex type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD paramClass type=kotlin.Unit operator=null
            receiver: THIS public final class Params type=Params
            value: GET_VAR paramClass type=java.lang.Class<*> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD expectedReturnType type=kotlin.Unit operator=null
            receiver: THIS public final class Params type=Params
            value: GET_VAR expectedReturnType type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD expecedParamType type=kotlin.Unit operator=null
            receiver: THIS public final class Params type=Params
            value: GET_VAR expecedParamType type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Params
      PROPERTY public final val methodIndex: kotlin.Int
        EXPRESSION_BODY
          GET_VAR methodIndex type=kotlin.Int operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val paramClass: java.lang.Class<*>
        EXPRESSION_BODY
          GET_VAR paramClass type=java.lang.Class<*> operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val expectedReturnType: kotlin.String
        EXPRESSION_BODY
          GET_VAR expectedReturnType type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val expecedParamType: kotlin.String
        EXPRESSION_BODY
          GET_VAR expecedParamType type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS CLASS Test
      CONSTRUCTOR public constructor Test</*0*/ T, /*1*/ X, /*2*/ in Y>()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=Test
      FUN public final fun test1(/*0*/ p: T): T?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=test1
            CONST Null type=kotlin.Nothing? value='null'
      FUN public final fun test2(/*0*/ p: Z<T>): Z<T>?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=test2
            CONST Null type=kotlin.Nothing? value='null'
      FUN public final fun test3(/*0*/ p: Z<kotlin.String>): Z<kotlin.String>?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=test3
            CONST Null type=kotlin.Nothing? value='null'
      FUN public final fun test4(/*0*/ p: X): Zout<out kotlin.String>?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=test4
            CONST Null type=kotlin.Nothing? value='null'
      FUN public final fun test5(/*0*/ p: Y): Zin<in TParam>?
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=test5
            CONST Null type=kotlin.Nothing? value='null'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val clz: java.lang.Class<Test<*, *, *>>
          CALL .<get-java> type=java.lang.Class<Test<*, *, *>> operator=GET_PROPERTY
            $receiver: CLASS_REFERENCE Test type=kotlin.reflect.KClass<Test<*, *, *>>
        VAR val params: kotlin.collections.List<Params>
          CALL .listOf type=kotlin.collections.List<Params> operator=null
            elements: VARARG type=Array<out Params> varargElementType=Params
              CALL .<init> type=Params operator=null
                methodIndex: CONST Int type=kotlin.Int value='1'
                paramClass: CALL .<get-java> type=java.lang.Class<kotlin.Any> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE Any type=kotlin.reflect.KClass<kotlin.Any>
                expectedReturnType: CONST String type=kotlin.String value='T'
                expecedParamType: CONST String type=kotlin.String value='T'
              CALL .<init> type=Params operator=null
                methodIndex: CONST Int type=kotlin.Int value='2'
                paramClass: CALL .<get-java> type=java.lang.Class<Z<*>> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE Z type=kotlin.reflect.KClass<Z<*>>
                expectedReturnType: CONST String type=kotlin.String value='Z<T>'
                expecedParamType: CONST String type=kotlin.String value='Z<T>'
              CALL .<init> type=Params operator=null
                methodIndex: CONST Int type=kotlin.Int value='3'
                paramClass: CALL .<get-java> type=java.lang.Class<Z<*>> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE Z type=kotlin.reflect.KClass<Z<*>>
                expectedReturnType: CONST String type=kotlin.String value='Z<java.lang.String>'
                expecedParamType: CONST String type=kotlin.String value='Z<java.lang.String>'
              CALL .<init> type=Params operator=null
                methodIndex: CONST Int type=kotlin.Int value='4'
                paramClass: CALL .<get-java> type=java.lang.Class<kotlin.Any> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE Any type=kotlin.reflect.KClass<kotlin.Any>
                expectedReturnType: CONST String type=kotlin.String value='Zout<java.lang.String>'
                expecedParamType: CONST String type=kotlin.String value='X'
              CALL .<init> type=Params operator=null
                methodIndex: CONST Int type=kotlin.Int value='5'
                paramClass: CALL .<get-java> type=java.lang.Class<kotlin.Any> operator=GET_PROPERTY
                  $receiver: CLASS_REFERENCE Any type=kotlin.reflect.KClass<kotlin.Any>
                expectedReturnType: CONST String type=kotlin.String value='Zin<TParam>'
                expecedParamType: CONST String type=kotlin.String value='Y'
        VAR var result: kotlin.String
          CONST String type=kotlin.String value=''
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.Iterator<Params>
            CALL .iterator type=kotlin.collections.Iterator<Params> operator=FOR_LOOP_ITERATOR
              $this: GET_VAR params type=kotlin.collections.List<Params> operator=null
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<Params> operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val p: Params
                CALL .next type=Params operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.Iterator<Params> operator=null
              BLOCK type=kotlin.Unit operator=null
                VAR val fail: kotlin.String
                  CALL .test type=kotlin.String operator=null
                    clazz: GET_VAR clz type=java.lang.Class<Test<*, *, *>> operator=null
                    methodIndex: CALL .<get-methodIndex> type=kotlin.Int operator=GET_PROPERTY
                      $this: GET_VAR p type=Params operator=null
                    paramClass: CALL .<get-paramClass> type=java.lang.Class<*> operator=GET_PROPERTY
                      $this: GET_VAR p type=Params operator=null
                    expectedReturn: CALL .<get-expectedReturnType> type=kotlin.String operator=GET_PROPERTY
                      $this: GET_VAR p type=Params operator=null
                    expectedParam: CALL .<get-expecedParamType> type=kotlin.String operator=GET_PROPERTY
                      $this: GET_VAR p type=Params operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                    arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                      arg0: GET_VAR fail type=kotlin.String operator=null
                      arg1: CONST String type=kotlin.String value='OK'
                  then: BLOCK type=kotlin.Unit operator=null
                    SET_VAR result type=kotlin.Unit operator=PLUSEQ
                      CALL .plus type=kotlin.String operator=PLUSEQ
                        $this: GET_VAR result type=kotlin.String operator=PLUSEQ
                        other: CALL .plus type=kotlin.String operator=PLUS
                          $this: GET_VAR fail type=kotlin.String operator=null
                          other: CONST String type=kotlin.String value='
'
        RETURN type=kotlin.Nothing from=box
          WHEN type=kotlin.String operator=IF
            if: CALL .isEmpty type=kotlin.Boolean operator=null
              $receiver: GET_VAR result type=kotlin.String operator=null
            then: CONST String type=kotlin.String value='OK'
            else: GET_VAR result type=kotlin.String operator=null
    FUN public fun test(/*0*/ clazz: java.lang.Class<*>, /*1*/ methodIndex: kotlin.Int, /*2*/ paramClass: java.lang.Class<*>, /*3*/ expectedReturn: kotlin.String, /*4*/ expectedParam: kotlin.String): kotlin.String
      BLOCK_BODY
        VAR val method: java.lang.reflect.Method
          BLOCK type=java.lang.reflect.Method operator=EXCLEXCL
            VAR val tmp0_notnull: java.lang.reflect.Method!
              CALL .getDeclaredMethod type=java.lang.reflect.Method! operator=null
                $this: GET_VAR clazz type=java.lang.Class<*> operator=null
                p0: STRING_CONCATENATION type=kotlin.String
                  CONST String type=kotlin.String value='test'
                  GET_VAR methodIndex type=kotlin.Int operator=null
                p1: VARARG type=(kotlin.Array<(java.lang.Class<*>..java.lang.Class<*>?)>..kotlin.Array<out (java.lang.Class<*>..java.lang.Class<*>?)>?) varargElementType=(java.lang.Class<*>..java.lang.Class<*>?)
                  GET_VAR paramClass type=java.lang.Class<*> operator=null
            WHEN type=java.lang.reflect.Method operator=null
              if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                arg0: GET_VAR tmp0_notnull type=java.lang.reflect.Method! operator=null
                arg1: CONST Null type=kotlin.Nothing? value='null'
              then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
              else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                GET_VAR tmp0_notnull type=java.lang.reflect.Method! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  CALL .getGenericReturnType type=java.lang.reflect.Type! operator=null
                    $this: GET_VAR method type=java.lang.reflect.Method operator=null
              arg1: GET_VAR expectedReturn type=kotlin.String operator=null
          then: RETURN type=kotlin.Nothing from=test
            CALL .plus type=kotlin.String operator=PLUS
              $this: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='fail'
                GET_VAR methodIndex type=kotlin.Int operator=null
                CONST String type=kotlin.String value=': '
              other: CALL .getGenericReturnType type=java.lang.reflect.Type! operator=null
                $this: GET_VAR method type=java.lang.reflect.Method operator=null
        VAR val test1Param: java.lang.reflect.Type!
          CALL .get type=java.lang.reflect.Type! operator=GET_ARRAY_ELEMENT
            $this: BLOCK type=kotlin.Array<(out) java.lang.reflect.Type!> operator=EXCLEXCL
              VAR val tmp1_notnull: kotlin.Array<(out) java.lang.reflect.Type!>!
                CALL .getGenericParameterTypes type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=null
                  $this: GET_VAR method type=java.lang.reflect.Method operator=null
              WHEN type=kotlin.Array<(out) java.lang.reflect.Type!> operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp1_notnull type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Type!>
                  GET_VAR tmp1_notnull type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=null
            index: CONST Int type=kotlin.Int value='0'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  GET_VAR test1Param type=java.lang.reflect.Type! operator=null
              arg1: GET_VAR expectedParam type=kotlin.String operator=null
          then: RETURN type=kotlin.Nothing from=test
            CALL .plus type=kotlin.String operator=PLUS
              $this: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='fail'
                GET_VAR methodIndex type=kotlin.Int operator=null
                CONST String type=kotlin.String value='_param: '
              other: GET_VAR test1Param type=java.lang.reflect.Type! operator=null
        RETURN type=kotlin.Nothing from=test
          CONST String type=kotlin.String value='OK'
