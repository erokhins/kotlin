MODULE <test-module>
  FILE /K.kt
    CLASS CLASS B
      CONSTRUCTOR public constructor B</*0*/ T>(/*0*/ value: T)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD value type=kotlin.Unit operator=null
            receiver: THIS public final class B</*0*/ T> type=B<T>
            value: GET_VAR value type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=B
      PROPERTY public final val value: T
        EXPRESSION_BODY
          GET_VAR value type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    CLASS INTERFACE A
      FUN public open fun </*0*/ T, /*1*/ L> test1(/*0*/ p: T, /*1*/ z: L): T
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=test1
            GET_VAR p type=T operator=null
      FUN public open fun </*0*/ L> test2(/*0*/ p: L): A<T, Y>
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=test2
            THIS public interface A</*0*/ T, /*1*/ Y : B<T>> type=A<T, Y>
    CLASS CLASS X
      CONSTRUCTOR public constructor X</*0*/ T, /*1*/ Y : B<T>>(/*0*/ p1: T, /*1*/ p2: Y)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD p1 type=kotlin.Unit operator=null
            receiver: THIS public final class X</*0*/ T, /*1*/ Y : B<T>> : A<T, Y> type=X<T, Y>
            value: GET_VAR p1 type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          SET_BACKING_FIELD p2 type=kotlin.Unit operator=null
            receiver: THIS public final class X</*0*/ T, /*1*/ Y : B<T>> : A<T, Y> type=X<T, Y>
            value: GET_VAR p2 type=Y operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=X
      PROPERTY public final val p1: T
        EXPRESSION_BODY
          GET_VAR p1 type=T operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY public final val p2: Y
        EXPRESSION_BODY
          GET_VAR p2 type=Y operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val test1: kotlin.Int
          CALL .test1 type=kotlin.Int operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR test1 type=kotlin.Int operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='fail 1: '
              GET_VAR test1 type=kotlin.Int operator=null
              CONST String type=kotlin.String value=' != 1'
        VAR val test2: X<kotlin.String, B<kotlin.String>>
          TYPE_OP operator=CAST typeOperand=X<kotlin.String, B<kotlin.String>>
            CALL .test2 type=A<kotlin.String!, B<kotlin.String!>!>! operator=null
        RETURN type=kotlin.Nothing from=box
          CALL .plus type=kotlin.String operator=PLUS
            $this: CALL .<get-p1> type=kotlin.String operator=GET_PROPERTY
              $this: GET_VAR test2 type=X<kotlin.String, B<kotlin.String>> operator=null
            other: CALL .<get-value> type=kotlin.String operator=GET_PROPERTY
              $this: CALL .<get-p2> type=B<kotlin.String> operator=GET_PROPERTY
                $this: GET_VAR test2 type=X<kotlin.String, B<kotlin.String>> operator=null
