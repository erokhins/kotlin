MODULE <test-module>
  FILE /kt6106.kt
    CLASS CLASS B
      CONSTRUCTOR public constructor B()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=B
    CLASS CLASS A
      CONSTRUCTOR public constructor A()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=A
      CLASS OBJECT Companion
        CONSTRUCTOR private constructor Companion()
          BLOCK_BODY
            DELEGATING_CONSTRUCTOR_CALL Any
            INSTANCE_INITIALIZER_CALL classDescriptor=Companion
        FUN @kotlin.jvm.JvmStatic() public final fun </*0*/ T : test.B> a(/*0*/ s: T): T
          BLOCK_BODY
            RETURN type=kotlin.Nothing from=a
              GET_VAR s type=T operator=null
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val method: java.lang.reflect.Method!
          CALL .getDeclaredMethod type=java.lang.reflect.Method! operator=null
            $this: CALL .<get-java> type=java.lang.Class<test.A> operator=GET_PROPERTY
              $receiver: CLASS_REFERENCE A type=kotlin.reflect.KClass<test.A>
            p0: CONST String type=kotlin.String value='a'
            p1: VARARG type=(kotlin.Array<(java.lang.Class<*>..java.lang.Class<*>?)>..kotlin.Array<out (java.lang.Class<*>..java.lang.Class<*>?)>?) varargElementType=(java.lang.Class<*>..java.lang.Class<*>?)
              CALL .<get-java> type=java.lang.Class<test.B> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE B type=kotlin.reflect.KClass<test.B>
        VAR val genericParameterTypes: kotlin.Array<(out) java.lang.reflect.Type!>!
          CALL .getGenericParameterTypes type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=null
            $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
              GET_VAR method type=java.lang.reflect.Method! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-size> type=kotlin.Int operator=GET_PROPERTY
                $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.reflect.Type!>
                  TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Type!>
                    GET_VAR genericParameterTypes type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=null
              arg1: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Wrong number of generic parameters'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  CALL .get type=java.lang.reflect.Type! operator=GET_ARRAY_ELEMENT
                    $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.reflect.Type!>
                      TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Type!>
                        GET_VAR genericParameterTypes type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=null
                    index: CONST Int type=kotlin.Int value='0'
              arg1: CONST String type=kotlin.String value='T'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Wrong parameter type '
              CALL .toString type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  CALL .get type=java.lang.reflect.Type! operator=GET_ARRAY_ELEMENT
                    $this: TYPE_OP operator=IMPLICIT_CAST typeOperand=kotlin.Array<java.lang.reflect.Type!>
                      TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=kotlin.Array<out java.lang.reflect.Type!>
                        GET_VAR genericParameterTypes type=kotlin.Array<(out) java.lang.reflect.Type!>! operator=null
                    index: CONST Int type=kotlin.Int value='0'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Type
                  CALL .getGenericReturnType type=java.lang.reflect.Type! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                      GET_VAR method type=java.lang.reflect.Method! operator=null
              arg1: CONST String type=kotlin.String value='T'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='Wrong return type '
              CALL .getGenericReturnType type=java.lang.reflect.Type! operator=null
                $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                  GET_VAR method type=java.lang.reflect.Method! operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
