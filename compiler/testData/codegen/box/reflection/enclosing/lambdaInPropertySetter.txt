MODULE <test-module>
  FILE /lambdaInPropertySetter.kt
    PROPERTY public var _l: kotlin.Any
      EXPRESSION_BODY
        CONST String type=kotlin.String value=''
    PROPERTY public var l: kotlin.Any
      PROPERTY_GETTER public fun <get-l>(): kotlin.Any
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=<get-l>
            CALL .<get-_l> type=kotlin.Any operator=GET_PROPERTY
      PROPERTY_SETTER public fun <set-l>(/*0*/ v: kotlin.Any): kotlin.Unit
        BLOCK_BODY
          CALL .<set-_l> type=kotlin.Unit operator=EQ
            <set-?>: BLOCK type=() -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CALL .<set-l> type=kotlin.Unit operator=EQ
          v: CONST String type=kotlin.String value=''
        VAR val enclosingMethod: java.lang.reflect.Method!
          CALL .getEnclosingMethod type=java.lang.reflect.Method! operator=null
            $this: CALL .<get-javaClass> type=java.lang.Class<kotlin.Any> operator=GET_PROPERTY
              $receiver: CALL .<get-l> type=kotlin.Any operator=GET_PROPERTY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.String? operator=SAFE_CALL
                VAR val tmp0_safe_receiver: java.lang.reflect.Method!
                  GET_VAR enclosingMethod type=java.lang.reflect.Method! operator=null
                WHEN type=kotlin.String? operator=SAFE_CALL
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp0_safe_receiver type=java.lang.reflect.Method! operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Null type=kotlin.Nothing? value='null'
                  else: CALL .getName type=kotlin.String! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                      GET_VAR tmp0_safe_receiver type=java.lang.reflect.Method! operator=null
              arg1: CONST String type=kotlin.String value='setL'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='method: '
              GET_VAR enclosingMethod type=java.lang.reflect.Method! operator=null
        VAR val enclosingClass: kotlin.String!
          CALL .getName type=kotlin.String! operator=null
            $this: BLOCK type=java.lang.Class<*> operator=EXCLEXCL
              VAR val tmp1_notnull: java.lang.Class<*>!
                CALL .getEnclosingClass type=java.lang.Class<*>! operator=null
                  $this: CALL .<get-javaClass> type=java.lang.Class<kotlin.Any> operator=GET_PROPERTY
                    $receiver: CALL .<get-l> type=kotlin.Any operator=GET_PROPERTY
              WHEN type=java.lang.Class<*> operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp1_notnull type=java.lang.Class<*>! operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
                  GET_VAR tmp1_notnull type=java.lang.Class<*>! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR enclosingClass type=kotlin.String! operator=null
              arg1: CONST String type=kotlin.String value='LambdaInPropertySetterKt'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='enclosing class: '
              GET_VAR enclosingClass type=kotlin.String! operator=null
        VAR val declaringClass: java.lang.Class<*>!
          CALL .getDeclaringClass type=java.lang.Class<*>! operator=null
            $this: CALL .<get-javaClass> type=java.lang.Class<kotlin.Any> operator=GET_PROPERTY
              $receiver: CALL .<get-l> type=kotlin.Any operator=GET_PROPERTY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR declaringClass type=java.lang.Class<*>! operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='anonymous function has a declaring class: '
              GET_VAR declaringClass type=java.lang.Class<*>! operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
