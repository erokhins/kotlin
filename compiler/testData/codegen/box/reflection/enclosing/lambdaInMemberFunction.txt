MODULE <test-module>
  FILE /lambdaInMemberFunction.kt
    CLASS CLASS C
      CONSTRUCTOR public constructor C()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      FUN public final fun foo(): kotlin.Any
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=foo
            BLOCK type=() -> kotlin.Unit operator=LAMBDA
              FUN local final fun <anonymous>(): kotlin.Unit
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
              CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val javaClass: java.lang.Class<kotlin.Any>
          CALL .<get-javaClass> type=java.lang.Class<kotlin.Any> operator=GET_PROPERTY
            $receiver: CALL .foo type=kotlin.Any operator=null
              $this: CALL .<init> type=C operator=null
        VAR val enclosingMethod: java.lang.reflect.Method!
          CALL .getEnclosingMethod type=java.lang.reflect.Method! operator=null
            $this: GET_VAR javaClass type=java.lang.Class<kotlin.Any> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.String? operator=SAFE_CALL
                VAR val tmp0_safe_receiver: java.lang.reflect.Method!
                  GET_VAR enclosingMethod type=java.lang.reflect.Method! operator=null
                WHEN type=kotlin.String? operator=SAFE_CALL
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp0_safe_receiver type=java.lang.reflect.Method! operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Null type=kotlin.Nothing? value='null'
                  else: CALL .getName type=kotlin.String! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                      GET_VAR tmp0_safe_receiver type=java.lang.reflect.Method! operator=null
              arg1: CONST String type=kotlin.String value='foo'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='method: '
              GET_VAR enclosingMethod type=java.lang.reflect.Method! operator=null
        VAR val enclosingClass: java.lang.Class<*>!
          CALL .getEnclosingClass type=java.lang.Class<*>! operator=null
            $this: GET_VAR javaClass type=java.lang.Class<kotlin.Any> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.String? operator=SAFE_CALL
                VAR val tmp1_safe_receiver: java.lang.Class<*>!
                  GET_VAR enclosingClass type=java.lang.Class<*>! operator=null
                WHEN type=kotlin.String? operator=SAFE_CALL
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp1_safe_receiver type=java.lang.Class<*>! operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Null type=kotlin.Nothing? value='null'
                  else: CALL .getName type=kotlin.String! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
                      GET_VAR tmp1_safe_receiver type=java.lang.Class<*>! operator=null
              arg1: CONST String type=kotlin.String value='C'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='enclosing class: '
              GET_VAR enclosingClass type=java.lang.Class<*>! operator=null
        VAR val declaringClass: java.lang.Class<*>!
          CALL .getDeclaringClass type=java.lang.Class<*>! operator=null
            $this: GET_VAR javaClass type=java.lang.Class<kotlin.Any> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR declaringClass type=java.lang.Class<*>! operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='anonymous function has a declaring class: '
              GET_VAR declaringClass type=java.lang.Class<*>! operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
