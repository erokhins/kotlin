MODULE <test-module>
  FILE /lambdaInLocalClassSuperCall.kt
    CLASS CLASS C
      CONSTRUCTOR public constructor C(/*0*/ a: kotlin.Any)
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD a type=kotlin.Unit operator=null
            receiver: THIS public open class C type=C
            value: GET_VAR a type=kotlin.Any operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=C
      PROPERTY public final val a: kotlin.Any
        EXPRESSION_BODY
          GET_VAR a type=kotlin.Any operator=INITIALIZE_PROPERTY_FROM_PARAMETER
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        CLASS CLASS L
          CONSTRUCTOR public constructor L()
            BLOCK_BODY
              DELEGATING_CONSTRUCTOR_CALL C
                a: BLOCK type=() -> kotlin.Unit operator=LAMBDA
                  FUN local final fun <anonymous>(): kotlin.Unit
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from=<anonymous>
                  CALLABLE_REFERENCE <anonymous> type=() -> kotlin.Unit operator=LAMBDA
              INSTANCE_INITIALIZER_CALL classDescriptor=L
        VAR val l: box.L
          CALL .<init> type=box.L operator=null
        VAR val javaClass: java.lang.Class<kotlin.Any>
          CALL .<get-javaClass> type=java.lang.Class<kotlin.Any> operator=GET_PROPERTY
            $receiver: CALL .<get-a> type=kotlin.Any operator=GET_PROPERTY
              $this: GET_VAR l type=box.L operator=null
        VAR val enclosingMethod: kotlin.String!
          CALL .getName type=kotlin.String! operator=null
            $this: BLOCK type=java.lang.reflect.Constructor<*> operator=EXCLEXCL
              VAR val tmp0_notnull: java.lang.reflect.Constructor<*>!
                CALL .getEnclosingConstructor type=java.lang.reflect.Constructor<*>! operator=null
                  $this: GET_VAR javaClass type=java.lang.Class<kotlin.Any> operator=null
              WHEN type=java.lang.reflect.Constructor<*> operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp0_notnull type=java.lang.reflect.Constructor<*>! operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Constructor<*>
                  GET_VAR tmp0_notnull type=java.lang.reflect.Constructor<*>! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR enclosingMethod type=kotlin.String! operator=null
              arg1: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='LambdaInLocalClassSuperCallKt'
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='box'
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='L'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='ctor: '
              GET_VAR enclosingMethod type=kotlin.String! operator=null
        VAR val enclosingClass: kotlin.String!
          CALL .getName type=kotlin.String! operator=null
            $this: BLOCK type=java.lang.Class<*> operator=EXCLEXCL
              VAR val tmp1_notnull: java.lang.Class<*>!
                CALL .getEnclosingClass type=java.lang.Class<*>! operator=null
                  $this: GET_VAR javaClass type=java.lang.Class<kotlin.Any> operator=null
              WHEN type=java.lang.Class<*> operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp1_notnull type=java.lang.Class<*>! operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
                  GET_VAR tmp1_notnull type=java.lang.Class<*>! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR enclosingClass type=kotlin.String! operator=null
              arg1: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='LambdaInLocalClassSuperCallKt'
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='box'
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='L'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='enclosing class: '
              GET_VAR enclosingClass type=kotlin.String! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR enclosingMethod type=kotlin.String! operator=null
              arg1: GET_VAR enclosingClass type=kotlin.String! operator=null
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              GET_VAR enclosingClass type=kotlin.String! operator=null
              CONST String type=kotlin.String value=' != '
              GET_VAR enclosingMethod type=kotlin.String! operator=null
        VAR val declaringClass: java.lang.Class<*>!
          CALL .getDeclaringClass type=java.lang.Class<*>! operator=null
            $this: GET_VAR javaClass type=java.lang.Class<kotlin.Any> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR declaringClass type=java.lang.Class<*>! operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='anonymous function has a declaring class: '
              GET_VAR declaringClass type=java.lang.Class<*>! operator=null
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
