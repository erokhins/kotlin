MODULE <test-module>
  FILE /objectInLambda.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val objectInLambda: box.<anonymous>.<no name provided>
          CALL .invoke type=box.<anonymous>.<no name provided> operator=null
            $this: BLOCK type=() -> box.<anonymous>.<no name provided> operator=LAMBDA
              FUN local final fun <anonymous>(): box.<anonymous>.<no name provided>
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from=<anonymous>
                    BLOCK type=box.<anonymous>.<no name provided> operator=OBJECT_LITERAL
                      CLASS CLASS <no name provided>
                        CONSTRUCTOR public constructor <no name provided>()
                          BLOCK_BODY
                            DELEGATING_CONSTRUCTOR_CALL Any
                            INSTANCE_INITIALIZER_CALL classDescriptor=<no name provided>
                      CALL .<init> type=box.<anonymous>.<no name provided> operator=OBJECT_LITERAL
              CALLABLE_REFERENCE <anonymous> type=() -> box.<anonymous>.<no name provided> operator=LAMBDA
        VAR val enclosingMethod: java.lang.reflect.Method!
          CALL .getEnclosingMethod type=java.lang.reflect.Method! operator=null
            $this: CALL .<get-javaClass> type=java.lang.Class<box.<anonymous>.<no name provided>> operator=GET_PROPERTY
              $receiver: GET_VAR objectInLambda type=box.<anonymous>.<no name provided> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: BLOCK type=kotlin.String? operator=SAFE_CALL
                VAR val tmp0_safe_receiver: java.lang.reflect.Method!
                  GET_VAR enclosingMethod type=java.lang.reflect.Method! operator=null
                WHEN type=kotlin.String? operator=SAFE_CALL
                  if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                    arg0: GET_VAR tmp0_safe_receiver type=java.lang.reflect.Method! operator=null
                    arg1: CONST Null type=kotlin.Nothing? value='null'
                  then: CONST Null type=kotlin.Nothing? value='null'
                  else: CALL .getName type=kotlin.String! operator=null
                    $this: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.reflect.Method
                      GET_VAR tmp0_safe_receiver type=java.lang.reflect.Method! operator=null
              arg1: CONST String type=kotlin.String value='invoke'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='method: '
              GET_VAR enclosingMethod type=java.lang.reflect.Method! operator=null
        VAR val enclosingClass: kotlin.String!
          CALL .getName type=kotlin.String! operator=null
            $this: BLOCK type=java.lang.Class<*> operator=EXCLEXCL
              VAR val tmp1_notnull: java.lang.Class<*>!
                CALL .getEnclosingClass type=java.lang.Class<*>! operator=null
                  $this: CALL .<get-javaClass> type=java.lang.Class<box.<anonymous>.<no name provided>> operator=GET_PROPERTY
                    $receiver: GET_VAR objectInLambda type=box.<anonymous>.<no name provided> operator=null
              WHEN type=java.lang.Class<*> operator=null
                if: CALL .EQEQ type=kotlin.Boolean operator=EQEQ
                  arg0: GET_VAR tmp1_notnull type=java.lang.Class<*>! operator=null
                  arg1: CONST Null type=kotlin.Nothing? value='null'
                then: CALL .THROW_NPE type=kotlin.Nothing operator=EXCLEXCL
                else: TYPE_OP operator=IMPLICIT_NOTNULL typeOperand=java.lang.Class<*>
                  GET_VAR tmp1_notnull type=java.lang.Class<*>! operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR enclosingClass type=kotlin.String! operator=null
              arg1: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='ObjectInLambdaKt'
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='box'
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='objectInLambda'
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='1'
          then: RETURN type=kotlin.Nothing from=box
            STRING_CONCATENATION type=kotlin.String
              CONST String type=kotlin.String value='enclosing class: '
              GET_VAR enclosingClass type=kotlin.String! operator=null
        VAR val declaringClass: java.lang.Class<*>!
          CALL .getDeclaringClass type=java.lang.Class<*>! operator=null
            $this: CALL .<get-javaClass> type=java.lang.Class<box.<anonymous>.<no name provided>> operator=GET_PROPERTY
              $receiver: GET_VAR objectInLambda type=box.<anonymous>.<no name provided> operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR declaringClass type=java.lang.Class<*>! operator=null
              arg1: CONST Null type=kotlin.Nothing? value='null'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='anonymous object has a declaring class'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
