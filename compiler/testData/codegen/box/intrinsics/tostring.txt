MODULE <test-module>
  FILE /tostring.kt
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: CALL .toByte type=kotlin.Byte operator=null
                  $this: CONST Int type=kotlin.Int value='239'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Byte?
                  CALL .toByte type=kotlin.Byte operator=null
                    $this: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='byte failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: CALL .toShort type=kotlin.Short operator=null
                  $this: CONST Int type=kotlin.Int value='239'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Short?
                  CALL .toShort type=kotlin.Short operator=null
                    $this: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='short failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: CALL .toInt type=kotlin.Int operator=null
                  $this: CONST Int type=kotlin.Int value='239'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Int?
                  CALL .toInt type=kotlin.Int operator=null
                    $this: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='int failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: CALL .toFloat type=kotlin.Float operator=null
                  $this: CONST Int type=kotlin.Int value='239'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Float?
                  CALL .toFloat type=kotlin.Float operator=null
                    $this: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='float failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: CALL .toLong type=kotlin.Long operator=null
                  $this: CONST Int type=kotlin.Int value='239'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Long?
                  CALL .toLong type=kotlin.Long operator=null
                    $this: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='long failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: CALL .toDouble type=kotlin.Double operator=null
                  $this: CONST Int type=kotlin.Int value='239'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Double?
                  CALL .toDouble type=kotlin.Double operator=null
                    $this: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='double failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: CONST Boolean type=kotlin.Boolean value='true'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Boolean?
                  CONST Boolean type=kotlin.Boolean value='true'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='boolean failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toString type=kotlin.String operator=null
                $this: CALL .toChar type=kotlin.Char operator=null
                  $this: CONST Char type=kotlin.Char value='a'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Char?
                  CALL .toChar type=kotlin.Char operator=null
                    $this: CONST Char type=kotlin.Char value='a'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='char failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toByte type=kotlin.Byte operator=null
                $this: CONST Int type=kotlin.Int value='239'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Byte?
                  CALL .toByte type=kotlin.Byte operator=null
                    $this: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='byte template failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toShort type=kotlin.Short operator=null
                $this: CONST Int type=kotlin.Int value='239'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Short?
                  CALL .toShort type=kotlin.Short operator=null
                    $this: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='short  template failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toInt type=kotlin.Int operator=null
                $this: CONST Int type=kotlin.Int value='239'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Int?
                  CALL .toInt type=kotlin.Int operator=null
                    $this: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='int  template failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toFloat type=kotlin.Float operator=null
                $this: CONST Int type=kotlin.Int value='239'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Float?
                  CALL .toFloat type=kotlin.Float operator=null
                    $this: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='float  template failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toLong type=kotlin.Long operator=null
                $this: CONST Int type=kotlin.Int value='239'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Long?
                  CALL .toLong type=kotlin.Long operator=null
                    $this: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='long  template failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toDouble type=kotlin.Double operator=null
                $this: CONST Int type=kotlin.Int value='239'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Double?
                  CALL .toDouble type=kotlin.Double operator=null
                    $this: CONST Int type=kotlin.Int value='239'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='double  template failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CONST Boolean type=kotlin.Boolean value='true'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Boolean?
                  CONST Boolean type=kotlin.Boolean value='true'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='boolean  template failed'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .toChar type=kotlin.Char operator=null
                $this: CONST Char type=kotlin.Char value='a'
              arg1: CALL .toString type=kotlin.String operator=null
                $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Char?
                  CALL .toChar type=kotlin.Char operator=null
                    $this: CONST Char type=kotlin.Char value='a'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='char  template failed'
        BLOCK type=kotlin.Unit operator=FOR_LOOP
          VAR val tmp0_iterator: kotlin.collections.IntIterator
            CALL .iterator type=kotlin.collections.IntIterator operator=FOR_LOOP_ITERATOR
              $this: CALL .rangeTo type=kotlin.ranges.IntRange operator=RANGE
                $this: CONST Int type=kotlin.Int value='0'
                other: CONST Int type=kotlin.Int value='255'
          WHILE label=null operator=FOR_LOOP_INNER_WHILE
            condition: CALL .hasNext type=kotlin.Boolean operator=FOR_LOOP_HAS_NEXT
              $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
            body: BLOCK type=kotlin.Unit operator=FOR_LOOP_INNER_WHILE
              VAR val b: kotlin.Int
                CALL .next type=kotlin.Int operator=FOR_LOOP_NEXT
                  $this: GET_VAR tmp0_iterator type=kotlin.collections.IntIterator operator=null
              BLOCK type=kotlin.Unit operator=null
                WHEN type=kotlin.Unit operator=IF
                  if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
                    arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
                      arg0: CALL .toByte type=kotlin.Byte operator=null
                        $this: GET_VAR b type=kotlin.Int operator=null
                      arg1: CALL .toString type=kotlin.String operator=null
                        $receiver: TYPE_OP operator=CAST typeOperand=kotlin.Byte?
                          CALL .toByte type=kotlin.Byte operator=null
                            $this: GET_VAR b type=kotlin.Int operator=null
                  then: RETURN type=kotlin.Nothing from=box
                    CONST String type=kotlin.String value='byte conversion failed'
        RETURN type=kotlin.Nothing from=box
          CONST String type=kotlin.String value='OK'
