MODULE <test-module>
  FILE /kt5937.kt
    PROPERTY public var result: kotlin.String
      EXPRESSION_BODY
        CONST String type=kotlin.String value='Fail'
    PROPERTY public var l: kotlin.Long
      EXPRESSION_BODY
        CONST Long type=kotlin.Long value='10'
    PROPERTY public var d: kotlin.Double
      EXPRESSION_BODY
        CONST Double type=kotlin.Double value='10.0'
    PROPERTY public var i: kotlin.Int
      EXPRESSION_BODY
        CONST Int type=kotlin.Int value='10'
    FUN public fun foo(): kotlin.Int
      BLOCK_BODY
        CALL .<set-result> type=kotlin.Unit operator=EQ
          <set-?>: CONST String type=kotlin.String value='OK'
        RETURN type=kotlin.Nothing from=foo
          CONST Int type=kotlin.Int value='1'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        VAR val javaClass: java.lang.Class<kotlin.Int>
          CALL .<get-javaClass> type=java.lang.Class<kotlin.Int> operator=GET_PROPERTY
            $receiver: CALL .foo type=kotlin.Int operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: GET_VAR javaClass type=java.lang.Class<kotlin.Int> operator=null
              arg1: CALL .<get-javaClass> type=java.lang.Class<kotlin.Int> operator=GET_PROPERTY
                $receiver: CONST Int type=kotlin.Int value='1'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 1'
        VAR val lv: kotlin.Long = 3.toLong()
          CONST Long type=kotlin.Long value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-javaClass> type=java.lang.Class<kotlin.Long> operator=GET_PROPERTY
                $receiver: CONST Long type=kotlin.Long value='2'
              arg1: CALL .<get-javaClass> type=java.lang.Class<kotlin.Long> operator=GET_PROPERTY
                $receiver: GET_VAR lv type=kotlin.Long operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 2'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-javaClass> type=java.lang.Class<kotlin.Long> operator=GET_PROPERTY
                $receiver: CONST Long type=kotlin.Long value='2'
              arg1: CALL .<get-javaClass> type=java.lang.Class<kotlin.Long> operator=GET_PROPERTY
                $receiver: CALL .<get-l> type=kotlin.Long operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 3'
        VAR val dv: kotlin.Double = 3.0.toDouble()
          CONST Double type=kotlin.Double value='3.0'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-javaClass> type=java.lang.Class<kotlin.Double> operator=GET_PROPERTY
                $receiver: CONST Double type=kotlin.Double value='2.0'
              arg1: CALL .<get-javaClass> type=java.lang.Class<kotlin.Double> operator=GET_PROPERTY
                $receiver: GET_VAR dv type=kotlin.Double operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 4'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-javaClass> type=java.lang.Class<kotlin.Double> operator=GET_PROPERTY
                $receiver: CONST Double type=kotlin.Double value='2.0'
              arg1: CALL .<get-javaClass> type=java.lang.Class<kotlin.Double> operator=GET_PROPERTY
                $receiver: CALL .<get-d> type=kotlin.Double operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 5'
        VAR val iv: kotlin.Int = 3
          CONST Int type=kotlin.Int value='3'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-javaClass> type=java.lang.Class<kotlin.Int> operator=GET_PROPERTY
                $receiver: CONST Int type=kotlin.Int value='2'
              arg1: CALL .<get-javaClass> type=java.lang.Class<kotlin.Int> operator=GET_PROPERTY
                $receiver: GET_VAR iv type=kotlin.Int operator=null
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 6'
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .<get-javaClass> type=java.lang.Class<kotlin.Int> operator=GET_PROPERTY
                $receiver: CONST Int type=kotlin.Int value='2'
              arg1: CALL .<get-javaClass> type=java.lang.Class<kotlin.Int> operator=GET_PROPERTY
                $receiver: CALL .<get-i> type=kotlin.Int operator=GET_PROPERTY
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='fail 7'
        RETURN type=kotlin.Nothing from=box
          CALL .<get-result> type=kotlin.String operator=GET_PROPERTY
