MODULE <test-module>
  FILE /delegationToVal.kt
    CLASS INTERFACE IActing
      FUN public abstract fun act(): kotlin.String
    CLASS CLASS CActing
      CONSTRUCTOR public constructor CActing(/*0*/ value: kotlin.String = ...)
        value: EXPRESSION_BODY
          CONST String type=kotlin.String value='OK'
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD value type=kotlin.Unit operator=null
            receiver: THIS public final class CActing : IActing type=CActing
            value: GET_VAR value type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=CActing
      PROPERTY public final val value: kotlin.String
        EXPRESSION_BODY
          GET_VAR value type=kotlin.String operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      FUN public open override /*1*/ fun act(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=act
            CALL .<get-value> type=kotlin.String operator=GET_PROPERTY
              $this: THIS public final class CActing : IActing type=CActing
    CLASS CLASS Test
      CONSTRUCTOR public constructor Test(/*0*/ acting: CActing = ...)
        acting: EXPRESSION_BODY
          CALL .<init> type=CActing operator=null
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD acting type=kotlin.Unit operator=null
            receiver: THIS public final class Test : IActing type=Test
            value: GET_VAR acting type=CActing operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Test
      PROPERTY public final val acting: CActing
        EXPRESSION_BODY
          GET_VAR acting type=CActing operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY val `Test$IActing$delegate`: CActing
        EXPRESSION_BODY
          GET_VAR acting type=CActing operator=null
      FUN public open override /*1*/ /*delegation*/ fun act(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=act
            CALL .act type=kotlin.String operator=null
              $this: GET_VAR Test$IActing$delegate type=CActing operator=null
    CLASS CLASS Test2
      CONSTRUCTOR public constructor Test2(/*0*/ acting: CActing = ...)
        acting: EXPRESSION_BODY
          CALL .<init> type=CActing operator=null
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Any
          SET_BACKING_FIELD acting type=kotlin.Unit operator=null
            receiver: THIS public open class Test2 : IActing type=Test2
            value: GET_VAR acting type=CActing operator=INITIALIZE_PROPERTY_FROM_PARAMETER
          INSTANCE_INITIALIZER_CALL classDescriptor=Test2
      PROPERTY public open val acting: CActing
        EXPRESSION_BODY
          GET_VAR acting type=CActing operator=INITIALIZE_PROPERTY_FROM_PARAMETER
      PROPERTY val `Test2$IActing$delegate`: CActing
        EXPRESSION_BODY
          GET_VAR acting type=CActing operator=null
      FUN public open override /*1*/ /*delegation*/ fun act(): kotlin.String
        BLOCK_BODY
          RETURN type=kotlin.Nothing from=act
            CALL .act type=kotlin.String operator=null
              $this: GET_VAR Test2$IActing$delegate type=CActing operator=null
    CLASS CLASS Test3
      CONSTRUCTOR public constructor Test3()
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL Test2
          INSTANCE_INITIALIZER_CALL classDescriptor=Test3
      PROPERTY public open override /*1*/ val acting: CActing
        EXPRESSION_BODY
          CALL .<init> type=CActing operator=null
            value: CONST String type=kotlin.String value='OKOK'
    FUN public fun box(): kotlin.String
      BLOCK_BODY
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .getDeclaredField type=java.lang.reflect.Field! operator=null
              $this: CALL .<get-java> type=java.lang.Class<Test> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE Test type=kotlin.reflect.KClass<Test>
              p0: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='delegate_0'
            RETURN type=kotlin.Nothing from=box
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='delegate_0 field generated for class Test but should not'
          catch e: BLOCK type=kotlin.Unit operator=null
        TRY_CATCH type=kotlin.Unit
          try: BLOCK type=kotlin.Nothing operator=null
            CALL .getDeclaredField type=java.lang.reflect.Field! operator=null
              $this: CALL .<get-java> type=java.lang.Class<Test2> operator=GET_PROPERTY
                $receiver: CLASS_REFERENCE Test2 type=kotlin.reflect.KClass<Test2>
              p0: STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='delegate_0'
            RETURN type=kotlin.Nothing from=box
              STRING_CONCATENATION type=kotlin.String
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='$'
                CONST String type=kotlin.String value='delegate_0 field generated for class Test but should not'
          catch e: BLOCK type=kotlin.Unit operator=null
        WHEN type=kotlin.Unit operator=IF
          if: CALL .NOT type=kotlin.Boolean operator=EXCLEQ
            arg0: CALL .EQEQ type=kotlin.Boolean operator=EXCLEQ
              arg0: CALL .act type=kotlin.String operator=null
                $this: CALL .<get-acting> type=CActing operator=GET_PROPERTY
                  $this: CALL .<init> type=Test3 operator=null
              arg1: CONST String type=kotlin.String value='OKOK'
          then: RETURN type=kotlin.Nothing from=box
            CONST String type=kotlin.String value='Fail Test3'
        VAR val test: Test
          CALL .<init> type=Test operator=null
        RETURN type=kotlin.Nothing from=box
          CALL .act type=kotlin.String operator=null
            $this: GET_VAR test type=Test operator=null
